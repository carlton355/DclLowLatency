import { MatrixClient } from 'matrix-js-sdk/lib/client';
import { TextMessage, CursorOptions, CursorDirection, BasicMessageInfo, SocialId } from './types';
/**
 * This class can be used to navigate a conversation's history. You can load more messages
 * by moving forwards or backwards in time.
 */
export declare class ConversationCursor {
    private readonly roomId;
    private readonly window;
    private readonly lastReadMessageTimestampFetch;
    private static DEFAULT_LIMIT;
    private static DEFAULT_INITIAL_SIZE;
    private constructor();
    getMessages(): TextMessage[];
    canExtendInDirection(direction: CursorDirection): boolean;
    /**
     * Tries to extend the cursor in the provided direction, by adding 'size' events.
     * If doing so would break the cursor limit, then will remove the extra messages at the other side of the cursor.
     * Returns true if more messages were actually added to the cursor.
     */
    moveInDirection(direction: CursorDirection, size: number): Promise<boolean>;
    /**
     * Remove 'numberOfEvents' events from the cursor. If oldestMessages is true, then we will remove the
     * oldest messages. If it is false, we will remove the newest messages.
     */
    removeFromCursor(numberOfEvents: number, oldestMessages: boolean): void;
    static build(client: MatrixClient, userId: SocialId, roomId: string, initialEventId: string | undefined, // If no eventId is set, then we will start at the last message
    lastReadMessageTimestampFetch: (roomId: string) => BasicMessageInfo | undefined, options?: CursorOptions): Promise<ConversationCursor | undefined>;
    private static calculateLimit;
}
