import { MatrixClient } from 'matrix-js-sdk/lib/client';
import { SocialId, FriendshipRequest } from './types';
import { FriendsManagementAPI } from './FriendsManagementAPI';
import { SocialClient } from './SocialClient';
export declare const FRIENDSHIP_EVENT_TYPE = "org.decentraland.friendship";
export declare class FriendsManagementClient implements FriendsManagementAPI {
    private readonly matrixClient;
    private readonly socialClient;
    private static readonly PENDING_STATUSES;
    constructor(matrixClient: MatrixClient, socialClient: SocialClient);
    private fixAccountData;
    private getRoomIdByFriendId;
    getAllFriends(): SocialId[];
    getPendingRequests(): FriendshipRequest[];
    isUserMyFriend(userId: SocialId): boolean;
    addAsFriend(userId: SocialId): Promise<void>;
    deleteFriendshipWith(userId: SocialId): Promise<void>;
    approveFriendshipRequestFrom(userId: SocialId): Promise<void>;
    rejectFriendshipRequestFrom(userId: SocialId): Promise<void>;
    cancelFriendshipRequestTo(userId: SocialId): Promise<void>;
    onFriendshipRequest(listener: (requestedBy: SocialId) => void): void;
    onFriendshipRequestCancellation(listener: (canceledBy: SocialId) => void): void;
    onFriendshipRequestRejection(listener: (rejectedBy: SocialId) => void): void;
    onFriendshipRequestApproval(listener: (approvedBy: SocialId) => void): void;
    onFriendshipDeletion(listener: (deletedBy: SocialId) => void): void;
    private listenToEvent;
    private sendFriendshipEvent;
    /**
     * Perform an action according to the current friendship status between the logged in user, and the given user id.
     * If an action for the current status isn't provided, then nothing will be done
     */
    private actByStatus;
    private getFriendshipStatusInRoom;
    private getLastFriendshipEventInRoomByUser;
    private action;
}
