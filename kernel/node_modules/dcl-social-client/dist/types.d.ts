export declare type Timestamp = number;
export declare type SocialId = string;
export declare type ConversationId = string;
export declare type MessageId = string;
export declare const CHANNEL_TYPE = "channel";
export interface GetOrCreateConversationResponse {
    conversation: Conversation;
    created: boolean;
}
export declare enum ConversationType {
    GROUP = 0,
    DIRECT = 1,
    CHANNEL = 2
}
export declare type Conversation = {
    type: ConversationType;
    id: ConversationId;
    unreadMessages?: Array<BasicMessageInfo>;
    userIds?: Array<string>;
    lastEventTimestamp?: number;
    hasMessages?: boolean;
    name?: string;
};
export declare type Channel = Conversation & {
    description: string | undefined;
    memberCount: number;
};
export declare type BasicMessageInfo = {
    id: MessageId;
    timestamp: Timestamp;
};
export declare type TextMessage = BasicMessageInfo & {
    text: string;
    sender: SocialId;
    status: MessageStatus;
};
export declare enum MessageStatus {
    READ = "read",
    UNREAD = "unread"
}
export declare enum MessageType {
    TEXT = "m.text"
}
export declare enum CursorDirection {
    BACKWARDS = 0,
    FORWARDS = 1
}
export interface SearchChannelsResponse {
    channels: Channel[];
    nextBatch: string | undefined;
}
export declare type CursorOptions = {
    limit?: number;
    initialSize?: number;
};
export declare type FriendshipRequest = {
    from: SocialId;
    to: SocialId;
    createdAt: number;
};
export declare type UpdateUserStatus = {
    presence: PresenceType;
    realm: Realm;
    position: UserPosition;
};
export declare type CurrentUserStatus = {
    presence: PresenceType;
    lastActiveAgo: Timestamp | undefined;
    realm?: Realm;
    position?: UserPosition;
};
export declare enum PresenceType {
    OFFLINE = "offline",
    ONLINE = "online",
    UNAVAILABLE = "unavailable"
}
export declare type Realm = {
    serverName: string;
    layer: string;
};
export declare type UserPosition = {
    x: number;
    y: number;
};
export declare type ProfileInfo = {
    displayName?: string;
    avatarUrl?: string;
};
export declare type Member = {
    userId: string;
    name: string;
};
