
export declare type ArbitraryStateChange = SetValueStateChange | UnsetValueStateChange;

declare type AuthChain = AuthLink[];

declare type AuthLink = {
    type: AuthLinkType;
    payload: string;
    signature: Signature;
};

declare enum AuthLinkType {
    SIGNER = "SIGNER",
    ECDSA_PERSONAL_EPHEMERAL = "ECDSA_EPHEMERAL",
    ECDSA_PERSONAL_SIGNED_ENTITY = "ECDSA_SIGNED_ENTITY",
    ECDSA_EIP_1654_EPHEMERAL = "ECDSA_EIP_1654_EPHEMERAL",
    ECDSA_EIP_1654_SIGNED_ENTITY = "ECDSA_EIP_1654_SIGNED_ENTITY"
}

declare type BaseProgress = {
    current?: number;
    challenge?: any;
    arbitraryStateChanges?: ArbitraryStateChange[];
};

declare type BodyType = 'json' | 'text';

export declare type ClientResponse<T> = OkClientResponse<T> | FailedClientResponse;

export declare type CodeRequirement = {
    type: 'code';
    code: string;
};

export declare type CompletedPreviousRequirement = {
    type: 'completedPrevious';
};

export declare type CompletedQuestRequirement = {
    type: 'completedQuest';
    questId: string;
};

export declare type CompletedTaskInAnyQuestRequirement = {
    type: 'completedTaskInAnyQuest';
    taskId: string;
};

export declare type CompletedTaskInCurrentQuestRequirement = {
    type: 'completedTaskInCurrentQuest';
    taskId: string;
};

export declare type DateRequirement = {
    type: 'date';
    /**@format date-time*/
    fromDate?: string;
    /**@format date-time*/
    toDate?: string;
};

export declare type ErrorResponse = {
    status: string;
    message: string;
    errorData?: any;
};

export declare type FailedClientResponse = {
    ok: false;
    status: number;
    body?: ErrorResponse;
};

declare type FlatFetchFn = (url: string, init: FlatFetchInit) => Promise<FlatFetchResponse>;

declare type FlatFetchInit = RequestInit & {
    responseBodyType?: BodyType;
};

declare type FlatFetchResponse = {
    ok: boolean;
    status: number;
    statusText: string;
    headers: Record<string, string>;
    json?: any;
    text?: string;
};

export declare enum GivenRewardStatus {
    OK = "ok",
    ALREADY_GIVEN = "already_given",
    TASK_ALREADY_COMPLETED = "task_already_completed",
    FAILED = "failed"
}

export declare type NumericOperationData = ParameterOperation | ResetOperation;

export declare type NumericProgressData = {
    type: NumericProgressMode['type'];
} & BaseProgress & NumericOperationData;

export declare type NumericProgressMode = {
    type: 'numeric';
    direction: ProgressDirection;
    start: number;
    end: number;
    unit: string;
};

export declare type OkClientResponse<T> = {
    ok: true;
    status: number;
    body: T;
};

export declare type ParameterOperation = {
    amount: number;
    operation: 'increase' | 'decrease' | 'set';
};

export declare type PlayerGivenReward = {
    id: string;
    reward: PlayerReward;
    status: GivenRewardStatus;
    date: Date;
    claimData: Record<string, any>;
};

export declare type PlayerReward = {
    id: string;
    type: RewardType;
    name: string;
    imageUrl?: string;
};

export declare type PlayerTaskProgress = {
    id: string;
    step?: any;
    progressData: ProgressData;
    status: ProgressStatus;
    /**@format date-time*/
    date: string;
};

export declare type ProgressData = SingleProgressData | NumericProgressData | StepBasedProgressData;

export declare type ProgressDirection = 'up' | 'down';

export declare type ProgressMode = SingleProgressMode | NumericProgressMode | (StepBasedProgressMode & {
    direction?: ProgressDirection;
    unit?: string;
});

export declare enum ProgressStatus {
    BLOCKED = "blocked",
    NOT_STARTED = "not_started",
    ON_GOING = "on_going",
    COMPLETED = "completed",
    FAILED = "failed",
    REVERTED = "reverted"
}

export declare type ProgressSummary = {
    current: number;
    end: number;
    start: number;
    direction: ProgressDirection;
    unit: string;
};

export declare class QuestsClient {
    private options;
    private obf;
    private fetchFn;
    constructor(options: QuestsClientOptions);
    private urlFor;
    private fetch;
    getQuests(): Promise<ClientResponse<QuestState[]>>;
    getQuestDetails(questId: string): Promise<ClientResponse<QuestState>>;
    startQuest(questId: string): Promise<ClientResponse<QuestState>>;
    updateArbitraryState(questId: string, changes: ArbitraryStateChange[]): Promise<ClientResponse<QuestState>>;
    makeProgress(questId: string, taskId: string, progressData: ProgressData): Promise<ClientResponse<QuestState>>;
}

export declare type QuestsClientOptions = {
    metadata?: Record<string, any>;
    authChainProvider?: (payload: string) => AuthChain;
    baseUrl: string;
    fetchFn?: FlatFetchFn;
};

export declare type QuestState = {
    id: string;
    name: string;
    description: string;
    thumbnailEntry?: string;
    thumbnailBanner?: string;
    icon?: string;
    active: boolean;
    visibility: Visibility;
    progressStatus: ProgressStatus;
    progressPercentage: number;
    tasks: TaskState[];
    requirements: Requirement[];
    /**@format date-time*/
    lastProgressDate?: string;
    arbitraryState: Record<string, any>;
    rewards: PlayerReward[];
    givenRewards: PlayerGivenReward[];
};

export declare type Requirement = DateRequirement | CompletedQuestRequirement | CompletedTaskInAnyQuestRequirement | CompletedPreviousRequirement | CompletedTaskInCurrentQuestRequirement | CodeRequirement;

export declare type ResetOperation = {
    operation: 'reset';
};

export declare type RewardType = 'poap' | 'wearable' | 'mana' | 'other-nft' | 'other-erc20' | 'other';

export declare type SetValueStateChange = {
    set: Record<string, any>;
};

declare type Signature = string;

export declare type SingleProgressData = {
    type: SingleProgressMode['type'];
    status: ProgressStatus;
} & BaseProgress;

export declare type SingleProgressMode = {
    type: 'single';
};

export declare type StepBasedProgressData = {
    type: StepBasedProgressMode['type'];
    stepStatus: ProgressStatus;
    stepId: string;
} & BaseProgress;

export declare type StepBasedProgressMode = {
    type: 'step-based';
    unit: string;
};

export declare type StepState = {
    id: string;
    progressStatus?: ProgressStatus;
};

export declare type TaskState = {
    id: string;
    description: string;
    progressMode: ProgressMode;
    coordinates?: string;
    progressStatus: ProgressStatus;
    progressPercentage: number;
    required: boolean;
    section?: string;
    progressSummary: ProgressSummary;
    lastProgress?: PlayerTaskProgress;
    previousTask?: {
        id: string;
    };
    steps: StepState[];
    requirements: Requirement[];
    rewards: PlayerReward[];
    givenRewards: PlayerGivenReward[];
};

export declare type UnsetValueStateChange = {
    unset: string[];
};

export declare enum Visibility {
    VISIBLE = "visible",
    VISIBLE_IF_CAN_START = "visible_if_can_start",
    SECRET = "secret"
}

export { }
