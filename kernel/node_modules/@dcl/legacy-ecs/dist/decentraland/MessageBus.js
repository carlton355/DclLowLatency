import { Observable } from '../ecs/Observable';
import { error } from '../ecs/helpers';
var communicationsController = null;
var communicationsControllerPromise = null;
var _messageObserver = null;
/**
 * @internal
 */
export function getMessageObserver() {
    if (!_messageObserver) {
        _messageObserver = new Observable();
    }
    return _messageObserver;
}
function ensureCommunicationsController() {
    if (!communicationsControllerPromise) {
        communicationsControllerPromise = dcl.loadModule('@decentraland/CommunicationsController', {});
        void communicationsControllerPromise.then(function ($) {
            communicationsController = $;
        });
        var observer_1 = getMessageObserver();
        dcl.subscribe('comms');
        dcl.onEvent(function (event) {
            if (event.type === 'comms') {
                observer_1.notifyObservers(event.data);
            }
        });
    }
    return communicationsControllerPromise;
}
/**
 * @public
 */
var MessageBus = /** @class */ (function () {
    function MessageBus() {
        var _this = this;
        this.messageQueue = [];
        this.connected = false;
        this.flushing = false;
        void ensureCommunicationsController().then(function () {
            _this.connected = true;
            _this.flush();
        });
    }
    MessageBus.prototype.on = function (message, callback) {
        return getMessageObserver().add(function (e) {
            try {
                var m = JSON.parse(e.message);
                if (m.message === message) {
                    callback(m.payload, e.sender);
                }
            }
            catch (e) {
                dcl.error('Error parsing comms message ' + (e.message || ''), e);
            }
        });
    };
    // @internal
    MessageBus.prototype.sendRaw = function (message) {
        this.messageQueue.push(message);
        if (this.connected) {
            this.flush();
        }
    };
    MessageBus.prototype.emit = function (message, payload) {
        var messageToSend = JSON.stringify({ message: message, payload: payload });
        this.sendRaw(messageToSend);
        getMessageObserver().notifyObservers({
            message: messageToSend,
            sender: 'self'
        });
    };
    MessageBus.prototype.flush = function () {
        var _this = this;
        if (this.messageQueue.length === 0)
            return;
        if (!this.connected)
            return;
        if (!communicationsController)
            return;
        if (this.flushing)
            return;
        var message = this.messageQueue.shift();
        this.flushing = true;
        dcl.callRpc(communicationsController.rpcHandle, 'send', [message]).then(function (_) {
            _this.flushing = false;
            _this.flush();
        }, function (e) {
            _this.flushing = false;
            error('Error flushing MessageBus', e);
        });
    };
    return MessageBus;
}());
export { MessageBus };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZUJ1cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZWNlbnRyYWxhbmQvTWVzc2FnZUJ1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFZLE1BQU0sbUJBQW1CLENBQUE7QUFDeEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBRXRDLElBQUksd0JBQXdCLEdBQTRCLElBQUksQ0FBQTtBQUM1RCxJQUFJLCtCQUErQixHQUF5QyxJQUFJLENBQUE7QUFFaEYsSUFBSSxnQkFBZ0IsR0FBd0MsSUFBSSxDQUFBO0FBRWhFOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGtCQUFrQjtJQUNoQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7UUFDckIsZ0JBQWdCLEdBQUcsSUFBSSxVQUFVLEVBQW9CLENBQUE7S0FDdEQ7SUFDRCxPQUFPLGdCQUFnQixDQUFBO0FBQ3pCLENBQUM7QUFFRCxTQUFTLDhCQUE4QjtJQUNyQyxJQUFJLENBQUMsK0JBQStCLEVBQUU7UUFDcEMsK0JBQStCLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FDOUMsd0NBQXdDLEVBQ3hDLEVBQUUsQ0FDSCxDQUFBO1FBRUQsS0FBSywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFDO1lBQzFDLHdCQUF3QixHQUFHLENBQUMsQ0FBQTtRQUM5QixDQUFDLENBQUMsQ0FBQTtRQUVGLElBQU0sVUFBUSxHQUFHLGtCQUFrQixFQUFFLENBQUE7UUFFckMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN0QixHQUFHLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSztZQUNoQixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO2dCQUMxQixVQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFXLENBQUMsQ0FBQTthQUM1QztRQUNILENBQUMsQ0FBQyxDQUFBO0tBQ0g7SUFDRCxPQUFPLCtCQUErQixDQUFBO0FBQ3hDLENBQUM7QUFFRDs7R0FFRztBQUNIO0lBS0U7UUFBQSxpQkFLQztRQVRPLGlCQUFZLEdBQWEsRUFBRSxDQUFBO1FBQzNCLGNBQVMsR0FBRyxLQUFLLENBQUE7UUFDakIsYUFBUSxHQUFHLEtBQUssQ0FBQTtRQUd0QixLQUFLLDhCQUE4QixFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ3pDLEtBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO1lBQ3JCLEtBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNkLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELHVCQUFFLEdBQUYsVUFDRSxPQUFlLEVBQ2YsUUFBOEM7UUFFOUMsT0FBTyxrQkFBa0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUM7WUFDaEMsSUFBSTtnQkFDRixJQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtnQkFFL0IsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtvQkFDekIsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO2lCQUM5QjthQUNGO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsR0FBRyxDQUFDLEtBQUssQ0FDUCw4QkFBOEIsR0FBRyxDQUFFLENBQVcsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLEVBQzdELENBQUMsQ0FDRixDQUFBO2FBQ0Y7UUFDSCxDQUFDLENBQUUsQ0FBQTtJQUNMLENBQUM7SUFFRCxZQUFZO0lBQ1osNEJBQU8sR0FBUCxVQUFRLE9BQWU7UUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFL0IsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtTQUNiO0lBQ0gsQ0FBQztJQUVELHlCQUFJLEdBQUosVUFBSyxPQUFlLEVBQUUsT0FBeUI7UUFDN0MsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sU0FBQSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQTtRQUMxRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQzNCLGtCQUFrQixFQUFFLENBQUMsZUFBZSxDQUFDO1lBQ25DLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVPLDBCQUFLLEdBQWI7UUFBQSxpQkFvQkM7UUFuQkMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsT0FBTTtRQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFBRSxPQUFNO1FBQzNCLElBQUksQ0FBQyx3QkFBd0I7WUFBRSxPQUFNO1FBQ3JDLElBQUksSUFBSSxDQUFDLFFBQVE7WUFBRSxPQUFNO1FBRXpCLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUE7UUFFekMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUE7UUFFcEIsR0FBRyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3JFLFVBQUMsQ0FBQztZQUNBLEtBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFBO1lBQ3JCLEtBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNkLENBQUMsRUFDRCxVQUFDLENBQUM7WUFDQSxLQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQTtZQUNyQixLQUFLLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDdkMsQ0FBQyxDQUNGLENBQUE7SUFDSCxDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBdkVELElBdUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIgfSBmcm9tICcuLi9lY3MvT2JzZXJ2YWJsZSdcbmltcG9ydCB7IGVycm9yIH0gZnJvbSAnLi4vZWNzL2hlbHBlcnMnXG5cbmxldCBjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXI6IE1vZHVsZURlc2NyaXB0b3IgfCBudWxsID0gbnVsbFxubGV0IGNvbW11bmljYXRpb25zQ29udHJvbGxlclByb21pc2U6IFByb21pc2VMaWtlPE1vZHVsZURlc2NyaXB0b3I+IHwgbnVsbCA9IG51bGxcblxubGV0IF9tZXNzYWdlT2JzZXJ2ZXI6IG51bGwgfCBPYnNlcnZhYmxlPElFdmVudHNbJ2NvbW1zJ10+ID0gbnVsbFxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVzc2FnZU9ic2VydmVyKCkge1xuICBpZiAoIV9tZXNzYWdlT2JzZXJ2ZXIpIHtcbiAgICBfbWVzc2FnZU9ic2VydmVyID0gbmV3IE9ic2VydmFibGU8SUV2ZW50c1snY29tbXMnXT4oKVxuICB9XG4gIHJldHVybiBfbWVzc2FnZU9ic2VydmVyXG59XG5cbmZ1bmN0aW9uIGVuc3VyZUNvbW11bmljYXRpb25zQ29udHJvbGxlcigpIHtcbiAgaWYgKCFjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXJQcm9taXNlKSB7XG4gICAgY29tbXVuaWNhdGlvbnNDb250cm9sbGVyUHJvbWlzZSA9IGRjbC5sb2FkTW9kdWxlKFxuICAgICAgJ0BkZWNlbnRyYWxhbmQvQ29tbXVuaWNhdGlvbnNDb250cm9sbGVyJyxcbiAgICAgIHt9XG4gICAgKVxuXG4gICAgdm9pZCBjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXJQcm9taXNlLnRoZW4oKCQpID0+IHtcbiAgICAgIGNvbW11bmljYXRpb25zQ29udHJvbGxlciA9ICRcbiAgICB9KVxuXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBnZXRNZXNzYWdlT2JzZXJ2ZXIoKVxuXG4gICAgZGNsLnN1YnNjcmliZSgnY29tbXMnKVxuICAgIGRjbC5vbkV2ZW50KChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdjb21tcycpIHtcbiAgICAgICAgb2JzZXJ2ZXIubm90aWZ5T2JzZXJ2ZXJzKGV2ZW50LmRhdGEgYXMgYW55KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIGNvbW11bmljYXRpb25zQ29udHJvbGxlclByb21pc2Vcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlQnVzIHtcbiAgcHJpdmF0ZSBtZXNzYWdlUXVldWU6IHN0cmluZ1tdID0gW11cbiAgcHJpdmF0ZSBjb25uZWN0ZWQgPSBmYWxzZVxuICBwcml2YXRlIGZsdXNoaW5nID0gZmFsc2VcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB2b2lkIGVuc3VyZUNvbW11bmljYXRpb25zQ29udHJvbGxlcigpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlXG4gICAgICB0aGlzLmZsdXNoKClcbiAgICB9KVxuICB9XG5cbiAgb24oXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiAodmFsdWU6IGFueSwgc2VuZGVyOiBzdHJpbmcpID0+IHZvaWRcbiAgKTogT2JzZXJ2ZXI8SUV2ZW50c1snY29tbXMnXT4ge1xuICAgIHJldHVybiBnZXRNZXNzYWdlT2JzZXJ2ZXIoKS5hZGQoKGUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG0gPSBKU09OLnBhcnNlKGUubWVzc2FnZSlcblxuICAgICAgICBpZiAobS5tZXNzYWdlID09PSBtZXNzYWdlKSB7XG4gICAgICAgICAgY2FsbGJhY2sobS5wYXlsb2FkLCBlLnNlbmRlcilcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBkY2wuZXJyb3IoXG4gICAgICAgICAgJ0Vycm9yIHBhcnNpbmcgY29tbXMgbWVzc2FnZSAnICsgKChlIGFzIEVycm9yKS5tZXNzYWdlIHx8ICcnKSxcbiAgICAgICAgICBlXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9KSFcbiAgfVxuXG4gIC8vIEBpbnRlcm5hbFxuICBzZW5kUmF3KG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHRoaXMubWVzc2FnZVF1ZXVlLnB1c2gobWVzc2FnZSlcblxuICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgdGhpcy5mbHVzaCgpXG4gICAgfVxuICB9XG5cbiAgZW1pdChtZXNzYWdlOiBzdHJpbmcsIHBheWxvYWQ6IFJlY29yZDxhbnksIGFueT4pIHtcbiAgICBjb25zdCBtZXNzYWdlVG9TZW5kID0gSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlLCBwYXlsb2FkIH0pXG4gICAgdGhpcy5zZW5kUmF3KG1lc3NhZ2VUb1NlbmQpXG4gICAgZ2V0TWVzc2FnZU9ic2VydmVyKCkubm90aWZ5T2JzZXJ2ZXJzKHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VUb1NlbmQsXG4gICAgICBzZW5kZXI6ICdzZWxmJ1xuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIGZsdXNoKCkge1xuICAgIGlmICh0aGlzLm1lc3NhZ2VRdWV1ZS5sZW5ndGggPT09IDApIHJldHVyblxuICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHJldHVyblxuICAgIGlmICghY29tbXVuaWNhdGlvbnNDb250cm9sbGVyKSByZXR1cm5cbiAgICBpZiAodGhpcy5mbHVzaGluZykgcmV0dXJuXG5cbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5tZXNzYWdlUXVldWUuc2hpZnQoKVxuXG4gICAgdGhpcy5mbHVzaGluZyA9IHRydWVcblxuICAgIGRjbC5jYWxsUnBjKGNvbW11bmljYXRpb25zQ29udHJvbGxlci5ycGNIYW5kbGUsICdzZW5kJywgW21lc3NhZ2VdKS50aGVuKFxuICAgICAgKF8pID0+IHtcbiAgICAgICAgdGhpcy5mbHVzaGluZyA9IGZhbHNlXG4gICAgICAgIHRoaXMuZmx1c2goKVxuICAgICAgfSxcbiAgICAgIChlKSA9PiB7XG4gICAgICAgIHRoaXMuZmx1c2hpbmcgPSBmYWxzZVxuICAgICAgICBlcnJvcignRXJyb3IgZmx1c2hpbmcgTWVzc2FnZUJ1cycsIGUpXG4gICAgICB9XG4gICAgKVxuICB9XG59XG4iXX0=