var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Vector3, Quaternion, Matrix, MathTmp, Color3 } from '@dcl/ecs-math';
import { Component, ObservableComponent, DisposableComponent, getComponentId } from '../ecs/Component';
import { AnimationState } from './AnimationState';
import { log, newId } from '../ecs/helpers';
import { ActionButton } from './Input';
import { CameraMode } from './Types';
/**
 * @public
 */
export var CLASS_ID;
(function (CLASS_ID) {
    CLASS_ID[CLASS_ID["TRANSFORM"] = 1] = "TRANSFORM";
    CLASS_ID[CLASS_ID["UUID_CALLBACK"] = 8] = "UUID_CALLBACK";
    CLASS_ID[CLASS_ID["BOX_SHAPE"] = 16] = "BOX_SHAPE";
    CLASS_ID[CLASS_ID["SPHERE_SHAPE"] = 17] = "SPHERE_SHAPE";
    CLASS_ID[CLASS_ID["PLANE_SHAPE"] = 18] = "PLANE_SHAPE";
    CLASS_ID[CLASS_ID["CONE_SHAPE"] = 19] = "CONE_SHAPE";
    CLASS_ID[CLASS_ID["CYLINDER_SHAPE"] = 20] = "CYLINDER_SHAPE";
    CLASS_ID[CLASS_ID["TEXT_SHAPE"] = 21] = "TEXT_SHAPE";
    CLASS_ID[CLASS_ID["NFT_SHAPE"] = 22] = "NFT_SHAPE";
    CLASS_ID[CLASS_ID["UI_WORLD_SPACE_SHAPE"] = 23] = "UI_WORLD_SPACE_SHAPE";
    CLASS_ID[CLASS_ID["UI_SCREEN_SPACE_SHAPE"] = 24] = "UI_SCREEN_SPACE_SHAPE";
    CLASS_ID[CLASS_ID["UI_CONTAINER_RECT"] = 25] = "UI_CONTAINER_RECT";
    CLASS_ID[CLASS_ID["UI_CONTAINER_STACK"] = 26] = "UI_CONTAINER_STACK";
    CLASS_ID[CLASS_ID["UI_TEXT_SHAPE"] = 27] = "UI_TEXT_SHAPE";
    CLASS_ID[CLASS_ID["UI_INPUT_TEXT_SHAPE"] = 28] = "UI_INPUT_TEXT_SHAPE";
    CLASS_ID[CLASS_ID["UI_IMAGE_SHAPE"] = 29] = "UI_IMAGE_SHAPE";
    CLASS_ID[CLASS_ID["UI_SLIDER_SHAPE"] = 30] = "UI_SLIDER_SHAPE";
    CLASS_ID[CLASS_ID["CIRCLE_SHAPE"] = 31] = "CIRCLE_SHAPE";
    CLASS_ID[CLASS_ID["BILLBOARD"] = 32] = "BILLBOARD";
    CLASS_ID[CLASS_ID["ANIMATION"] = 33] = "ANIMATION";
    CLASS_ID[CLASS_ID["FONT"] = 34] = "FONT";
    CLASS_ID[CLASS_ID["UI_FULLSCREEN_SHAPE"] = 40] = "UI_FULLSCREEN_SHAPE";
    CLASS_ID[CLASS_ID["UI_BUTTON_SHAPE"] = 41] = "UI_BUTTON_SHAPE";
    CLASS_ID[CLASS_ID["GLTF_SHAPE"] = 54] = "GLTF_SHAPE";
    CLASS_ID[CLASS_ID["OBJ_SHAPE"] = 55] = "OBJ_SHAPE";
    CLASS_ID[CLASS_ID["AVATAR_SHAPE"] = 56] = "AVATAR_SHAPE";
    CLASS_ID[CLASS_ID["BASIC_MATERIAL"] = 64] = "BASIC_MATERIAL";
    CLASS_ID[CLASS_ID["PBR_MATERIAL"] = 65] = "PBR_MATERIAL";
    CLASS_ID[CLASS_ID["HIGHLIGHT_ENTITY"] = 66] = "HIGHLIGHT_ENTITY";
    /** @deprecated Sound has been deprecataed */
    CLASS_ID[CLASS_ID["SOUND"] = 67] = "SOUND";
    CLASS_ID[CLASS_ID["TEXTURE"] = 68] = "TEXTURE";
    CLASS_ID[CLASS_ID["VIDEO_CLIP"] = 70] = "VIDEO_CLIP";
    CLASS_ID[CLASS_ID["VIDEO_TEXTURE"] = 71] = "VIDEO_TEXTURE";
    CLASS_ID[CLASS_ID["AVATAR_TEXTURE"] = 72] = "AVATAR_TEXTURE";
    CLASS_ID[CLASS_ID["AUDIO_CLIP"] = 200] = "AUDIO_CLIP";
    CLASS_ID[CLASS_ID["AUDIO_SOURCE"] = 201] = "AUDIO_SOURCE";
    CLASS_ID[CLASS_ID["AUDIO_STREAM"] = 202] = "AUDIO_STREAM";
    CLASS_ID[CLASS_ID["GIZMOS"] = 203] = "GIZMOS";
    CLASS_ID[CLASS_ID["SMART_ITEM"] = 204] = "SMART_ITEM";
    CLASS_ID[CLASS_ID["AVATAR_MODIFIER_AREA"] = 205] = "AVATAR_MODIFIER_AREA";
    CLASS_ID[CLASS_ID["AVATAR_ATTACH"] = 206] = "AVATAR_ATTACH";
    CLASS_ID[CLASS_ID["CAMERA_MODE_AREA"] = 207] = "CAMERA_MODE_AREA";
    // For state sync only
    CLASS_ID[CLASS_ID["NAME"] = 300] = "NAME";
    CLASS_ID[CLASS_ID["LOCKED_ON_EDIT"] = 301] = "LOCKED_ON_EDIT";
    CLASS_ID[CLASS_ID["VISIBLE_ON_EDIT"] = 302] = "VISIBLE_ON_EDIT";
})(CLASS_ID || (CLASS_ID = {}));
/** @public */
export var AvatarModifiers;
(function (AvatarModifiers) {
    AvatarModifiers["HIDE_AVATARS"] = "HIDE_AVATARS";
    AvatarModifiers["DISABLE_PASSPORTS"] = "DISABLE_PASSPORTS";
})(AvatarModifiers || (AvatarModifiers = {}));
/**
 * Define an area where avatars can be modified in some way
 * @public
 */
var AvatarModifierArea = /** @class */ (function (_super) {
    __extends(AvatarModifierArea, _super);
    function AvatarModifierArea(args) {
        var _this = _super.call(this) || this;
        _this.area = args.area;
        _this.modifiers = args.modifiers;
        _this.excludeIds = args.excludeIds;
        return _this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Object)
    ], AvatarModifierArea.prototype, "area", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Array)
    ], AvatarModifierArea.prototype, "modifiers", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Array)
    ], AvatarModifierArea.prototype, "excludeIds", void 0);
    AvatarModifierArea = __decorate([
        Component('engine.avatarModifierArea', CLASS_ID.AVATAR_MODIFIER_AREA),
        __metadata("design:paramtypes", [Object])
    ], AvatarModifierArea);
    return AvatarModifierArea;
}(ObservableComponent));
export { AvatarModifierArea };
/**
 * @public
 */
var Transform = /** @class */ (function (_super) {
    __extends(Transform, _super);
    function Transform(args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.position = args.position || Vector3.Zero();
        _this.rotation = args.rotation || Quaternion.Identity;
        _this.scale = args.scale || new Vector3(1, 1, 1);
        return _this;
    }
    Object.defineProperty(Transform.prototype, "eulerAngles", {
        /**
         * @public
         * The rotation as Euler angles in degrees.
         */
        get: function () {
            return this.rotation.eulerAngles;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @public
     * Rotates the transform so the forward vector points at target's current position.
     */
    Transform.prototype.lookAt = function (target, worldUp) {
        if (worldUp === void 0) { worldUp = MathTmp.staticUp; }
        var result = new Matrix();
        Matrix.LookAtLHToRef(this.position, target, worldUp, result);
        result.invert();
        Quaternion.FromRotationMatrixToRef(result, this.rotation);
        return this;
    };
    /**
     * @public
     * Applies a rotation of euler angles around the x, y and z axis.
     */
    Transform.prototype.rotate = function (axis, angle) {
        this.rotation.multiplyInPlace(this.rotation.angleAxis(angle, axis));
        return this;
    };
    /**
     * @public
     * Moves the transform in the direction and distance of translation.
     */
    Transform.prototype.translate = function (vec) {
        this.position.addInPlace(vec);
        return this;
    };
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Vector3)
    ], Transform.prototype, "position", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Quaternion)
    ], Transform.prototype, "rotation", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Vector3)
    ], Transform.prototype, "scale", void 0);
    Transform = __decorate([
        Component('engine.transform', CLASS_ID.TRANSFORM),
        __metadata("design:paramtypes", [Object])
    ], Transform);
    return Transform;
}(ObservableComponent));
export { Transform };
/** @public */
export var AttachToAvatarAnchorPointId;
(function (AttachToAvatarAnchorPointId) {
    AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId["Position"] = 0] = "Position";
    AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId["NameTag"] = 1] = "NameTag";
    /** @internal */
    AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId["LeftHand"] = 2] = "LeftHand";
    /** @internal */
    AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId["RightHand"] = 3] = "RightHand";
})(AttachToAvatarAnchorPointId || (AttachToAvatarAnchorPointId = {}));
/**
 * @public
 */
var AttachToAvatar = /** @class */ (function (_super) {
    __extends(AttachToAvatar, _super);
    function AttachToAvatar(args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.avatarId = args.avatarId || '';
        _this.anchorPointId =
            args.anchorPointId || AttachToAvatarAnchorPointId.Position;
        return _this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", String)
    ], AttachToAvatar.prototype, "avatarId", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], AttachToAvatar.prototype, "anchorPointId", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", String)
    ], AttachToAvatar.prototype, "avatarSceneId", void 0);
    AttachToAvatar = __decorate([
        Component('engine.transform', CLASS_ID.AVATAR_ATTACH),
        __metadata("design:paramtypes", [Object])
    ], AttachToAvatar);
    return AttachToAvatar;
}(ObservableComponent));
export { AttachToAvatar };
/**
 * Billboard defines a behavior that makes the entity face the camera in any moment.
 * @public
 */
var Billboard = /** @class */ (function (_super) {
    __extends(Billboard, _super);
    function Billboard(x, y, z) {
        if (x === void 0) { x = true; }
        if (y === void 0) { y = true; }
        if (z === void 0) { z = true; }
        var _this = _super.call(this) || this;
        _this.x = true;
        _this.y = true;
        _this.z = true;
        _this.x = x;
        _this.y = y;
        _this.z = z;
        return _this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], Billboard.prototype, "x", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], Billboard.prototype, "y", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], Billboard.prototype, "z", void 0);
    Billboard = __decorate([
        Component('engine.billboard', CLASS_ID.BILLBOARD),
        __metadata("design:paramtypes", [Boolean, Boolean, Boolean])
    ], Billboard);
    return Billboard;
}(ObservableComponent));
export { Billboard };
/**
 * @public
 */
var Shape = /** @class */ (function (_super) {
    __extends(Shape, _super);
    function Shape() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Set to true to turn on the collider for the entity.
         */
        _this.withCollisions = true;
        /**
         * Set to true to turn on the PointerEvents blocking for the entity.
         */
        _this.isPointerBlocker = true;
        /**
         * Defines if the entity and its children should be rendered
         */
        _this.visible = true;
        return _this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], Shape.prototype, "withCollisions", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], Shape.prototype, "isPointerBlocker", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], Shape.prototype, "visible", void 0);
    return Shape;
}(ObservableComponent));
export { Shape };
/**
 * @public
 */
var BoxShape = /** @class */ (function (_super) {
    __extends(BoxShape, _super);
    function BoxShape() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Array)
    ], BoxShape.prototype, "uvs", void 0);
    BoxShape = __decorate([
        DisposableComponent('engine.shape', CLASS_ID.BOX_SHAPE)
    ], BoxShape);
    return BoxShape;
}(Shape));
export { BoxShape };
/**
 * @public
 */
var SphereShape = /** @class */ (function (_super) {
    __extends(SphereShape, _super);
    function SphereShape() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SphereShape = __decorate([
        DisposableComponent('engine.shape', CLASS_ID.SPHERE_SHAPE)
    ], SphereShape);
    return SphereShape;
}(Shape));
export { SphereShape };
/**
 * @public
 */
var CircleShape = /** @class */ (function (_super) {
    __extends(CircleShape, _super);
    function CircleShape() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], CircleShape.prototype, "segments", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], CircleShape.prototype, "arc", void 0);
    CircleShape = __decorate([
        DisposableComponent('engine.shape', CLASS_ID.CIRCLE_SHAPE)
    ], CircleShape);
    return CircleShape;
}(Shape));
export { CircleShape };
/**
 * @public
 */
var PlaneShape = /** @class */ (function (_super) {
    __extends(PlaneShape, _super);
    function PlaneShape() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Sets the horizontal length of the plane. Defaults to 1.
         */
        _this.width = 1;
        /**
         * Sets the vertical length of the plane. Defaults to 1.
         */
        _this.height = 1;
        return _this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], PlaneShape.prototype, "width", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], PlaneShape.prototype, "height", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Array)
    ], PlaneShape.prototype, "uvs", void 0);
    PlaneShape = __decorate([
        DisposableComponent('engine.shape', CLASS_ID.PLANE_SHAPE)
    ], PlaneShape);
    return PlaneShape;
}(Shape));
export { PlaneShape };
/**
 * @public
 */
var ConeShape = /** @class */ (function (_super) {
    __extends(ConeShape, _super);
    function ConeShape() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * The radius of the top of a truncated cone. Defaults to 0.
         */
        _this.radiusTop = 0;
        /**
         * The radius of the base of the cone. Defaults to 1.
         */
        _this.radiusBottom = 1;
        /**
         * Sets the number of rings along the cone height (positive integer). Defaults to 1.
         */
        _this.segmentsHeight = 1;
        /**
         * Sets the number of cone sides (positive integer). Defaults to 36.
         */
        _this.segmentsRadial = 36;
        /**
         * Adds two extra faces per subdivision to enclose the cone around its height axis.
         * Defaults to false.
         */
        _this.openEnded = false;
        /**
         * Sets the radius of the top and bottom caps at once.
         *
         * Properties `radiusTop` and `radiusBottom` are prioritized over this one.
         */
        _this.radius = null;
        /**
         * Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360.
         */
        _this.arc = 360;
        return _this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], ConeShape.prototype, "radiusTop", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], ConeShape.prototype, "radiusBottom", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], ConeShape.prototype, "segmentsHeight", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], ConeShape.prototype, "segmentsRadial", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], ConeShape.prototype, "openEnded", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Object)
    ], ConeShape.prototype, "radius", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], ConeShape.prototype, "arc", void 0);
    ConeShape = __decorate([
        DisposableComponent('engine.shape', CLASS_ID.CONE_SHAPE)
    ], ConeShape);
    return ConeShape;
}(Shape));
export { ConeShape };
/**
 * @public
 */
var CylinderShape = /** @class */ (function (_super) {
    __extends(CylinderShape, _super);
    function CylinderShape() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * The radius of the top of the cylinder. Defaults to 0.
         */
        _this.radiusTop = 1;
        /**
         * The radius of the base of the cylinder. Defaults to 1.
         */
        _this.radiusBottom = 1;
        /**
         * Sets the number of rings along the cylinder height (positive integer). Defaults to 1.
         */
        _this.segmentsHeight = 1;
        /**
         * Sets the number of cylinder sides (positive integer). Defaults to 36.
         */
        _this.segmentsRadial = 36;
        /**
         * Adds two extra faces per subdivision to enclose the cylinder around its height axis.
         * Defaults to false.
         */
        _this.openEnded = false;
        /**
         * Sets the radius of the top and bottom caps at once.
         *
         * Properties `radiusTop` and `radiusBottom` are prioritized over this one.
         */
        _this.radius = null;
        /**
         * Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360.
         */
        _this.arc = 360;
        return _this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], CylinderShape.prototype, "radiusTop", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], CylinderShape.prototype, "radiusBottom", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], CylinderShape.prototype, "segmentsHeight", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], CylinderShape.prototype, "segmentsRadial", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], CylinderShape.prototype, "openEnded", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Object)
    ], CylinderShape.prototype, "radius", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], CylinderShape.prototype, "arc", void 0);
    CylinderShape = __decorate([
        DisposableComponent('engine.shape', CLASS_ID.CYLINDER_SHAPE)
    ], CylinderShape);
    return CylinderShape;
}(Shape));
export { CylinderShape };
/**
 * @public
 */
var GLTFShape = /** @class */ (function (_super) {
    __extends(GLTFShape, _super);
    function GLTFShape(src) {
        var _this = _super.call(this) || this;
        _this.src = src;
        return _this;
    }
    __decorate([
        Shape.readonly,
        __metadata("design:type", String)
    ], GLTFShape.prototype, "src", void 0);
    GLTFShape = __decorate([
        DisposableComponent('engine.shape', CLASS_ID.GLTF_SHAPE),
        __metadata("design:paramtypes", [String])
    ], GLTFShape);
    return GLTFShape;
}(Shape));
export { GLTFShape };
/** @public */
export var PictureFrameStyle;
(function (PictureFrameStyle) {
    PictureFrameStyle[PictureFrameStyle["Classic"] = 0] = "Classic";
    PictureFrameStyle[PictureFrameStyle["Baroque_Ornament"] = 1] = "Baroque_Ornament";
    PictureFrameStyle[PictureFrameStyle["Diamond_Ornament"] = 2] = "Diamond_Ornament";
    PictureFrameStyle[PictureFrameStyle["Minimal_Wide"] = 3] = "Minimal_Wide";
    PictureFrameStyle[PictureFrameStyle["Minimal_Grey"] = 4] = "Minimal_Grey";
    PictureFrameStyle[PictureFrameStyle["Blocky"] = 5] = "Blocky";
    PictureFrameStyle[PictureFrameStyle["Gold_Edges"] = 6] = "Gold_Edges";
    PictureFrameStyle[PictureFrameStyle["Gold_Carved"] = 7] = "Gold_Carved";
    PictureFrameStyle[PictureFrameStyle["Gold_Wide"] = 8] = "Gold_Wide";
    PictureFrameStyle[PictureFrameStyle["Gold_Rounded"] = 9] = "Gold_Rounded";
    PictureFrameStyle[PictureFrameStyle["Metal_Medium"] = 10] = "Metal_Medium";
    PictureFrameStyle[PictureFrameStyle["Metal_Wide"] = 11] = "Metal_Wide";
    PictureFrameStyle[PictureFrameStyle["Metal_Slim"] = 12] = "Metal_Slim";
    PictureFrameStyle[PictureFrameStyle["Metal_Rounded"] = 13] = "Metal_Rounded";
    PictureFrameStyle[PictureFrameStyle["Pins"] = 14] = "Pins";
    PictureFrameStyle[PictureFrameStyle["Minimal_Black"] = 15] = "Minimal_Black";
    PictureFrameStyle[PictureFrameStyle["Minimal_White"] = 16] = "Minimal_White";
    PictureFrameStyle[PictureFrameStyle["Tape"] = 17] = "Tape";
    PictureFrameStyle[PictureFrameStyle["Wood_Slim"] = 18] = "Wood_Slim";
    PictureFrameStyle[PictureFrameStyle["Wood_Wide"] = 19] = "Wood_Wide";
    PictureFrameStyle[PictureFrameStyle["Wood_Twigs"] = 20] = "Wood_Twigs";
    PictureFrameStyle[PictureFrameStyle["Canvas"] = 21] = "Canvas";
    PictureFrameStyle[PictureFrameStyle["None"] = 22] = "None";
})(PictureFrameStyle || (PictureFrameStyle = {}));
/**
 * @public
 */
var NFTShape = /** @class */ (function (_super) {
    __extends(NFTShape, _super);
    function NFTShape(src, args) {
        if (args === void 0) { args = {}; }
        var _this = _super.call(this) || this;
        _this.src = src;
        var color = new Color3(0.6404918, 0.611472, 0.8584906);
        var style = PictureFrameStyle.Classic;
        // check if args is color (backwards compatibility)
        if ('r' in args) {
            color = args;
        }
        else if (args !== null) {
            if (args.color)
                color = args.color;
            if (args.style)
                style = args.style;
        }
        _this.color = color;
        _this.style = style;
        return _this;
    }
    __decorate([
        Shape.readonly,
        __metadata("design:type", String)
    ], NFTShape.prototype, "src", void 0);
    __decorate([
        Shape.readonly,
        __metadata("design:type", Number)
    ], NFTShape.prototype, "style", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Color3)
    ], NFTShape.prototype, "color", void 0);
    NFTShape = __decorate([
        DisposableComponent('engine.shape', CLASS_ID.NFT_SHAPE),
        __metadata("design:paramtypes", [String, Object])
    ], NFTShape);
    return NFTShape;
}(Shape));
export { NFTShape };
/**
 * @public
 */
var Texture = /** @class */ (function (_super) {
    __extends(Texture, _super);
    function Texture(src, opts) {
        var _this = _super.call(this) || this;
        var base64Test = new RegExp('data:[a-z-]+/[a-z-]+;base64');
        if (src.length > 2048 || base64Test.test(src)) {
            log('⚠️🚨 Base64 textures will be deprecated in version 7 of decentraland-ecs');
        }
        _this.src = src;
        if (opts) {
            for (var i in opts) {
                var that = _this;
                that[i] = opts[i];
            }
        }
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], Texture.prototype, "src", void 0);
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", Number)
    ], Texture.prototype, "samplingMode", void 0);
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", Number)
    ], Texture.prototype, "wrap", void 0);
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", Boolean)
    ], Texture.prototype, "hasAlpha", void 0);
    Texture = __decorate([
        DisposableComponent('engine.texture', CLASS_ID.TEXTURE),
        __metadata("design:paramtypes", [String, Object])
    ], Texture);
    return Texture;
}(ObservableComponent));
export { Texture };
/**
 * @public
 */
var Animator = /** @class */ (function (_super) {
    __extends(Animator, _super);
    function Animator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.states = [];
        return _this;
    }
    /**
     * Adds an AnimationState to the animation lists.
     */
    Animator.prototype.addClip = function (clip) {
        var _this = this;
        this.states.push(clip);
        clip.onChange(function () {
            _this.dirty = true;
        });
        clip.owner = this;
        return this;
    };
    /**
     * Gets the animation clip instance for the specified clip name.
     * If the clip doesn't exist a new one will be created.
     */
    Animator.prototype.getClip = function (clipName) {
        for (var i = 0; i < this.states.length; i++) {
            var clip = this.states[i];
            if (clip.clip === clipName) {
                return clip;
            }
        }
        var newClip = new AnimationState(clipName);
        this.addClip(newClip);
        return newClip;
    };
    /**
     * Resets and pauses the animation state, if the clip is null it will stop all animations on this animator
     */
    Animator.prototype.stop = function (clip) {
        if (clip) {
            clip.playing = false;
            clip.shouldReset = true;
        }
        else {
            for (var i = 0; i < this.states.length; i++) {
                var animationState = this.states[i];
                this.stop(animationState);
            }
        }
    };
    /**
     * Starts the animation
     */
    Animator.prototype.play = function (clip, reset) {
        if (reset === void 0) { reset = false; }
        for (var i = 0; i < this.states.length; i++) {
            var animationState = this.states[i];
            if (animationState.layer === clip.layer && clip !== animationState) {
                this.pause(animationState);
            }
        }
        if (reset)
            clip.shouldReset = true;
        clip.playing = true;
        clip.dirty = true;
        clip.data.nonce = Math.random();
    };
    /**
     * Pauses the animation state, if the clip is null it will pause all animations on this animator
     */
    Animator.prototype.pause = function (clip) {
        if (clip) {
            clip.playing = false;
        }
        else {
            for (var i = 0; i < this.states.length; i++) {
                var animationState = this.states[i];
                this.pause(animationState);
            }
        }
    };
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", Array)
    ], Animator.prototype, "states", void 0);
    Animator = __decorate([
        Component('engine.animator', CLASS_ID.ANIMATION)
    ], Animator);
    return Animator;
}(Shape));
export { Animator };
/**
 * @public
 */
var OBJShape = /** @class */ (function (_super) {
    __extends(OBJShape, _super);
    function OBJShape(src) {
        var _this = _super.call(this) || this;
        _this.src = src;
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OBJShape.prototype, "src", void 0);
    OBJShape = __decorate([
        DisposableComponent('engine.shape', CLASS_ID.OBJ_SHAPE),
        __metadata("design:paramtypes", [String])
    ], OBJShape);
    return OBJShape;
}(Shape));
export { OBJShape };
/**
 * @public
 */
var Font = /** @class */ (function (_super) {
    __extends(Font, _super);
    function Font(src) {
        if (src === void 0) { src = ''; }
        var _this = _super.call(this) || this;
        _this.src = src;
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], Font.prototype, "src", void 0);
    Font = __decorate([
        DisposableComponent('engine.font', CLASS_ID.FONT),
        __metadata("design:paramtypes", [String])
    ], Font);
    return Font;
}(ObservableComponent));
export { Font };
/**
 * @public
 */
export var Fonts;
(function (Fonts) {
    /** @deprecated SanFrancisco has been deprecated. Use SansSerif instead.*/
    Fonts["SanFrancisco"] = "builtin:SF-UI-Text-Regular SDF";
    /** @deprecated SanFrancisco_Heavy has been deprecated. Use SansSerif_Heavy instead.*/
    Fonts["SanFrancisco_Heavy"] = "builtin:SF-UI-Text-Heavy SDF";
    /** @deprecated SanFrancisco_Semibold has been deprecated. Use SansSerif_SemiBold instead.*/
    Fonts["SanFrancisco_Semibold"] = "builtin:SF-UI-Text-Semibold SDF";
    Fonts["LiberationSans"] = "builtin:LiberationSans SDF";
    Fonts["SansSerif"] = "SansSerif";
    Fonts["SansSerif_Heavy"] = "SansSerif_Heavy";
    Fonts["SansSerif_Bold"] = "SansSerif_Bold";
    Fonts["SansSerif_SemiBold"] = "SansSerif_SemiBold";
})(Fonts || (Fonts = {}));
/**
 * @public
 */
var TextShape = /** @class */ (function (_super) {
    __extends(TextShape, _super);
    function TextShape(value) {
        var _this = _super.call(this) || this;
        _this.outlineWidth = 0;
        _this.outlineColor = new Color3(1, 1, 1);
        _this.color = new Color3(1, 1, 1);
        _this.fontSize = 10;
        _this.opacity = 1.0;
        _this.value = '';
        _this.lineSpacing = '0px';
        _this.lineCount = 0;
        _this.textWrapping = false;
        _this.shadowBlur = 0;
        _this.shadowOffsetX = 0;
        _this.shadowOffsetY = 0;
        _this.shadowColor = new Color3(1, 1, 1);
        _this.hTextAlign = 'center';
        _this.vTextAlign = 'center';
        _this.width = 1;
        _this.height = 1;
        _this.paddingTop = 0;
        _this.paddingRight = 0;
        _this.paddingBottom = 0;
        _this.paddingLeft = 0;
        _this.billboard = false;
        _this.visible = true;
        if (value) {
            _this.value = value;
        }
        return _this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "outlineWidth", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Color3)
    ], TextShape.prototype, "outlineColor", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Color3)
    ], TextShape.prototype, "color", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "fontSize", void 0);
    __decorate([
        ObservableComponent.component,
        __metadata("design:type", Font)
    ], TextShape.prototype, "font", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "opacity", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", String)
    ], TextShape.prototype, "value", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", String)
    ], TextShape.prototype, "lineSpacing", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "lineCount", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], TextShape.prototype, "textWrapping", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "shadowBlur", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "shadowOffsetX", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "shadowOffsetY", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Color3)
    ], TextShape.prototype, "shadowColor", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", String)
    ], TextShape.prototype, "hTextAlign", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", String)
    ], TextShape.prototype, "vTextAlign", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "width", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "height", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "paddingTop", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "paddingRight", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "paddingBottom", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], TextShape.prototype, "paddingLeft", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], TextShape.prototype, "billboard", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], TextShape.prototype, "visible", void 0);
    TextShape = __decorate([
        Component('engine.text', CLASS_ID.TEXT_SHAPE),
        __metadata("design:paramtypes", [String])
    ], TextShape);
    return TextShape;
}(ObservableComponent));
export { TextShape };
/**
 * @public
 */
export var TransparencyMode;
(function (TransparencyMode) {
    TransparencyMode[TransparencyMode["OPAQUE"] = 0] = "OPAQUE";
    TransparencyMode[TransparencyMode["ALPHA_TEST"] = 1] = "ALPHA_TEST";
    TransparencyMode[TransparencyMode["ALPHA_BLEND"] = 2] = "ALPHA_BLEND";
    TransparencyMode[TransparencyMode["ALPHA_TEST_AND_BLEND"] = 3] = "ALPHA_TEST_AND_BLEND";
    TransparencyMode[TransparencyMode["AUTO"] = 4] = "AUTO";
})(TransparencyMode || (TransparencyMode = {}));
/**
 * @public
 */
var Material = /** @class */ (function (_super) {
    __extends(Material, _super);
    function Material() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Cutoff level for ALPHATEST mode. Range is between 0 and 1.
         * Defaults to 0.5
         */
        _this.alphaTest = 0.5;
        /**
         * Allow the material to cast shadows over other objects
         */
        _this.castShadows = true;
        /**
         * Sets the transparency mode of the material.
         * Defaults to -1.
         *
         * | Value | Type                                           |
         * | ----- | ---------------------------------------------- |
         * | 0     | OPAQUE  (default)                              |
         * | 1     | ALPHATEST                                      |
         * | 2     | ALPHABLEND                                     |
         * | 3     | ALPHATESTANDBLEND                              |
         * | 4     | AUTO (ALPHABLEND if alpha OPAQUE otherwise     |
         */
        _this.transparencyMode = TransparencyMode.AUTO;
        return _this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], Material.prototype, "alphaTest", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Object)
    ], Material.prototype, "albedoColor", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Color3
        /**
         * Specifies the metallic scalar of the metallic/roughness workflow.
         * Can also be used to scale the metalness values of the metallic texture.
         * Defaults to  0.5.
         */
        )
    ], Material.prototype, "emissiveColor", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], Material.prototype, "metallic", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], Material.prototype, "roughness", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Color3
        /**
         * Intensity of the direct lights e.g. the four lights available in scene.
         * This impacts both the direct diffuse and specular highlights.
         * Defaults to 1.
         */
        )
    ], Material.prototype, "reflectivityColor", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], Material.prototype, "directIntensity", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], Material.prototype, "microSurface", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], Material.prototype, "emissiveIntensity", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], Material.prototype, "specularIntensity", void 0);
    __decorate([
        ObservableComponent.component,
        __metadata("design:type", Object)
    ], Material.prototype, "albedoTexture", void 0);
    __decorate([
        ObservableComponent.component,
        __metadata("design:type", Object)
    ], Material.prototype, "alphaTexture", void 0);
    __decorate([
        ObservableComponent.component,
        __metadata("design:type", Object)
    ], Material.prototype, "emissiveTexture", void 0);
    __decorate([
        ObservableComponent.component,
        __metadata("design:type", Object)
    ], Material.prototype, "bumpTexture", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], Material.prototype, "castShadows", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], Material.prototype, "transparencyMode", void 0);
    Material = __decorate([
        DisposableComponent('engine.material', CLASS_ID.PBR_MATERIAL)
    ], Material);
    return Material;
}(ObservableComponent));
export { Material };
/**
 * @public
 */
var BasicMaterial = /** @class */ (function (_super) {
    __extends(BasicMaterial, _super);
    function BasicMaterial() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * A number between 0 and 1.
         * Any pixel with an alpha lower than this value will be shown as transparent.
         */
        _this.alphaTest = 0.5;
        /**
         * Allow the material to cast shadows over other objects
         */
        _this.castShadows = true;
        return _this;
    }
    __decorate([
        ObservableComponent.component,
        __metadata("design:type", Object)
    ], BasicMaterial.prototype, "texture", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], BasicMaterial.prototype, "alphaTest", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], BasicMaterial.prototype, "castShadows", void 0);
    BasicMaterial = __decorate([
        DisposableComponent('engine.material', CLASS_ID.BASIC_MATERIAL)
    ], BasicMaterial);
    return BasicMaterial;
}(ObservableComponent));
export { BasicMaterial };
/**
 * @public
 */
var OnUUIDEvent = /** @class */ (function (_super) {
    __extends(OnUUIDEvent, _super);
    function OnUUIDEvent(callback) {
        var _this = _super.call(this) || this;
        // @internal
        _this.uuid = newId('UUID');
        if (!callback || !('apply' in callback) || !('call' in callback)) {
            throw new Error('Callback is not a function');
        }
        _this.callback = callback;
        return _this;
    }
    OnUUIDEvent.uuidEvent = function (target, propertyKey) {
        if (delete target[propertyKey]) {
            var componentSymbol_1 = propertyKey + '_' + Math.random();
            target[componentSymbol_1] = undefined;
            Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));
            Object.defineProperty(target, propertyKey.toString(), {
                get: function () {
                    return this[componentSymbol_1];
                },
                set: function (value) {
                    var oldValue = this[componentSymbol_1];
                    if (value) {
                        if (value instanceof OnUUIDEvent) {
                            this.data[propertyKey] = value.uuid;
                        }
                        else {
                            throw new Error('value is not an OnUUIDEvent');
                        }
                    }
                    else {
                        this.data[propertyKey] = null;
                    }
                    this[componentSymbol_1] = value;
                    if (value !== oldValue) {
                        this.dirty = true;
                        for (var i = 0; i < this.subscriptions.length; i++) {
                            this.subscriptions[i](propertyKey, value, oldValue);
                        }
                    }
                },
                enumerable: true
            });
        }
    };
    OnUUIDEvent.prototype.toJSON = function () {
        return { uuid: this.uuid, type: this.type };
    };
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Function)
    ], OnUUIDEvent.prototype, "callback", void 0);
    return OnUUIDEvent;
}(ObservableComponent));
export { OnUUIDEvent };
/**
 * @public
 */
var OnPointerUUIDEvent = /** @class */ (function (_super) {
    __extends(OnPointerUUIDEvent, _super);
    function OnPointerUUIDEvent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.button = ActionButton.ANY;
        _this.hoverText = 'Interact';
        _this.distance = 10;
        _this.showFeedback = true;
        return _this;
    }
    OnPointerUUIDEvent.prototype.toJSON = function () {
        return {
            uuid: this.uuid,
            type: this.type,
            button: this.button,
            hoverText: this.hoverText,
            distance: this.distance,
            showFeedback: this.showFeedback
        };
    };
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", String)
    ], OnPointerUUIDEvent.prototype, "button", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", String)
    ], OnPointerUUIDEvent.prototype, "hoverText", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], OnPointerUUIDEvent.prototype, "distance", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], OnPointerUUIDEvent.prototype, "showFeedback", void 0);
    return OnPointerUUIDEvent;
}(OnUUIDEvent));
export { OnPointerUUIDEvent };
/**
 * @internal
 */
var OnPointerLock = /** @class */ (function (_super) {
    __extends(OnPointerLock, _super);
    function OnPointerLock() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'onPointerLock';
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnPointerLock.prototype, "type", void 0);
    OnPointerLock = __decorate([
        Component('engine.onPointerLock', CLASS_ID.UUID_CALLBACK)
    ], OnPointerLock);
    return OnPointerLock;
}(OnUUIDEvent));
export { OnPointerLock };
/**
 * @public
 */
var OnAnimationEnd = /** @class */ (function (_super) {
    __extends(OnAnimationEnd, _super);
    function OnAnimationEnd() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'onAnimationEnd';
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnAnimationEnd.prototype, "type", void 0);
    OnAnimationEnd = __decorate([
        Component('engine.onAnimationEnd', CLASS_ID.UUID_CALLBACK)
    ], OnAnimationEnd);
    return OnAnimationEnd;
}(OnUUIDEvent));
export { OnAnimationEnd };
/**
 * @internal
 */
var SmartItem = /** @class */ (function (_super) {
    __extends(SmartItem, _super);
    function SmartItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SmartItem = __decorate([
        Component('engine.smartItem', CLASS_ID.SMART_ITEM)
    ], SmartItem);
    return SmartItem;
}(ObservableComponent));
export { SmartItem };
/**
 * @public
 */
var VideoClip = /** @class */ (function (_super) {
    __extends(VideoClip, _super);
    function VideoClip(url) {
        var _this = _super.call(this) || this;
        _this.url = url;
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], VideoClip.prototype, "url", void 0);
    VideoClip = __decorate([
        DisposableComponent('engine.VideoClip', CLASS_ID.VIDEO_CLIP),
        __metadata("design:paramtypes", [String])
    ], VideoClip);
    return VideoClip;
}(ObservableComponent));
export { VideoClip };
/** @public */
export var VideoStatus;
(function (VideoStatus) {
    VideoStatus[VideoStatus["NONE"] = 0] = "NONE";
    VideoStatus[VideoStatus["ERROR"] = 1] = "ERROR";
    VideoStatus[VideoStatus["LOADING"] = 2] = "LOADING";
    VideoStatus[VideoStatus["READY"] = 3] = "READY";
    VideoStatus[VideoStatus["PLAYING"] = 4] = "PLAYING";
    VideoStatus[VideoStatus["BUFFERING"] = 5] = "BUFFERING";
})(VideoStatus || (VideoStatus = {}));
/**
 * @public
 */
var VideoTexture = /** @class */ (function (_super) {
    __extends(VideoTexture, _super);
    function VideoTexture(videoClip, opts) {
        var _this = _super.call(this) || this;
        _this.volume = 1;
        _this.playbackRate = 1;
        _this.loop = false;
        _this.seek = -1;
        _this._position = -1;
        _this._videoLength = -1;
        _this._status = VideoStatus.NONE;
        /**
         * Is this VideoTexture playing?
         */
        _this.playing = false;
        if (!(videoClip instanceof VideoClip)) {
            throw new Error("Trying to create VideoTexture(VideoClip) with an invalid VideoClip");
        }
        _this.videoClipId = getComponentId(videoClip);
        if (opts) {
            for (var i in opts) {
                var that = _this;
                that[i] = opts[i];
            }
        }
        return _this;
    }
    VideoTexture.prototype.play = function () {
        this.playing = true;
    };
    VideoTexture.prototype.pause = function () {
        this.playing = false;
    };
    VideoTexture.prototype.reset = function () {
        this.seekTime(0);
        this.pause();
    };
    VideoTexture.prototype.seekTime = function (seconds) {
        this.seek = seconds;
        this.dirty = true;
        this.data.nonce = Math.random();
    };
    VideoTexture.prototype.toJSON = function () {
        if (this.seek >= 0) {
            // the seek value was changed/used
            var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));
            this.seek = -1;
            return ret;
        }
        return _super.prototype.toJSON.call(this);
    };
    VideoTexture.prototype.update = function (videoEvent) {
        if (videoEvent.videoClipId === this.videoClipId) {
            this._status = videoEvent.videoStatus || VideoStatus.NONE;
            this._videoLength = videoEvent.totalVideoLength;
            this._position = videoEvent.currentOffset;
        }
    };
    Object.defineProperty(VideoTexture.prototype, "position", {
        get: function () {
            return this._position;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VideoTexture.prototype, "videoLength", {
        get: function () {
            return this._videoLength;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VideoTexture.prototype, "status", {
        get: function () {
            return this._status;
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], VideoTexture.prototype, "videoClipId", void 0);
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", Number)
    ], VideoTexture.prototype, "samplingMode", void 0);
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", Number)
    ], VideoTexture.prototype, "wrap", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], VideoTexture.prototype, "volume", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], VideoTexture.prototype, "playbackRate", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], VideoTexture.prototype, "loop", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], VideoTexture.prototype, "seek", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], VideoTexture.prototype, "playing", void 0);
    VideoTexture = __decorate([
        DisposableComponent('engine.VideoTexture', CLASS_ID.VIDEO_TEXTURE),
        __metadata("design:paramtypes", [VideoClip, Object])
    ], VideoTexture);
    return VideoTexture;
}(ObservableComponent));
export { VideoTexture };
/**
 * @public
 */
var CameraModeArea = /** @class */ (function (_super) {
    __extends(CameraModeArea, _super);
    function CameraModeArea(args) {
        var _this = _super.call(this) || this;
        _this.area = args.area;
        _this.cameraMode = args.cameraMode;
        return _this;
    }
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Object)
    ], CameraModeArea.prototype, "area", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], CameraModeArea.prototype, "cameraMode", void 0);
    CameraModeArea = __decorate([
        Component('engine.cameraModeArea', CLASS_ID.CAMERA_MODE_AREA),
        __metadata("design:paramtypes", [Object])
    ], CameraModeArea);
    return CameraModeArea;
}(ObservableComponent));
export { CameraModeArea };
/**
 * @public
 */
var AvatarTexture = /** @class */ (function (_super) {
    __extends(AvatarTexture, _super);
    function AvatarTexture(userId, opts) {
        var _this = _super.call(this) || this;
        _this.userId = userId;
        if (opts) {
            for (var i in opts) {
                var that = _this;
                that[i] = opts[i];
            }
        }
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], AvatarTexture.prototype, "userId", void 0);
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", Number)
    ], AvatarTexture.prototype, "samplingMode", void 0);
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", Number)
    ], AvatarTexture.prototype, "wrap", void 0);
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", Boolean)
    ], AvatarTexture.prototype, "hasAlpha", void 0);
    AvatarTexture = __decorate([
        DisposableComponent('engine.texture', CLASS_ID.AVATAR_TEXTURE),
        __metadata("design:paramtypes", [String, Object])
    ], AvatarTexture);
    return AvatarTexture;
}(ObservableComponent));
export { AvatarTexture };
//# sourceMappingURL=data:application/json;base64,