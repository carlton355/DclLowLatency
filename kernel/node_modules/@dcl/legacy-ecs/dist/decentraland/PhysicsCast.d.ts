/// <reference types="@dcl/posix" />
import { Vector3 } from '@dcl/ecs-math';
import { RaycastResponse } from './Events';
/**
 * @public
 */
export declare type QueryType = 'HitFirst' | 'HitAll' | 'HitFirstAvatar' | 'HitAllAvatars';
/**
 * @public
 */
export interface RaycastHit {
    didHit: boolean;
    ray: Ray;
    hitPoint: ReadOnlyVector3;
    hitNormal: ReadOnlyVector3;
}
/**
 * @public
 */
export interface Ray {
    origin: ReadOnlyVector3;
    direction: ReadOnlyVector3;
    distance: number;
}
/**
 * @public
 */
export interface HitEntityInfo {
    isValid: boolean;
    entityId: string;
    meshName: string;
}
/**
 * @public
 */
export interface RaycastHitEntity extends RaycastHit {
    entity: HitEntityInfo;
}
/**
 * @public
 */
export interface RaycastHitEntities extends RaycastHit {
    entities: RaycastHitEntity[];
}
/**
 * @public
 */
export interface BasicAvatarInfo {
    userId: string;
    name: string;
}
/**
 * @public
 */
export interface RaycastHitAvatar extends RaycastHit {
    avatar: BasicAvatarInfo;
}
/**
 * @public
 */
export interface RaycastHitAvatars extends RaycastHit {
    avatars: BasicAvatarInfo[];
}
/**
 * @public
 */
export interface IPhysicsCast {
    hitFirst(ray: Ray, hitCallback: (event: RaycastHitEntity) => void, id?: number): void;
    hitAll(ray: Ray, hitCallback: (event: RaycastHitEntities) => void, id?: number): void;
}
/**
 * @public
 */
export declare class PhysicsCast implements IPhysicsCast {
    private static _instance;
    private queries;
    private constructor();
    static get instance(): PhysicsCast;
    static ensureInstance(): any;
    getRayFromCamera(distance: number): Ray;
    getRayFromPositions(from: Vector3, to: Vector3): Ray;
    hitFirst(ray: Ray, hitCallback: (event: RaycastHitEntity) => void, id?: number): void;
    hitAll(ray: Ray, hitCallback: (event: RaycastHitEntities) => void, id?: number): void;
    hitFirstAvatar(_ray: Ray, _hitCallback: (event: RaycastHitAvatar) => void): void;
    hitAllAvatars(_ray: Ray, _hitCallback: (event: RaycastHitAvatars) => void): void;
    handleRaycastHitFirstResponse(response: RaycastResponse<RaycastHitEntity>): void;
    handleRaycastHitAllResponse(response: RaycastResponse<RaycastHitEntities>): void;
}
