/// <reference types="env" />
import { ReadOnlyColor4 } from '@dcl/ecs-math';
/** @public */
export declare enum InputEventType {
    DOWN = 0,
    UP = 1
}
/** @public */
export declare enum CameraMode {
    FirstPerson = 0,
    ThirdPerson = 1
}
/**
 * @public
 */
export declare type WearableId = string;
/**
 * @public
 */
export declare type AvatarForRenderer = {
    bodyShape: WearableId;
    skinColor: ReadOnlyColor4;
    hairColor: ReadOnlyColor4;
    eyeColor: ReadOnlyColor4;
    wearables: WearableId[];
};
/**
 * @public
 */
export declare type Wearable = {
    id: WearableId;
    type: 'wearable';
    category: string;
    baseUrl: string;
    tags: string[];
    representations: BodyShapeRespresentation[];
};
/**
 * @public
 */
export declare type BodyShapeRespresentation = {
    bodyShapes: string[];
    mainFile: string;
    contents: FileAndHash[];
};
/**
 * @public
 */
export declare type FileAndHash = {
    file: string;
    hash: string;
};
/**
 * @public
 */
export declare type ProfileForRenderer = {
    userId: string;
    name: string;
    description: string;
    email: string;
    avatar: AvatarForRenderer;
    snapshots: {
        face256: string;
        body: string;
    };
    version: number;
    hasConnectedWeb3: boolean;
    updatedAt?: number;
    createdAt?: number;
    parcelsWithAccess?: ParcelsWithAccess;
};
/** @public */
export declare type ParcelsWithAccess = Array<{
    x: number;
    y: number;
    role: LandRole;
}>;
/** @public */
export declare enum LandRole {
    OWNER = "owner",
    OPERATOR = "operator"
}
/**
 * @public
 */
export declare type MinimapSceneInfo = {
    name: string;
    owner: string;
    description: string;
    previewImageUrl: string | undefined;
    type: number;
    parcels: {
        x: number;
        y: number;
    }[];
    isPOI: boolean;
};
