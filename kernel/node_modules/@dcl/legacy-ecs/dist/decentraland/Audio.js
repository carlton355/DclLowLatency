var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { DisposableComponent, ObservableComponent, Component, getComponentId } from '../ecs/Component';
import { CLASS_ID } from './Components';
/**
 * @public
 */
var AudioClip = /** @class */ (function (_super) {
    __extends(AudioClip, _super);
    function AudioClip(url) {
        var _this = _super.call(this) || this;
        /**
         * Is this clip looping by default?
         */
        _this.loop = false;
        /**
         * Clip's master volume. This volume affects all the AudioSources.
         * Valid ranges from 0 to 1
         */
        _this.volume = 1;
        _this.url = url;
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], AudioClip.prototype, "url", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], AudioClip.prototype, "loop", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", String)
    ], AudioClip.prototype, "loadingCompleteEventId", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], AudioClip.prototype, "volume", void 0);
    AudioClip = __decorate([
        DisposableComponent('engine.AudioClip', CLASS_ID.AUDIO_CLIP),
        __metadata("design:paramtypes", [String])
    ], AudioClip);
    return AudioClip;
}(ObservableComponent));
export { AudioClip };
/**
 * @public
 */
var AudioSource = /** @class */ (function (_super) {
    __extends(AudioSource, _super);
    function AudioSource(audioClip) {
        var _this = _super.call(this) || this;
        _this.audioClip = audioClip;
        /**
         * Is this clip looping by default?
         */
        _this.loop = false;
        /**
         * Clip's master volume. This volume affects all the AudioSources.
         * Valid ranges from 0 to 1
         */
        _this.volume = 1;
        /**
         * Is this AudioSource playing?
         */
        _this.playing = false;
        /**
         * Pitch, default: 1.0, range from 0.0 to MaxFloat
         */
        _this.pitch = 1.0;
        /**
         * Timestamp of when the playOnce was executed to see if we need to start over the audio
         */
        _this.playedAtTimestamp = Date.now();
        if (!(audioClip instanceof AudioClip)) {
            throw new Error("Trying to create AudioSource(AudioClip) with an invalid AudioClip");
        }
        _this.audioClipId = getComponentId(audioClip);
        return _this;
    }
    /**
     * Disables the looping and plays the current source once.
     * If the sound was playing, it stops and starts over.
     */
    AudioSource.prototype.playOnce = function () {
        this.playing = true;
        this.dirty = true;
        this.playedAtTimestamp = Date.now();
        this.data.nonce = Math.random();
        return this;
    };
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], AudioSource.prototype, "audioClipId", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], AudioSource.prototype, "loop", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], AudioSource.prototype, "volume", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], AudioSource.prototype, "playing", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], AudioSource.prototype, "pitch", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], AudioSource.prototype, "playedAtTimestamp", void 0);
    AudioSource = __decorate([
        Component('engine.AudioSource', CLASS_ID.AUDIO_SOURCE),
        __metadata("design:paramtypes", [AudioClip])
    ], AudioSource);
    return AudioSource;
}(ObservableComponent));
export { AudioSource };
/**
 * @public
 */
var AudioStream = /** @class */ (function (_super) {
    __extends(AudioStream, _super);
    function AudioStream(url) {
        var _this = _super.call(this) || this;
        _this.playing = false;
        _this.volume = 1;
        _this.url = url;
        _this.playing = true;
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], AudioStream.prototype, "url", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Boolean)
    ], AudioStream.prototype, "playing", void 0);
    __decorate([
        ObservableComponent.field,
        __metadata("design:type", Number)
    ], AudioStream.prototype, "volume", void 0);
    AudioStream = __decorate([
        Component('engine.AudioStream', CLASS_ID.AUDIO_STREAM),
        __metadata("design:paramtypes", [String])
    ], AudioStream);
    return AudioStream;
}(ObservableComponent));
export { AudioStream };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXVkaW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjZW50cmFsYW5kL0F1ZGlvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsbUJBQW1CLEVBQ25CLFNBQVMsRUFDVCxjQUFjLEVBQ2YsTUFBTSxrQkFBa0IsQ0FBQTtBQUN6QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBRXZDOztHQUVHO0FBRUg7SUFBK0IsNkJBQW1CO0lBcUJoRCxtQkFBWSxHQUFXO1FBQXZCLFlBQ0UsaUJBQU8sU0FFUjtRQXBCRDs7V0FFRztRQUVILFVBQUksR0FBWSxLQUFLLENBQUE7UUFNckI7OztXQUdHO1FBRUgsWUFBTSxHQUFXLENBQUMsQ0FBQTtRQUloQixLQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTs7SUFDaEIsQ0FBQztJQXRCRDtRQURDLG1CQUFtQixDQUFDLFFBQVE7OzBDQUNUO0lBTXBCO1FBREMsbUJBQW1CLENBQUMsS0FBSzs7MkNBQ0w7SUFJckI7UUFEQyxtQkFBbUIsQ0FBQyxLQUFLOzs2REFDSztJQU8vQjtRQURDLG1CQUFtQixDQUFDLEtBQUs7OzZDQUNSO0lBbkJQLFNBQVM7UUFEckIsbUJBQW1CLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLFVBQVUsQ0FBQzs7T0FDaEQsU0FBUyxDQXlCckI7SUFBRCxnQkFBQztDQUFBLEFBekJELENBQStCLG1CQUFtQixHQXlCakQ7U0F6QlksU0FBUztBQTJCdEI7O0dBRUc7QUFFSDtJQUFpQywrQkFBbUI7SUFtQ2xELHFCQUE0QixTQUFvQjtRQUFoRCxZQUNFLGlCQUFPLFNBT1I7UUFSMkIsZUFBUyxHQUFULFNBQVMsQ0FBVztRQS9CaEQ7O1dBRUc7UUFFSCxVQUFJLEdBQVksS0FBSyxDQUFBO1FBRXJCOzs7V0FHRztRQUVILFlBQU0sR0FBVyxDQUFDLENBQUE7UUFFbEI7O1dBRUc7UUFFSCxhQUFPLEdBQVksS0FBSyxDQUFBO1FBRXhCOztXQUVHO1FBRUgsV0FBSyxHQUFXLEdBQUcsQ0FBQTtRQUVuQjs7V0FFRztRQUVILHVCQUFpQixHQUFXLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUlwQyxJQUFJLENBQUMsQ0FBQyxTQUFTLFlBQVksU0FBUyxDQUFDLEVBQUU7WUFDckMsTUFBTSxJQUFJLEtBQUssQ0FDYixtRUFBbUUsQ0FDcEUsQ0FBQTtTQUNGO1FBQ0QsS0FBSSxDQUFDLFdBQVcsR0FBRyxjQUFjLENBQUMsU0FBZ0IsQ0FBQyxDQUFBOztJQUNyRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsOEJBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQy9CLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQXJERDtRQURDLG1CQUFtQixDQUFDLFFBQVE7O29EQUNEO0lBTTVCO1FBREMsbUJBQW1CLENBQUMsS0FBSzs7NkNBQ0w7SUFPckI7UUFEQyxtQkFBbUIsQ0FBQyxLQUFLOzsrQ0FDUjtJQU1sQjtRQURDLG1CQUFtQixDQUFDLEtBQUs7O2dEQUNGO0lBTXhCO1FBREMsbUJBQW1CLENBQUMsS0FBSzs7OENBQ1A7SUFNbkI7UUFEQyxtQkFBbUIsQ0FBQyxLQUFLOzswREFDWTtJQWpDM0IsV0FBVztRQUR2QixTQUFTLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxDQUFDLFlBQVksQ0FBQzt5Q0FvQ2QsU0FBUztPQW5DckMsV0FBVyxDQXdEdkI7SUFBRCxrQkFBQztDQUFBLEFBeERELENBQWlDLG1CQUFtQixHQXdEbkQ7U0F4RFksV0FBVztBQTBEeEI7O0dBRUc7QUFFSDtJQUFpQywrQkFBbUI7SUFVbEQscUJBQVksR0FBVztRQUF2QixZQUNFLGlCQUFPLFNBR1I7UUFURCxhQUFPLEdBQVksS0FBSyxDQUFBO1FBR3hCLFlBQU0sR0FBVyxDQUFDLENBQUE7UUFJaEIsS0FBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUE7UUFDZCxLQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTs7SUFDckIsQ0FBQztJQVpEO1FBREMsbUJBQW1CLENBQUMsUUFBUTs7NENBQ1Q7SUFHcEI7UUFEQyxtQkFBbUIsQ0FBQyxLQUFLOztnREFDRjtJQUd4QjtRQURDLG1CQUFtQixDQUFDLEtBQUs7OytDQUNSO0lBUlAsV0FBVztRQUR2QixTQUFTLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxDQUFDLFlBQVksQ0FBQzs7T0FDMUMsV0FBVyxDQWV2QjtJQUFELGtCQUFDO0NBQUEsQUFmRCxDQUFpQyxtQkFBbUIsR0FlbkQ7U0FmWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlzcG9zYWJsZUNvbXBvbmVudCxcbiAgT2JzZXJ2YWJsZUNvbXBvbmVudCxcbiAgQ29tcG9uZW50LFxuICBnZXRDb21wb25lbnRJZFxufSBmcm9tICcuLi9lY3MvQ29tcG9uZW50J1xuaW1wb3J0IHsgQ0xBU1NfSUQgfSBmcm9tICcuL0NvbXBvbmVudHMnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLkF1ZGlvQ2xpcCcsIENMQVNTX0lELkFVRElPX0NMSVApXG5leHBvcnQgY2xhc3MgQXVkaW9DbGlwIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHVybDogc3RyaW5nXG5cbiAgLyoqXG4gICAqIElzIHRoaXMgY2xpcCBsb29waW5nIGJ5IGRlZmF1bHQ/XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBsb29wOiBib29sZWFuID0gZmFsc2VcblxuICAvLyBAaW50ZXJuYWxcbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbG9hZGluZ0NvbXBsZXRlRXZlbnRJZD86IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBDbGlwJ3MgbWFzdGVyIHZvbHVtZS4gVGhpcyB2b2x1bWUgYWZmZWN0cyBhbGwgdGhlIEF1ZGlvU291cmNlcy5cbiAgICogVmFsaWQgcmFuZ2VzIGZyb20gMCB0byAxXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2b2x1bWU6IG51bWJlciA9IDFcblxuICBjb25zdHJ1Y3Rvcih1cmw6IHN0cmluZykge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnVybCA9IHVybFxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUuQXVkaW9Tb3VyY2UnLCBDTEFTU19JRC5BVURJT19TT1VSQ0UpXG5leHBvcnQgY2xhc3MgQXVkaW9Tb3VyY2UgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgYXVkaW9DbGlwSWQ6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBJcyB0aGlzIGNsaXAgbG9vcGluZyBieSBkZWZhdWx0P1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbG9vcDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIENsaXAncyBtYXN0ZXIgdm9sdW1lLiBUaGlzIHZvbHVtZSBhZmZlY3RzIGFsbCB0aGUgQXVkaW9Tb3VyY2VzLlxuICAgKiBWYWxpZCByYW5nZXMgZnJvbSAwIHRvIDFcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHZvbHVtZTogbnVtYmVyID0gMVxuXG4gIC8qKlxuICAgKiBJcyB0aGlzIEF1ZGlvU291cmNlIHBsYXlpbmc/XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwbGF5aW5nOiBib29sZWFuID0gZmFsc2VcblxuICAvKipcbiAgICogUGl0Y2gsIGRlZmF1bHQ6IDEuMCwgcmFuZ2UgZnJvbSAwLjAgdG8gTWF4RmxvYXRcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBpdGNoOiBudW1iZXIgPSAxLjBcblxuICAvKipcbiAgICogVGltZXN0YW1wIG9mIHdoZW4gdGhlIHBsYXlPbmNlIHdhcyBleGVjdXRlZCB0byBzZWUgaWYgd2UgbmVlZCB0byBzdGFydCBvdmVyIHRoZSBhdWRpb1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGxheWVkQXRUaW1lc3RhbXA6IG51bWJlciA9IERhdGUubm93KClcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgYXVkaW9DbGlwOiBBdWRpb0NsaXApIHtcbiAgICBzdXBlcigpXG4gICAgaWYgKCEoYXVkaW9DbGlwIGluc3RhbmNlb2YgQXVkaW9DbGlwKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVHJ5aW5nIHRvIGNyZWF0ZSBBdWRpb1NvdXJjZShBdWRpb0NsaXApIHdpdGggYW4gaW52YWxpZCBBdWRpb0NsaXBgXG4gICAgICApXG4gICAgfVxuICAgIHRoaXMuYXVkaW9DbGlwSWQgPSBnZXRDb21wb25lbnRJZChhdWRpb0NsaXAgYXMgYW55KVxuICB9XG5cbiAgLyoqXG4gICAqIERpc2FibGVzIHRoZSBsb29waW5nIGFuZCBwbGF5cyB0aGUgY3VycmVudCBzb3VyY2Ugb25jZS5cbiAgICogSWYgdGhlIHNvdW5kIHdhcyBwbGF5aW5nLCBpdCBzdG9wcyBhbmQgc3RhcnRzIG92ZXIuXG4gICAqL1xuICBwbGF5T25jZSgpIHtcbiAgICB0aGlzLnBsYXlpbmcgPSB0cnVlXG4gICAgdGhpcy5kaXJ0eSA9IHRydWVcbiAgICB0aGlzLnBsYXllZEF0VGltZXN0YW1wID0gRGF0ZS5ub3coKVxuICAgIHRoaXMuZGF0YS5ub25jZSA9IE1hdGgucmFuZG9tKClcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUuQXVkaW9TdHJlYW0nLCBDTEFTU19JRC5BVURJT19TVFJFQU0pXG5leHBvcnQgY2xhc3MgQXVkaW9TdHJlYW0gZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdXJsOiBzdHJpbmdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwbGF5aW5nOiBib29sZWFuID0gZmFsc2VcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2b2x1bWU6IG51bWJlciA9IDFcblxuICBjb25zdHJ1Y3Rvcih1cmw6IHN0cmluZykge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnVybCA9IHVybFxuICAgIHRoaXMucGxheWluZyA9IHRydWVcbiAgfVxufVxuIl19