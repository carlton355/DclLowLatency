import { UUIDEvent, PointerEvent, RaycastResponse } from './Events';
import { OnUUIDEvent } from './Components';
import { ComponentAdded, ComponentRemoved } from '../ecs/IEntity';
import { Input } from './Input';
import { PhysicsCast } from './PhysicsCast';
/**
 * @public
 */
var RaycastEventSystem = /** @class */ (function () {
    function RaycastEventSystem() {
    }
    RaycastEventSystem.prototype.activate = function (engine) {
        engine.eventManager.addListener(RaycastResponse, this, function (event) {
            if (event.payload.queryType === 'HitFirst') {
                PhysicsCast.instance.handleRaycastHitFirstResponse(event);
            }
            else if (event.payload.queryType === 'HitAll') {
                PhysicsCast.instance.handleRaycastHitAllResponse(event);
            }
        });
        if (typeof dcl !== 'undefined') {
            dcl.subscribe('raycastResponse');
        }
    };
    RaycastEventSystem.prototype.deactivate = function () {
        if (typeof dcl !== 'undefined') {
            dcl.unsubscribe('raycastResponse');
        }
    };
    return RaycastEventSystem;
}());
export { RaycastEventSystem };
/**
 * @public
 */
var PointerEventSystem = /** @class */ (function () {
    function PointerEventSystem() {
    }
    PointerEventSystem.prototype.activate = function (engine) {
        engine.eventManager.addListener(PointerEvent, this, function (event) {
            Input.instance.handlePointerEvent(event.payload);
        });
        if (typeof dcl !== 'undefined') {
            dcl.subscribe('pointerUp');
            dcl.subscribe('pointerDown');
            dcl.subscribe('actionButtonEvent');
        }
    };
    PointerEventSystem.prototype.deactivate = function () {
        if (typeof dcl !== 'undefined') {
            dcl.unsubscribe('pointerUp');
            dcl.unsubscribe('pointerDown');
            dcl.unsubscribe('actionButtonEvent');
        }
    };
    return PointerEventSystem;
}());
export { PointerEventSystem };
/**
 * @public
 */
var UUIDEventSystem = /** @class */ (function () {
    function UUIDEventSystem() {
        this.handlerMap = {};
    }
    UUIDEventSystem.prototype.activate = function (engine) {
        engine.eventManager.addListener(UUIDEvent, this, this.handleEvent);
        engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);
        engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);
        if (typeof dcl !== 'undefined') {
            dcl.subscribe('uuidEvent');
        }
    };
    UUIDEventSystem.prototype.deactivate = function () {
        if (typeof dcl !== 'undefined') {
            dcl.unsubscribe('uuidEvent');
        }
    };
    UUIDEventSystem.prototype.onAddEntity = function (entity) {
        for (var componentName in entity.components) {
            var component = entity.components[componentName];
            if (component instanceof OnUUIDEvent) {
                this.handlerMap[component.uuid] = component;
            }
        }
    };
    UUIDEventSystem.prototype.onRemoveEntity = function (entity) {
        for (var componentName in entity.components) {
            var component = entity.components[componentName];
            if (component instanceof OnUUIDEvent) {
                delete this.handlerMap[component.uuid];
            }
        }
    };
    UUIDEventSystem.prototype.componentAdded = function (event) {
        if (event.entity.isAddedToEngine()) {
            var component = event.entity.components[event.componentName];
            if (component instanceof OnUUIDEvent) {
                this.handlerMap[component.uuid] = component;
            }
        }
    };
    UUIDEventSystem.prototype.componentRemoved = function (event) {
        if (event.entity.isAddedToEngine()) {
            if (event.component instanceof OnUUIDEvent) {
                delete this.handlerMap[event.component.uuid];
            }
        }
    };
    UUIDEventSystem.prototype.handleEvent = function (event) {
        if (event.uuid in this.handlerMap) {
            var handler = this.handlerMap[event.uuid];
            if (handler) {
                if (handler.callback && 'call' in handler.callback) {
                    handler.callback(event.payload);
                }
            }
        }
    };
    return UUIDEventSystem;
}());
export { UUIDEventSystem };
/** @internal */
export var raycastEventSystem = new RaycastEventSystem();
/** @internal */
export var pointerEventSystem = new PointerEventSystem();
/** @internal */
export var uuidEventSystem = new UUIDEventSystem();
//# sourceMappingURL=data:application/json;base64,