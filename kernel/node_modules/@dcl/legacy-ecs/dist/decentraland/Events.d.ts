/// <reference types="@dcl/posix" />
import { Observable } from '../ecs/Observable';
/**
 * @public
 */
export declare class UUIDEvent<T = any> {
    readonly uuid: string;
    readonly payload: T;
    constructor(uuid: string, payload: T);
}
/**
 * @public
 */
export declare class RaycastResponse<T> {
    readonly payload: RaycastResponsePayload<T>;
    constructor(payload: RaycastResponsePayload<T>);
}
/**
 * @public
 */
export declare class PointerEvent<GlobalInputEventResult> {
    readonly payload: GlobalInputEventResult;
    constructor(payload: GlobalInputEventResult);
}
/**
 * This event is triggered when you change your camera between 1st and 3rd person
 * @public
 */
export declare const onCameraModeChangedObservable: Observable<{
    cameraMode: 0 | 1 | 2;
}>;
/**
 * This event is triggered when you change your camera between 1st and 3rd person
 * @public
 */
export declare const onIdleStateChangedObservable: Observable<{
    isIdle: boolean;
}>;
/**
 * These events are triggered after your character enters the scene.
 * @public
 */
export declare const onEnterSceneObservable: Observable<{
    userId: string;
}>;
/** @public @deprecated Use onEnterSceneObservable instead. */
export declare const onEnterScene: Observable<{
    userId: string;
}>;
/**
 * These events are triggered after your character leaves the scene.
 * @public
 */
export declare const onLeaveSceneObservable: Observable<{
    userId: string;
}>;
/** @public @deprecated Use onLeaveSceneObservable instead. */
export declare const onLeaveScene: Observable<{
    userId: string;
}>;
/**
 * This event is triggered after all the resources of the scene were loaded (models, textures, etc...)
 * @public
 */
export declare const onSceneReadyObservable: Observable<{}>;
/**
 * @public
 */
export declare const onPlayerExpressionObservable: Observable<{
    expressionId: string;
}>;
/**
 * @public
 */
export declare const onPointerLockedStateChange: Observable<{
    locked?: boolean | undefined;
}>;
/**
 * @public
 */
export declare const onVideoEvent: Observable<{
    componentId: string;
    videoClipId: string;
    videoStatus: number;
    currentOffset: number;
    totalVideoLength: number;
}>;
/**
 * @public
 */
export declare const onProfileChanged: Observable<{
    ethAddress: string;
    version: number;
}>;
/**
 * @public
 */
export declare const onPlayerConnectedObservable: Observable<{
    userId: string;
}>;
/**
 * @public
 */
export declare const onPlayerDisconnectedObservable: Observable<{
    userId: string;
}>;
/**
 * @public
 */
export declare const onRealmChangedObservable: Observable<{
    domain: string;
    room: string;
    serverName: string;
    displayName: string;
}>;
/**
 * @public
 */
export declare const onPlayerClickedObservable: Observable<{
    userId: string;
    ray: {
        origin: ReadOnlyVector3;
        direction: ReadOnlyVector3;
        distance: number;
    };
}>;
