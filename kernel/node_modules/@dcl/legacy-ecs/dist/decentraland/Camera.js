import { Vector3, Quaternion } from '@dcl/ecs-math';
import { CameraMode } from './Types';
/**
 * @public
 */
var Camera = /** @class */ (function () {
    function Camera() {
        var _this = this;
        /** Camera position, relative to the parcel. */
        this.position = new Vector3();
        /** Camera rotation */
        this.rotation = new Quaternion();
        /** Feet position, relative to the parcel.  */
        this.feetPosition = new Vector3();
        /** Camera position, absolute. */
        this.worldPosition = new Vector3();
        // @internal
        this.lastEventPosition = { x: 0, y: 0, z: 0 };
        // @internal
        this.lastEventWorldPosition = { x: 0, y: 0, z: 0 };
        // @internal
        this.lastEventRotation = { x: 0, y: 0, z: 0, w: 1.0 };
        // @internal
        this._playerHeight = 1.6;
        // @internal
        this._cameraMode = CameraMode.ThirdPerson;
        if (typeof dcl !== 'undefined') {
            dcl.subscribe('positionChanged');
            dcl.subscribe('rotationChanged');
            dcl.subscribe('cameraModeChanged');
            dcl.onEvent(function (event) {
                switch (event.type) {
                    case 'positionChanged':
                        _this.positionChanged(event.data);
                        break;
                    case 'rotationChanged':
                        _this.rotationChanged(event.data);
                        break;
                    case 'cameraModeChanged':
                        _this.cameraModeChanged(event.data);
                        break;
                }
            });
        }
        Object.defineProperty(this.position, 'x', {
            get: function () { return _this.lastEventPosition.x; }
        });
        Object.defineProperty(this.position, 'y', {
            get: function () { return _this.lastEventPosition.y; }
        });
        Object.defineProperty(this.position, 'z', {
            get: function () { return _this.lastEventPosition.z; }
        });
        Object.defineProperty(this.worldPosition, 'x', {
            get: function () { return _this.lastEventWorldPosition.x; }
        });
        Object.defineProperty(this.worldPosition, 'y', {
            get: function () { return _this.lastEventWorldPosition.y; }
        });
        Object.defineProperty(this.worldPosition, 'z', {
            get: function () { return _this.lastEventWorldPosition.z; }
        });
        Object.defineProperty(this.feetPosition, 'x', {
            get: function () { return _this.lastEventPosition.x; }
        });
        Object.defineProperty(this.feetPosition, 'y', {
            get: function () { return _this.lastEventPosition.y - _this.playerHeight; }
        });
        Object.defineProperty(this.feetPosition, 'z', {
            get: function () { return _this.lastEventPosition.z; }
        });
        Object.defineProperty(this.rotation, 'x', {
            get: function () { return _this.lastEventRotation.x; }
        });
        Object.defineProperty(this.rotation, 'y', {
            get: function () { return _this.lastEventRotation.y; }
        });
        Object.defineProperty(this.rotation, 'z', {
            get: function () { return _this.lastEventRotation.z; }
        });
        Object.defineProperty(this.rotation, 'w', {
            get: function () { return _this.lastEventRotation.w; }
        });
    }
    Object.defineProperty(Camera, "instance", {
        get: function () {
            if (!Camera._instance) {
                Camera._instance = new Camera();
            }
            return Camera._instance;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "playerHeight", {
        /** Player height. */
        get: function () {
            return this._playerHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "cameraMode", {
        /** @deprecated Use onCameraModeChangedObservable Observable instead. */
        get: function () {
            return this._cameraMode;
        },
        enumerable: false,
        configurable: true
    });
    // @internal
    Camera.prototype.positionChanged = function (e) {
        this.lastEventPosition = e.position;
        this.lastEventWorldPosition = e.cameraPosition;
        this._playerHeight = e.playerHeight;
    };
    // @internal
    Camera.prototype.rotationChanged = function (e) {
        this.lastEventRotation = e.quaternion;
    };
    // @internal
    Camera.prototype.cameraModeChanged = function (e) {
        this._cameraMode = e.cameraMode;
    };
    return Camera;
}());
export { Camera };
//# sourceMappingURL=data:application/json;base64,