var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ObservableComponent } from '../ecs/Component';
import { uuidEventSystem } from './Systems';
import { CLASS_ID, OnUUIDEvent, OnPointerUUIDEvent } from './Components';
/**
 * @public
 */
var OnFocus = /** @class */ (function (_super) {
    __extends(OnFocus, _super);
    function OnFocus(callback) {
        var _this = _super.call(this, callback) || this;
        _this.type = 'onFocus';
        // This injection is necessary ONLY in events that are ALWAYS turned on and are
        // not assignable to entities. Like events for the UI elements
        // TODO(Brian): This will be removed when UI gets back to the entity parenting.
        uuidEventSystem.handlerMap[_this.uuid] = _this;
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnFocus.prototype, "type", void 0);
    OnFocus = __decorate([
        Component('engine.onFocus', CLASS_ID.UUID_CALLBACK),
        __metadata("design:paramtypes", [Function])
    ], OnFocus);
    return OnFocus;
}(OnUUIDEvent));
export { OnFocus };
/**
 * @public
 */
var OnTextSubmit = /** @class */ (function (_super) {
    __extends(OnTextSubmit, _super);
    function OnTextSubmit(callback) {
        var _this = _super.call(this, callback) || this;
        _this.type = 'onTextSubmit';
        // This injection is necessary ONLY in events that are ALWAYS turned on and are
        // not assignable to entities. Like events for the UI elements
        // TODO(Brian): This will be removed when UI gets back to the entity parenting.
        uuidEventSystem.handlerMap[_this.uuid] = _this;
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnTextSubmit.prototype, "type", void 0);
    OnTextSubmit = __decorate([
        Component('engine.onTextSubmit', CLASS_ID.UUID_CALLBACK),
        __metadata("design:paramtypes", [Function])
    ], OnTextSubmit);
    return OnTextSubmit;
}(OnUUIDEvent));
export { OnTextSubmit };
/**
 * @public
 */
var OnBlur = /** @class */ (function (_super) {
    __extends(OnBlur, _super);
    function OnBlur(callback) {
        var _this = _super.call(this, callback) || this;
        _this.type = 'onBlur';
        // This injection is necessary ONLY in events that are ALWAYS turned on and are
        // not assignable to entities. Like events for the UI elements
        // TODO(Brian): This will be removed when UI gets back to the entity parenting.
        uuidEventSystem.handlerMap[_this.uuid] = _this;
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnBlur.prototype, "type", void 0);
    OnBlur = __decorate([
        Component('engine.onBlur', CLASS_ID.UUID_CALLBACK),
        __metadata("design:paramtypes", [Function])
    ], OnBlur);
    return OnBlur;
}(OnUUIDEvent));
export { OnBlur };
/**
 * @public
 */
var OnEnter = /** @class */ (function (_super) {
    __extends(OnEnter, _super);
    function OnEnter(callback) {
        var _this = _super.call(this, callback) || this;
        _this.type = 'onEnter';
        // This injection is necessary ONLY in events that are ALWAYS turned on and are
        // not assignable to entities. Like events for the UI elements
        // TODO(Brian): This will be removed when UI gets back to the entity parenting.
        uuidEventSystem.handlerMap[_this.uuid] = _this;
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnEnter.prototype, "type", void 0);
    OnEnter = __decorate([
        Component('engine.onEnter', CLASS_ID.UUID_CALLBACK),
        __metadata("design:paramtypes", [Function])
    ], OnEnter);
    return OnEnter;
}(OnUUIDEvent));
export { OnEnter };
/**
 * @public
 */
var OnChanged = /** @class */ (function (_super) {
    __extends(OnChanged, _super);
    function OnChanged(callback) {
        var _this = _super.call(this, callback) || this;
        _this.type = 'onChange';
        // This injection is necessary ONLY in events that are ALWAYS turned on and are
        // not assignable to entities. Like events for the UI elements
        // TODO(Brian): This will be removed when UI gets back to the entity parenting.
        uuidEventSystem.handlerMap[_this.uuid] = _this;
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnChanged.prototype, "type", void 0);
    OnChanged = __decorate([
        Component('engine.onChange', CLASS_ID.UUID_CALLBACK),
        __metadata("design:paramtypes", [Function])
    ], OnChanged);
    return OnChanged;
}(OnUUIDEvent));
export { OnChanged };
/**
 * @public @deprecated use `OnPointerDown` instead
 */
var OnClick = /** @class */ (function (_super) {
    __extends(OnClick, _super);
    function OnClick(callback, options) {
        var _this = _super.call(this, callback) || this;
        _this.type = 'onClick';
        // This injection is necessary ONLY in events that are ALWAYS turned on and are
        // not assignable to entities. Like events for the UI elements
        // TODO(Brian): This will be removed when UI gets back to the entity parenting.
        uuidEventSystem.handlerMap[_this.uuid] = _this;
        if (options) {
            _this.showFeedback = !(options.showFeedback === false);
            if (options.button) {
                _this.button = options.button;
            }
            if (options.hoverText) {
                _this.hoverText = options.hoverText;
            }
            if (options.distance) {
                _this.distance = options.distance;
            }
        }
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnClick.prototype, "type", void 0);
    OnClick = __decorate([
        Component('engine.onClick', CLASS_ID.UUID_CALLBACK),
        __metadata("design:paramtypes", [Function, Object])
    ], OnClick);
    return OnClick;
}(OnPointerUUIDEvent));
export { OnClick };
/**
 * @public
 */
var OnPointerDown = /** @class */ (function (_super) {
    __extends(OnPointerDown, _super);
    function OnPointerDown(callback, options) {
        var _this = _super.call(this, callback) || this;
        _this.type = 'pointerDown';
        // This injection is necessary ONLY in events that are ALWAYS turned on and are
        // not assignable to entities. Like events for the UI elements
        // TODO(Brian): This will be removed when UI gets back to the entity parenting.
        uuidEventSystem.handlerMap[_this.uuid] = _this;
        if (options) {
            _this.showFeedback = !(options.showFeedback === false);
            if (options.button) {
                _this.button = options.button;
            }
            if (options.hoverText) {
                _this.hoverText = options.hoverText;
            }
            if (options.distance) {
                _this.distance = options.distance;
            }
        }
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnPointerDown.prototype, "type", void 0);
    OnPointerDown = __decorate([
        Component('engine.pointerDown', CLASS_ID.UUID_CALLBACK),
        __metadata("design:paramtypes", [Function, Object])
    ], OnPointerDown);
    return OnPointerDown;
}(OnPointerUUIDEvent));
export { OnPointerDown };
/**
 * @public
 */
var OnPointerUp = /** @class */ (function (_super) {
    __extends(OnPointerUp, _super);
    function OnPointerUp(callback, options) {
        var _this = _super.call(this, callback) || this;
        _this.type = 'pointerUp';
        // This injection is necessary ONLY in events that are ALWAYS turned on and are
        // not assignable to entities. Like events for the UI elements
        // TODO(Brian): This will be removed when UI gets back to the entity parenting.
        uuidEventSystem.handlerMap[_this.uuid] = _this;
        if (options) {
            _this.showFeedback = !(options.showFeedback === false);
            if (options.button) {
                _this.button = options.button;
            }
            if (options.hoverText) {
                _this.hoverText = options.hoverText;
            }
            if (options.distance) {
                _this.distance = options.distance;
            }
        }
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnPointerUp.prototype, "type", void 0);
    OnPointerUp = __decorate([
        Component('engine.pointerUp', CLASS_ID.UUID_CALLBACK),
        __metadata("design:paramtypes", [Function, Object])
    ], OnPointerUp);
    return OnPointerUp;
}(OnPointerUUIDEvent));
export { OnPointerUp };
/**
 * @public
 */
var OnPointerHoverEnter = /** @class */ (function (_super) {
    __extends(OnPointerHoverEnter, _super);
    function OnPointerHoverEnter(callback, options) {
        var _this = _super.call(this, callback) || this;
        _this.type = 'pointerHoverEnter';
        // This injection is necessary ONLY in events that are ALWAYS turned on and are
        // not assignable to entities. Like events for the UI elements
        // TODO(Brian): This will be removed when UI gets back to the entity parenting.
        uuidEventSystem.handlerMap[_this.uuid] = _this;
        if (options) {
            if (options.distance) {
                _this.distance = options.distance;
            }
        }
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnPointerHoverEnter.prototype, "type", void 0);
    OnPointerHoverEnter = __decorate([
        Component('engine.pointerHoverEnter', CLASS_ID.UUID_CALLBACK),
        __metadata("design:paramtypes", [Function, Object])
    ], OnPointerHoverEnter);
    return OnPointerHoverEnter;
}(OnPointerUUIDEvent));
export { OnPointerHoverEnter };
/**
 * @public
 */
var OnPointerHoverExit = /** @class */ (function (_super) {
    __extends(OnPointerHoverExit, _super);
    function OnPointerHoverExit(callback) {
        var _this = _super.call(this, callback) || this;
        _this.type = 'pointerHoverExit';
        // This injection is necessary ONLY in events that are ALWAYS turned on and are
        // not assignable to entities. Like events for the UI elements
        // TODO(Brian): This will be removed when UI gets back to the entity parenting.
        uuidEventSystem.handlerMap[_this.uuid] = _this;
        // Changed default distance value for this component because in most cases we probably
        // don't want for the hover exit event to be limited by a distance, and it default value was too small.
        _this.distance = 160;
        return _this;
    }
    __decorate([
        ObservableComponent.readonly,
        __metadata("design:type", String)
    ], OnPointerHoverExit.prototype, "type", void 0);
    OnPointerHoverExit = __decorate([
        Component('engine.pointerHoverExit', CLASS_ID.UUID_CALLBACK),
        __metadata("design:paramtypes", [Function])
    ], OnPointerHoverExit);
    return OnPointerHoverExit;
}(OnPointerUUIDEvent));
export { OnPointerHoverExit };
//# sourceMappingURL=data:application/json;base64,