// CORE DEPENDENCIES
export * from './ecs/Attachable';
export * from './ecs/Engine';
export * from './ecs/Component';
export * from './ecs/ComponentGroup';
export * from './ecs/Entity';
export * from './ecs/IEntity';
export * from './ecs/Task';
export * from './ecs/helpers';
export * from './ecs/Observable';
export * from './ecs/UIValue';
export * from './ecs/EventManager';
export * from './ecs/UserActions';
import { _initEventObservables } from './decentraland/Events';
import { DecentralandSynchronizationSystem } from './decentraland/Implementation';
// ECS INITIALIZATION
import { Engine } from './ecs/Engine';
import { Entity } from './ecs/Entity';
var entity = new Entity('scene');
entity.uuid = '0';
// Initialize engine
/** @public */
var engine = new Engine(entity);
import { DisposableComponent } from './ecs/Component';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
DisposableComponent.engine = engine;
// Initialize Decentraland interface
if (typeof dcl !== 'undefined') {
    engine.addSystem(new DecentralandSynchronizationSystem(dcl), Infinity);
    _initEventObservables(dcl);
}
import { uuidEventSystem, pointerEventSystem, raycastEventSystem } from './decentraland/Systems';
// Initialize UUID Events system
engine.addSystem(uuidEventSystem);
// Initialize Pointer Events System
engine.addSystem(pointerEventSystem);
// Initialize Raycast Events System
engine.addSystem(raycastEventSystem);
// DECENTRALAND DEPENDENCIES
export * from './decentraland/Math';
export * from './decentraland/Types';
export * from './decentraland/Components';
export * from './decentraland/Systems';
export * from './decentraland/Events';
export * from './decentraland/Camera';
export * from './decentraland/AnimationState';
export * from './decentraland/Input';
export * from './decentraland/Audio';
export * from './decentraland/Gizmos';
export * from './decentraland/UIShapes';
export * from './decentraland/AvatarShape';
export * from './decentraland/UIEvents';
export * from './decentraland/MessageBus';
export * from './decentraland/PhysicsCast';
export { engine };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLGNBQWMsa0JBQWtCLENBQUE7QUFDaEMsY0FBYyxjQUFjLENBQUE7QUFDNUIsY0FBYyxpQkFBaUIsQ0FBQTtBQUMvQixjQUFjLHNCQUFzQixDQUFBO0FBQ3BDLGNBQWMsY0FBYyxDQUFBO0FBQzVCLGNBQWMsZUFBZSxDQUFBO0FBQzdCLGNBQWMsWUFBWSxDQUFBO0FBQzFCLGNBQWMsZUFBZSxDQUFBO0FBQzdCLGNBQWMsa0JBQWtCLENBQUE7QUFDaEMsY0FBYyxlQUFlLENBQUE7QUFDN0IsY0FBYyxvQkFBb0IsQ0FBQTtBQUNsQyxjQUFjLG1CQUFtQixDQUFBO0FBRWpDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQzdELE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBRWpGLHFCQUFxQjtBQUNyQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ3JDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFFckMsSUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQ2pDO0FBQUMsTUFBYyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUE7QUFFM0Isb0JBQW9CO0FBQ3BCLGNBQWM7QUFDZCxJQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUVqQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUNyRCw2REFBNkQ7QUFDN0QsYUFBYTtBQUNiLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7QUFFbkMsb0NBQW9DO0FBQ3BDLElBQUksT0FBTyxHQUFHLEtBQUssV0FBVyxFQUFFO0lBQzlCLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxpQ0FBaUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUN0RSxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQTtDQUMzQjtBQUVELE9BQU8sRUFDTCxlQUFlLEVBQ2Ysa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNuQixNQUFNLHdCQUF3QixDQUFBO0FBRS9CLGdDQUFnQztBQUNoQyxNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBQ2pDLG1DQUFtQztBQUNuQyxNQUFNLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUE7QUFDcEMsbUNBQW1DO0FBQ25DLE1BQU0sQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtBQUVwQyw0QkFBNEI7QUFDNUIsY0FBYyxxQkFBcUIsQ0FBQTtBQUNuQyxjQUFjLHNCQUFzQixDQUFBO0FBQ3BDLGNBQWMsMkJBQTJCLENBQUE7QUFDekMsY0FBYyx3QkFBd0IsQ0FBQTtBQUN0QyxjQUFjLHVCQUF1QixDQUFBO0FBQ3JDLGNBQWMsdUJBQXVCLENBQUE7QUFDckMsY0FBYywrQkFBK0IsQ0FBQTtBQUM3QyxjQUFjLHNCQUFzQixDQUFBO0FBQ3BDLGNBQWMsc0JBQXNCLENBQUE7QUFDcEMsY0FBYyx1QkFBdUIsQ0FBQTtBQUNyQyxjQUFjLHlCQUF5QixDQUFBO0FBQ3ZDLGNBQWMsNEJBQTRCLENBQUE7QUFDMUMsY0FBYyx5QkFBeUIsQ0FBQTtBQUN2QyxjQUFjLDJCQUEyQixDQUFBO0FBQ3pDLGNBQWMsNEJBQTRCLENBQUE7QUFFMUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ09SRSBERVBFTkRFTkNJRVNcbmV4cG9ydCAqIGZyb20gJy4vZWNzL0F0dGFjaGFibGUnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9FbmdpbmUnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9Db21wb25lbnQnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9Db21wb25lbnRHcm91cCdcbmV4cG9ydCAqIGZyb20gJy4vZWNzL0VudGl0eSdcbmV4cG9ydCAqIGZyb20gJy4vZWNzL0lFbnRpdHknXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9UYXNrJ1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvaGVscGVycydcbmV4cG9ydCAqIGZyb20gJy4vZWNzL09ic2VydmFibGUnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9VSVZhbHVlJ1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvRXZlbnRNYW5hZ2VyJ1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvVXNlckFjdGlvbnMnXG5cbmltcG9ydCB7IF9pbml0RXZlbnRPYnNlcnZhYmxlcyB9IGZyb20gJy4vZGVjZW50cmFsYW5kL0V2ZW50cydcbmltcG9ydCB7IERlY2VudHJhbGFuZFN5bmNocm9uaXphdGlvblN5c3RlbSB9IGZyb20gJy4vZGVjZW50cmFsYW5kL0ltcGxlbWVudGF0aW9uJ1xuXG4vLyBFQ1MgSU5JVElBTElaQVRJT05cbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4vZWNzL0VuZ2luZSdcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4vZWNzL0VudGl0eSdcblxuY29uc3QgZW50aXR5ID0gbmV3IEVudGl0eSgnc2NlbmUnKVxuOyhlbnRpdHkgYXMgYW55KS51dWlkID0gJzAnXG5cbi8vIEluaXRpYWxpemUgZW5naW5lXG4vKiogQHB1YmxpYyAqL1xuY29uc3QgZW5naW5lID0gbmV3IEVuZ2luZShlbnRpdHkpXG5cbmltcG9ydCB7IERpc3Bvc2FibGVDb21wb25lbnQgfSBmcm9tICcuL2Vjcy9Db21wb25lbnQnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4vLyBAdHMtaWdub3JlXG5EaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZSA9IGVuZ2luZVxuXG4vLyBJbml0aWFsaXplIERlY2VudHJhbGFuZCBpbnRlcmZhY2VcbmlmICh0eXBlb2YgZGNsICE9PSAndW5kZWZpbmVkJykge1xuICBlbmdpbmUuYWRkU3lzdGVtKG5ldyBEZWNlbnRyYWxhbmRTeW5jaHJvbml6YXRpb25TeXN0ZW0oZGNsKSwgSW5maW5pdHkpXG4gIF9pbml0RXZlbnRPYnNlcnZhYmxlcyhkY2wpXG59XG5cbmltcG9ydCB7XG4gIHV1aWRFdmVudFN5c3RlbSxcbiAgcG9pbnRlckV2ZW50U3lzdGVtLFxuICByYXljYXN0RXZlbnRTeXN0ZW1cbn0gZnJvbSAnLi9kZWNlbnRyYWxhbmQvU3lzdGVtcydcblxuLy8gSW5pdGlhbGl6ZSBVVUlEIEV2ZW50cyBzeXN0ZW1cbmVuZ2luZS5hZGRTeXN0ZW0odXVpZEV2ZW50U3lzdGVtKVxuLy8gSW5pdGlhbGl6ZSBQb2ludGVyIEV2ZW50cyBTeXN0ZW1cbmVuZ2luZS5hZGRTeXN0ZW0ocG9pbnRlckV2ZW50U3lzdGVtKVxuLy8gSW5pdGlhbGl6ZSBSYXljYXN0IEV2ZW50cyBTeXN0ZW1cbmVuZ2luZS5hZGRTeXN0ZW0ocmF5Y2FzdEV2ZW50U3lzdGVtKVxuXG4vLyBERUNFTlRSQUxBTkQgREVQRU5ERU5DSUVTXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9NYXRoJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvVHlwZXMnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9Db21wb25lbnRzJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvU3lzdGVtcydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0V2ZW50cydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0NhbWVyYSdcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0FuaW1hdGlvblN0YXRlJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvSW5wdXQnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9BdWRpbydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0dpem1vcydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL1VJU2hhcGVzJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvQXZhdGFyU2hhcGUnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9VSUV2ZW50cydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL01lc3NhZ2VCdXMnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9QaHlzaWNzQ2FzdCdcblxuZXhwb3J0IHsgZW5naW5lIH1cbiJdfQ==