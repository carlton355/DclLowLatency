var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { newId } from './helpers';
import { EventConstructor } from './EventManager';
import { UIValue } from './UIValue';
var componentSymbol = '__name__symbol_';
var componentClassIdSymbol = '__classId__symbol_';
var componentIdSymbol = '__component__id_';
/**
 * @public
 */
var DisposableComponentCreated = /** @class */ (function () {
    function DisposableComponentCreated(componentId, componentName, classId) {
        this.componentId = componentId;
        this.componentName = componentName;
        this.classId = classId;
        // stub
    }
    DisposableComponentCreated = __decorate([
        EventConstructor(),
        __metadata("design:paramtypes", [String, String, Number])
    ], DisposableComponentCreated);
    return DisposableComponentCreated;
}());
export { DisposableComponentCreated };
/**
 * @public
 */
var DisposableComponentRemoved = /** @class */ (function () {
    function DisposableComponentRemoved(componentId) {
        this.componentId = componentId;
        // stub
    }
    DisposableComponentRemoved = __decorate([
        EventConstructor(),
        __metadata("design:paramtypes", [String])
    ], DisposableComponentRemoved);
    return DisposableComponentRemoved;
}());
export { DisposableComponentRemoved };
/**
 * @public
 */
var DisposableComponentUpdated = /** @class */ (function () {
    function DisposableComponentUpdated(componentId, component) {
        this.componentId = componentId;
        this.component = component;
        // stub
    }
    DisposableComponentUpdated = __decorate([
        EventConstructor(),
        __metadata("design:paramtypes", [String, Object])
    ], DisposableComponentUpdated);
    return DisposableComponentUpdated;
}());
export { DisposableComponentUpdated };
/**
 * @public
 */
export function Component(componentName, classId) {
    return function (target) {
        if (target.isComponent) {
            throw new TypeError("You cannot extend a component. Trying to extend " + target.originalClassName + " with: " + componentName);
        }
        var extendedClass = target;
        var RegisteredComponent = function RegisteredComponent() {
            // eslint-disable-next-line prefer-rest-params
            var args = Array.prototype.slice.call(arguments);
            var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args), false)))();
            Object.defineProperty(ret, componentSymbol, {
                enumerable: false,
                writable: false,
                configurable: false,
                value: componentName
            });
            if (classId !== undefined) {
                Object.defineProperty(ret, componentClassIdSymbol, {
                    enumerable: false,
                    writable: false,
                    configurable: false,
                    value: classId
                });
            }
            return ret;
        };
        if (classId !== undefined) {
            RegisteredComponent[componentClassIdSymbol] = classId;
        }
        RegisteredComponent[componentSymbol] = componentName;
        RegisteredComponent.isComponent = true;
        RegisteredComponent.originalClassName = componentName;
        RegisteredComponent.prototype = target.prototype;
        RegisteredComponent.prototype.constructor = target;
        return RegisteredComponent;
    };
}
/**
 * @public
 */
export function DisposableComponent(componentName, classId) {
    return function (target) {
        if (target.isComponent) {
            throw new TypeError("You cannot extend a component. Trying to extend " + target.originalClassName + " with: " + componentName);
        }
        if (typeof classId !== 'number' || isNaN(classId)) {
            throw new Error("classId: " + classId + " is an invalid integer");
        }
        var extendedClass = target;
        var RegisteredComponent = function RegisteredComponent() {
            if (!DisposableComponent.engine) {
                throw new Error('You need to set a DisposableComponent.engine before creating disposable components');
            }
            // eslint-disable-next-line prefer-rest-params
            var args = Array.prototype.slice.call(arguments);
            var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args), false)))();
            var id = newId('C');
            Object.defineProperty(ret, componentSymbol, {
                enumerable: false,
                writable: false,
                configurable: false,
                value: componentName
            });
            Object.defineProperty(ret, componentIdSymbol, {
                enumerable: false,
                writable: false,
                configurable: false,
                value: id
            });
            if (classId !== undefined) {
                Object.defineProperty(ret, componentClassIdSymbol, {
                    enumerable: false,
                    writable: false,
                    configurable: false,
                    value: classId
                });
            }
            if (DisposableComponent.engine) {
                DisposableComponent.engine.registerComponent(ret);
            }
            return ret;
        };
        if (classId !== undefined) {
            RegisteredComponent[componentClassIdSymbol] = classId;
        }
        RegisteredComponent[componentSymbol] = componentName;
        RegisteredComponent.isComponent = true;
        RegisteredComponent.isDisposableComponent = true;
        RegisteredComponent.originalClassName = componentName;
        RegisteredComponent.prototype = target.prototype;
        RegisteredComponent.prototype.constructor = target;
        return RegisteredComponent;
    };
}
/** @internal */
(function (DisposableComponent) {
    /** @internal */
    // eslint-disable-next-line prefer-const
    DisposableComponent.engine = null;
})(DisposableComponent || (DisposableComponent = {}));
/**
 * @public
 */
export function getComponentName(component) {
    if (!component) {
        throw new TypeError(component + ' is not a component.');
    }
    if (component[componentSymbol]) {
        return component[componentSymbol];
    }
    throw new TypeError(component + ' is not a registered component.');
}
/**
 * @public
 */
export function getComponentClassId(component) {
    if (!component) {
        throw new TypeError(component + ' is not a component.');
    }
    if (component[componentClassIdSymbol]) {
        return component[componentClassIdSymbol];
    }
    if (!component[componentSymbol]) {
        throw new TypeError(component + ' is not a registered component.');
    }
    return null;
}
/**
 * @public
 */
export function getComponentId(component) {
    if (!component) {
        throw new TypeError(component + ' is not a component.');
    }
    if (component[componentIdSymbol]) {
        return component[componentIdSymbol];
    }
    throw new TypeError(component + ' is not a registered disposable component.');
}
/**
 * @public
 */
var ObservableComponent = /** @class */ (function () {
    function ObservableComponent() {
        // @internal
        this.dirty = false;
        // @internal
        this.data = {};
        this.subscriptions = [];
    }
    ObservableComponent.component = function (target, propertyKey) {
        if (delete target[propertyKey]) {
            var componentSymbol_1 = propertyKey + '_' + Math.random();
            target[componentSymbol_1] = undefined;
            Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));
            Object.defineProperty(target, propertyKey.toString(), {
                get: function () {
                    return this[componentSymbol_1];
                },
                set: function (value) {
                    var oldValue = this[componentSymbol_1];
                    if (value) {
                        this.data[propertyKey] = getComponentId(value);
                    }
                    else {
                        this.data[propertyKey] = null;
                    }
                    this[componentSymbol_1] = value;
                    if (value !== oldValue) {
                        this.dirty = true;
                        for (var i = 0; i < this.subscriptions.length; i++) {
                            this.subscriptions[i](propertyKey, value, oldValue);
                        }
                    }
                },
                enumerable: true
            });
        }
    };
    ObservableComponent.field = function (target, propertyKey) {
        if (delete target[propertyKey]) {
            Object.defineProperty(target, propertyKey.toString(), {
                get: function () {
                    return this.data[propertyKey];
                },
                set: function (value) {
                    var oldValue = this.data[propertyKey];
                    this.data[propertyKey] = value;
                    if (value !== oldValue) {
                        this.dirty = true;
                        for (var i = 0; i < this.subscriptions.length; i++) {
                            this.subscriptions[i](propertyKey, value, oldValue);
                        }
                    }
                },
                enumerable: true
            });
        }
    };
    ObservableComponent.uiValue = function (target, propertyKey) {
        if (delete target[propertyKey]) {
            Object.defineProperty(target, propertyKey.toString(), {
                get: function () {
                    return this.data[propertyKey].toString();
                },
                set: function (value) {
                    var oldValue = this.data[propertyKey];
                    var finalValue = new UIValue(value);
                    this.data[propertyKey] = finalValue;
                    if (finalValue !== oldValue) {
                        this.dirty = true;
                        for (var i = 0; i < this.subscriptions.length; i++) {
                            this.subscriptions[i](propertyKey, finalValue, oldValue);
                        }
                    }
                },
                enumerable: true
            });
        }
    };
    ObservableComponent.readonly = function (target, propertyKey) {
        if (delete target[propertyKey]) {
            Object.defineProperty(target, propertyKey.toString(), {
                get: function () {
                    if (propertyKey in this.data === false) {
                        throw new Error("The field " + propertyKey + " is uninitialized");
                    }
                    return this.data[propertyKey];
                },
                set: function (value) {
                    if (propertyKey in this.data) {
                        throw new Error("The field " + propertyKey + " is readonly");
                    }
                    this.data[propertyKey] = value;
                    this.dirty = true;
                },
                enumerable: true,
                configurable: false
            });
        }
    };
    ObservableComponent.prototype.onChange = function (fn) {
        this.subscriptions.push(fn);
        return this;
    };
    ObservableComponent.prototype.toJSON = function () {
        return this.data;
    };
    return ObservableComponent;
}());
export { ObservableComponent };
/**
 * @public
 */
export function isDisposableComponent(component) {
    return componentIdSymbol in component;
}
//# sourceMappingURL=data:application/json;base64,