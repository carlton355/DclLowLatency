import { getComponentName, getComponentClassId } from './Component';
import { ComponentAdded, ComponentRemoved, ParentChanged } from './IEntity';
import { newId, log } from './helpers';
/**
 * @public
 */
var Entity = /** @class */ (function () {
    function Entity(name) {
        this.name = name;
        this.children = {};
        this.eventManager = null;
        this.alive = false;
        this.uuid = newId('E');
        this.components = {};
        // @internal
        this.engine = null;
        // @internal
        this._parent = null;
        // stub
    }
    /**
     * Adds or replaces a component in the entity.
     * @param component - component instance.
     */
    Entity.prototype.addComponentOrReplace = function (component) {
        if (typeof component === 'function') {
            throw new Error('You passed a function or class as a component, an instance of component is expected');
        }
        if (typeof component !== 'object') {
            throw new Error("You passed a " + typeof component + ", an instance of component is expected");
        }
        var componentName = getComponentName(component);
        if (this.components[componentName]) {
            if (this.components[componentName] === component) {
                return component;
            }
            this.removeComponent(this.components[componentName], false);
        }
        return this.addComponent(component);
    };
    Entity.prototype.hasComponent = function (component) {
        var typeOfComponent = typeof component;
        if (typeOfComponent !== 'string' &&
            typeOfComponent !== 'object' &&
            typeOfComponent !== 'function') {
            throw new Error('Entity#has(component): component is not a class, name or instance');
        }
        if (component === null)
            return false;
        var componentName = typeOfComponent === 'string'
            ? component
            : getComponentName(component);
        var storedComponent = this.components[componentName];
        if (!storedComponent) {
            return false;
        }
        if (typeOfComponent === 'object') {
            return storedComponent === component;
        }
        if (typeOfComponent === 'function') {
            return storedComponent instanceof component;
        }
        return true;
    };
    Entity.prototype.getComponent = function (component) {
        var typeOfComponent = typeof component;
        if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {
            throw new Error('Entity#get(component): component is not a class or name');
        }
        var componentName = typeOfComponent === 'string'
            ? component
            : getComponentName(component);
        var storedComponent = this.components[componentName];
        if (!storedComponent) {
            throw new Error("Can not get component \"" + componentName + "\" from entity \"" + this.identifier + "\"");
        }
        if (typeOfComponent === 'function') {
            if (storedComponent instanceof component) {
                return storedComponent;
            }
            else {
                throw new Error("Can not get component \"" + componentName + "\" from entity \"" + this.identifier + "\" (by instance)");
            }
        }
        return storedComponent;
    };
    Entity.prototype.getComponentOrNull = function (component) {
        var typeOfComponent = typeof component;
        if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {
            throw new Error('Entity#getOrNull(component): component is not a class or name');
        }
        var componentName = typeOfComponent === 'string'
            ? component
            : getComponentName(component);
        var storedComponent = this.components[componentName];
        if (!storedComponent) {
            return null;
        }
        if (typeOfComponent === 'function') {
            if (storedComponent instanceof component) {
                return storedComponent;
            }
            else {
                return null;
            }
        }
        return storedComponent;
    };
    /**
     * Gets a component, if it doesn't exist, it creates the component and returns it.
     * @param component - component class
     */
    Entity.prototype.getComponentOrCreate = function (component) {
        if (typeof component !== 'function') {
            throw new Error('Entity#getOrCreate(component): component is not a class');
        }
        var ret = this.getComponentOrNull(component);
        if (!ret) {
            ret = new component();
            // Safe-guard to only add registered components to entities
            getComponentName(ret);
            this.addComponentOrReplace(ret);
        }
        return ret;
    };
    /**
     * Adds a component. If the component already exist, it throws an Error.
     * @param component - component instance.
     */
    Entity.prototype.addComponent = function (component) {
        if (typeof component !== 'object') {
            throw new Error('Entity#add(component): You passed a function or class as a component, an instance of component is expected');
        }
        var componentName = getComponentName(component);
        var classId = getComponentClassId(component);
        if (this.components[componentName]) {
            throw new Error("A component of type \"" + componentName + "\" is already present in entity \"" + this.identifier + "\"");
        }
        this.components[componentName] = component;
        if (this.eventManager) {
            this.eventManager.fireEvent(new ComponentAdded(this, componentName, classId));
        }
        var storedComponent = component;
        if (typeof storedComponent.addedToEntity === 'function') {
            storedComponent.addedToEntity(this);
        }
        return component;
    };
    Entity.prototype.removeComponent = function (
    // eslint-disable-next-line @typescript-eslint/ban-types
    component, triggerRemovedEvent) {
        if (triggerRemovedEvent === void 0) { triggerRemovedEvent = true; }
        var typeOfComponent = typeof component;
        if (typeOfComponent !== 'string' &&
            typeOfComponent !== 'function' &&
            typeOfComponent !== 'object') {
            throw new Error('Entity#remove(component): component is not a class, class or name');
        }
        var componentName = typeOfComponent === 'string'
            ? component
            : getComponentName(component);
        var storedComponent = this.components[componentName];
        if (!storedComponent) {
            log("Entity Warning: Trying to remove inexisting component \"" + componentName + "\" from entity \"" + this.identifier + "\"");
            return;
        }
        if (typeOfComponent === 'function') {
            if (storedComponent instanceof component) {
                delete this.components[componentName];
                if (storedComponent) {
                    if (triggerRemovedEvent && this.eventManager) {
                        this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));
                    }
                    if (typeof storedComponent.removedFromEntity === 'function') {
                        storedComponent.removedFromEntity(this);
                    }
                }
                return;
            }
            else {
                log("Entity Warning: Trying to remove wrong (by constructor) component \"" + componentName + "\" from entity \"" + this.identifier + "\"");
                return;
            }
        }
        delete this.components[componentName];
        if (storedComponent) {
            if (triggerRemovedEvent && this.eventManager) {
                this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));
            }
            if (typeof storedComponent.removedFromEntity === 'function') {
                storedComponent.removedFromEntity(this);
            }
        }
        return;
    };
    /**
     * Returns true if the entity is already added to the engine.
     * Returns false if no engine was defined.
     */
    Entity.prototype.isAddedToEngine = function () {
        if (this.engine &&
            (this.uuid in this.engine.entities || this.engine.rootEntity === this)) {
            return true;
        }
        return false;
    };
    /**
     * Sets the parent entity
     */
    Entity.prototype.setParent = function (_parent) {
        var newParent;
        // Check if parent is of type Attachable
        if (_parent && 'getEntityRepresentation' in _parent) {
            if (!this.engine) {
                throw new Error("In order to set an attachable as parent, you first need to add the entity to the engine.");
            }
            newParent = _parent.getEntityRepresentation(this.engine);
        }
        else {
            newParent = !_parent && this.engine ? this.engine.rootEntity : _parent;
        }
        var currentParent = this.getParent();
        if (newParent === this) {
            throw new Error("Failed to set parent for entity \"" + this.identifier + "\": An entity can't set itself as a its own parent");
        }
        if (newParent === currentParent) {
            return this;
        }
        var circularAncestor = this.getCircularAncestor(newParent);
        if (circularAncestor) {
            throw new Error("Failed to set parent for entity \"" + this.identifier + "\": Circular parent references are not allowed (See entity \"" + circularAncestor + "\")");
        }
        if (currentParent) {
            delete currentParent.children[this.uuid];
        }
        // Make sure that the parent and child are both on the engine, or off the engine, together
        if (newParent !== null && newParent.uuid !== '0') {
            if (!newParent.isAddedToEngine() && this.isAddedToEngine()) {
                this.engine.removeEntity(this);
            }
            if (newParent.isAddedToEngine() && !this.isAddedToEngine()) {
                ;
                newParent.engine.addEntity(this);
            }
        }
        this._parent = newParent || null;
        this.registerAsChild();
        if (this.eventManager && this.engine) {
            this.eventManager.fireEvent(new ParentChanged(this, newParent));
        }
        return this;
    };
    /**
     * Gets the parent entity
     */
    Entity.prototype.getParent = function () {
        return this._parent;
    };
    Object.defineProperty(Entity.prototype, "identifier", {
        get: function () {
            return this.name || this.uuid;
        },
        enumerable: false,
        configurable: true
    });
    Entity.prototype.getCircularAncestor = function (ent) {
        var root = this.engine ? this.engine.rootEntity : null;
        var e = ent;
        while (e && e !== root) {
            var parent = e.getParent();
            if (parent === this) {
                return e.uuid;
            }
            e = parent;
        }
        return null;
    };
    Entity.prototype.registerAsChild = function () {
        var parent = this.getParent();
        if (this.uuid && parent) {
            parent.children[this.uuid] = this;
        }
    };
    return Entity;
}());
export { Entity };
//# sourceMappingURL=data:application/json;base64,