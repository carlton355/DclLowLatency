import { error, newId } from './helpers';
var eventNameSymbol = '__event_name__';
var takenEventNames = [];
function getEventNameFromConstructor(ctor) {
    if (!(eventNameSymbol in ctor) || typeof ctor[eventNameSymbol] !== 'string') {
        throw new Error('The EventConstructor is not registered');
    }
    return ctor[eventNameSymbol];
}
/**
 * @public
 */
var EventManager = /** @class */ (function () {
    function EventManager() {
        this.listeners = {};
    }
    EventManager.prototype.addListener = function (eventClass, listener, listenerFunction) {
        if (!eventClass || typeof eventClass !== 'function') {
            throw new Error('Invalid EventConstructor');
        }
        var eventName = getEventNameFromConstructor(eventClass);
        var listeners = this.listeners[eventName];
        if (!listeners) {
            listeners = this.listeners[eventName] = [];
        }
        for (var i = 0; i < listeners.length; i++) {
            var x = listeners[i];
            if (x.listener === listener) {
                throw new Error('The provided listener is already registered');
            }
        }
        listeners.push({
            listener: listener,
            fn: listenerFunction
        });
        return this;
    };
    EventManager.prototype.removeListener = function (listener, eventClass) {
        if (!eventClass || typeof eventClass !== 'function') {
            throw new Error('Invalid EventConstructor');
        }
        var eventName = getEventNameFromConstructor(eventClass);
        var listeners = this.listeners[eventName];
        if (!listeners) {
            return false;
        }
        for (var i = 0; i < listeners.length; i++) {
            var x = listeners[i];
            if (x.listener === listener) {
                listeners.splice(i, 1);
                return true;
            }
        }
        return false;
    };
    EventManager.prototype.fireEvent = function (event) {
        var eventName = getEventNameFromConstructor(event.constructor);
        var listeners = this.listeners[eventName];
        if (listeners) {
            for (var i = 0; i < listeners.length; i++) {
                try {
                    var l = listeners[i];
                    l.fn.call(l.listener, event);
                }
                catch (e) {
                    // TODO: e may not be an instance of Error
                    error(e);
                }
            }
        }
        return this;
    };
    return EventManager;
}());
export { EventManager };
/**
 * @public
 */
export function EventConstructor() {
    var eventName = newId('EV');
    if (takenEventNames.indexOf(eventName) !== -1) {
        throw new Error("The event name " + eventName + " is already taken");
    }
    takenEventNames.push(eventName);
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        ;
        target[eventNameSymbol] = eventName;
        return target;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Vjcy9FdmVudE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFeEMsSUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUE7QUFXeEMsSUFBTSxlQUFlLEdBQWEsRUFBRSxDQUFBO0FBRXBDLFNBQVMsMkJBQTJCLENBQUksSUFBMEI7SUFDaEUsSUFBSSxDQUFDLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUMzRSxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUE7S0FDMUQ7SUFDRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQWtCLENBQUE7QUFDL0MsQ0FBQztBQU9EOztHQUVHO0FBQ0g7SUFBQTtRQUNVLGNBQVMsR0FBOEMsRUFBRSxDQUFBO0lBNEVuRSxDQUFDO0lBMUVDLGtDQUFXLEdBQVgsVUFDRSxVQUFnQyxFQUNoQyxRQUFXLEVBQ1gsZ0JBQTZDO1FBRTdDLElBQUksQ0FBQyxVQUFVLElBQUksT0FBUSxVQUFrQixLQUFLLFVBQVUsRUFBRTtZQUM1RCxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUE7U0FDNUM7UUFDRCxJQUFNLFNBQVMsR0FBRywyQkFBMkIsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUV6RCxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRXpDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUE7U0FDM0M7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FB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ZnJvbSAnLi9oZWxwZXJzJ1xuXG5jb25zdCBldmVudE5hbWVTeW1ib2wgPSAnX19ldmVudF9uYW1lX18nXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIElFdmVudENvbnN0cnVjdG9yPFQ+IHtcbiAgLy8gQGludGVybmFsXG4gIFtldmVudE5hbWVTeW1ib2xdPzogc3RyaW5nXG4gIG5ldyAoLi4uYXJnczogYW55W10pOiBUXG59XG5cbmNvbnN0IHRha2VuRXZlbnROYW1lczogc3RyaW5nW10gPSBbXVxuXG5mdW5jdGlvbiBnZXRFdmVudE5hbWVGcm9tQ29uc3RydWN0b3I8VD4oY3RvcjogSUV2ZW50Q29uc3RydWN0b3I8VD4pOiBzdHJpbmcge1xuICBpZiAoIShldmVudE5hbWVTeW1ib2wgaW4gY3RvcikgfHwgdHlwZW9mIGN0b3JbZXZlbnROYW1lU3ltYm9sXSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBFdmVudENvbnN0cnVjdG9yIGlzIG5vdCByZWdpc3RlcmVkJylcbiAgfVxuICByZXR1cm4gY3RvcltldmVudE5hbWVTeW1ib2xdIGFzIGFueSBhcyBzdHJpbmdcbn1cblxudHlwZSBFdmVudExpc3RlbmVyPFg+ID0ge1xuICBsaXN0ZW5lcjogWFxuICBmbjogKHRoaXM6IFgsIGV2ZW50OiBhbnkpID0+IHZvaWRcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudE1hbmFnZXIge1xuICBwcml2YXRlIGxpc3RlbmVyczogUmVjb3JkPHN0cmluZywgQXJyYXk8RXZlbnRMaXN0ZW5lcjxhbnk+Pj4gPSB7fVxuXG4gIGFkZExpc3RlbmVyPFQsIFg+KFxuICAgIGV2ZW50Q2xhc3M6IElFdmVudENvbnN0cnVjdG9yPFQ+LFxuICAgIGxpc3RlbmVyOiBYLFxuICAgIGxpc3RlbmVyRnVuY3Rpb246ICh0aGlzOiBYLCBldmVudDogVCkgPT4gdm9pZFxuICApIHtcbiAgICBpZiAoIWV2ZW50Q2xhc3MgfHwgdHlwZW9mIChldmVudENsYXNzIGFzIGFueSkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBFdmVudENvbnN0cnVjdG9yJylcbiAgICB9XG4gICAgY29uc3QgZXZlbnROYW1lID0gZ2V0RXZlbnROYW1lRnJvbUNvbnN0cnVjdG9yKGV2ZW50Q2xhc3MpXG5cbiAgICBsZXQgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXVxuXG4gICAgaWYgKCFsaXN0ZW5lcnMpIHtcbiAgICAgIGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0gPSBbXVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB4ID0gbGlzdGVuZXJzW2ldXG4gICAgICBpZiAoeC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgbGlzdGVuZXIgaXMgYWxyZWFkeSByZWdpc3RlcmVkJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaCh7XG4gICAgICBsaXN0ZW5lcixcbiAgICAgIGZuOiBsaXN0ZW5lckZ1bmN0aW9uXG4gICAgfSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICByZW1vdmVMaXN0ZW5lcjxYPihsaXN0ZW5lcjogWCwgZXZlbnRDbGFzczogSUV2ZW50Q29uc3RydWN0b3I8YW55Pik6IGJvb2xlYW4ge1xuICAgIGlmICghZXZlbnRDbGFzcyB8fCB0eXBlb2YgKGV2ZW50Q2xhc3MgYXMgYW55KSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEV2ZW50Q29uc3RydWN0b3InKVxuICAgIH1cblxuICAgIGNvbnN0IGV2ZW50TmFtZSA9IGdldEV2ZW50TmFtZUZyb21Db25zdHJ1Y3RvcihldmVudENsYXNzKVxuXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXVxuXG4gICAgaWYgKCFsaXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB4ID0gbGlzdGVuZXJzW2ldXG4gICAgICBpZiAoeC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZmlyZUV2ZW50PFQgZXh0ZW5kcyBvYmplY3Q+KGV2ZW50OiBUKSB7XG4gICAgY29uc3QgZXZlbnROYW1lID0gZ2V0RXZlbnROYW1lRnJvbUNvbnN0cnVjdG9yKChldmVudCBhcyBhbnkpLmNvbnN0cnVjdG9yKVxuXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXVxuXG4gICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBsID0gbGlzdGVuZXJzW2ldXG4gICAgICAgICAgbC5mbi5jYWxsKGwubGlzdGVuZXIsIGV2ZW50KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gVE9ETzogZSBtYXkgbm90IGJlIGFuIGluc3RhbmNlIG9mIEVycm9yXG4gICAgICAgICAgZXJyb3IoZSBhcyBhbnkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gRXZlbnRDb25zdHJ1Y3RvcigpOiBDbGFzc0RlY29yYXRvciB7XG4gIGNvbnN0IGV2ZW50TmFtZSA9IG5ld0lkKCdFVicpXG5cbiAgaWYgKHRha2VuRXZlbnROYW1lcy5pbmRleE9mKGV2ZW50TmFtZSkgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZXZlbnQgbmFtZSAke2V2ZW50TmFtZX0gaXMgYWxyZWFkeSB0YWtlbmApXG4gIH1cblxuICB0YWtlbkV2ZW50TmFtZXMucHVzaChldmVudE5hbWUpXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgcmV0dXJuIDxURnVuY3Rpb24gZXh0ZW5kcyBGdW5jdGlvbj4odGFyZ2V0OiBURnVuY3Rpb24pOiBURnVuY3Rpb24gfCB2b2lkID0+IHtcbiAgICA7KHRhcmdldCBhcyBhbnkpW2V2ZW50TmFtZVN5bWJvbF0gPSBldmVudE5hbWVcbiAgICByZXR1cm4gdGFyZ2V0XG4gIH1cbn1cbiJdfQ==