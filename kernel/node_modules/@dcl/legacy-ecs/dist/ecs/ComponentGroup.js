import { getComponentName } from './Component';
/**
 * @public
 */
var ComponentGroup = /** @class */ (function () {
    function ComponentGroup() {
        var requires = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            requires[_i] = arguments[_i];
        }
        this.entities = [];
        this.active = false;
        this._requiresNames = [];
        // validate requires list
        if (!requires) {
            throw new Error('ComponentGroup: Could not load the requires list');
        }
        if (!(requires instanceof Array)) {
            throw new Error('ComponentGroup: requires list is not an Array');
        }
        Object.defineProperty(this, 'requires', {
            get: function () {
                return requires.slice();
            }
        });
        Object.defineProperty(this, 'requiresNames', {
            get: function () {
                return this._requiresNames.slice();
            }
        });
        var _loop_1 = function (ix) {
            var component = requires[ix];
            var name = null;
            if (!component) {
                throw new Error("ComponentGroup: the required component at location " + ix + " is invalid");
            }
            try {
                name = getComponentName(component);
            }
            catch (e) {
                throw new Error("ComponentGroup: the required component at location " + ix + " is not registered as a @Component. Remember to provide the class of the component, not the name");
            }
            if (this_1._requiresNames.some(function ($) { return $ === name; })) {
                throw new Error("ComponentGroup: the required component list has a repeated name " + name);
            }
            this_1._requiresNames.push(name);
        };
        var this_1 = this;
        for (var ix = 0; ix < requires.length; ix++) {
            _loop_1(ix);
        }
    }
    ComponentGroup.prototype.hasEntity = function (entity) {
        if (!entity.isAddedToEngine())
            return false;
        return this.entities.indexOf(entity) !== -1;
    };
    // @internal
    ComponentGroup.prototype.addEntity = function (entity) {
        if (!entity.isAddedToEngine()) {
            throw new TypeError('ComponentGroup: Cannot add a entity that is not added to the engine');
        }
        if (this.entities.indexOf(entity) === -1) {
            ;
            this.entities.push(entity);
        }
    };
    // @internal
    ComponentGroup.prototype.removeEntity = function (entity) {
        var id = this.entities.indexOf(entity);
        if (id !== -1) {
            ;
            this.entities.splice(id, 1);
        }
    };
    // @internal
    ComponentGroup.prototype.componentRemoved = function (entity, component) {
        if (this._requiresNames.indexOf(component) !== -1) {
            this.removeEntity(entity);
        }
    };
    // @internal
    ComponentGroup.prototype.meetsRequirements = function (entity) {
        for (var i = 0; i < this._requiresNames.length; i++) {
            var componentName = this._requiresNames[i];
            if (!(componentName in entity.components)) {
                return false;
            }
        }
        return true;
    };
    return ComponentGroup;
}());
export { ComponentGroup };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50R3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWNzL0NvbXBvbmVudEdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBd0IsTUFBTSxhQUFhLENBQUE7QUFHcEU7O0dBRUc7QUFDSDtJQVNFO1FBQVksa0JBQXdDO2FBQXhDLFVBQXdDLEVBQXhDLHFCQUF3QyxFQUF4QyxJQUF3QztZQUF4Qyw2QkFBd0M7O1FBUjNDLGFBQVEsR0FBMkIsRUFBRSxDQUFBO1FBSTlDLFdBQU0sR0FBWSxLQUFLLENBQUE7UUFFZixtQkFBYyxHQUFhLEVBQUUsQ0FBQTtRQUduQyx5QkFBeUI7UUFDekIsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQTtTQUNwRTtRQUNELElBQUksQ0FBQyxDQUFDLFFBQVEsWUFBWSxLQUFLLENBQUMsRUFBRTtZQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUE7U0FDakU7UUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDdEMsR0FBRyxFQUFFO2dCQUNILE9BQU8sUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFBO1lBQ3pCLENBQUM7U0FDRixDQUFDLENBQUE7UUFFRixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDM0MsR0FBRyxFQUFFO2dCQUNILE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUNwQyxDQUFDO1NBQ0YsQ0FBQyxDQUFBO2dDQUVPLEVBQUU7WUFDVCxJQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDOUIsSUFBSSxJQUFJLEdBQWtCLElBQUksQ0FBQTtZQUU5QixJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNkLE1BQU0sSUFBSSxLQUFLLENBQ2Isd0RBQXNELEVBQUUsZ0JBQWEsQ0FDdEUsQ0FBQTthQUNGO1lBRUQsSUFBSTtnQkFDRixJQUFJLEdBQUcsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUE7YUFDbkM7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixNQUFNLElBQUksS0FBSyxDQUNiLHdEQUFzRCxFQUFFLHFHQUFrRyxDQUMzSixDQUFBO2FBQ0Y7WUFFRCxJQUFJLE9BQUssY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsS0FBSyxJQUFJLEVBQVYsQ0FBVSxDQUFDLEVBQUU7Z0JBQy9DLE1BQU0sSUFBSSxLQUFLLENBQ2IscUVBQW1FLElBQU0sQ0FDMUUsQ0FBQTthQUNGO1lBRUQsT0FBSyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBOzs7UUF4QmhDLEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRTtvQkFBbEMsRUFBRTtTQXlCVjtJQUNILENBQUM7SUFFRCxrQ0FBUyxHQUFULFVBQVUsTUFBZTtRQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRTtZQUFFLE9BQU8sS0FBSyxDQUFBO1FBRTNDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUVELFlBQVk7SUFDWixrQ0FBUyxHQUFULFVBQVUsTUFBZTtRQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFO1lBQzdCLE1BQU0sSUFBSSxTQUFTLENBQ2pCLHFFQUFxRSxDQUN0RSxDQUFBO1NBQ0Y7UUFFRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3hDLENBQUM7WUFBQyxJQUFJLENBQUMsUUFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDM0M7SUFDSCxDQUFDO0lBRUQsWUFBWTtJQUNaLHFDQUFZLEdBQVosVUFBYSxNQUFlO1FBQzFCLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRXhDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2IsQ0FBQztZQUFDLElBQUksQ0FBQyxRQUFzQixDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7U0FDNUM7SUFDSCxDQUFDO0lBRUQsWUFBWTtJQUNaLHlDQUFnQixHQUFoQixVQUFpQixNQUFlLEVBQUUsU0FBaUI7UUFDakQsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNqRCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQzFCO0lBQ0gsQ0FBQztJQUVELFlBQVk7SUFDWiwwQ0FBaUIsR0FBakIsVUFBa0IsTUFBZTtRQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkQsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUM1QyxJQUFJLENBQUMsQ0FBQyxhQUFhLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUN6QyxPQUFPLEtBQUssQ0FBQTthQUNiO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFDSCxxQkFBQztBQUFELENBQUMsQUF2R0QsSUF1R0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDb21wb25lbnROYW1lLCBDb21wb25lbnRDb25zdHJ1Y3RvciB9IGZyb20gJy4vQ29tcG9uZW50J1xuaW1wb3J0IHsgSUVudGl0eSB9IGZyb20gJy4vSUVudGl0eSdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRHcm91cCB7XG4gIHJlYWRvbmx5IGVudGl0aWVzOiBSZWFkb25seUFycmF5PElFbnRpdHk+ID0gW11cbiAgcmVhZG9ubHkgcmVxdWlyZXMhOiBSZWFkb25seUFycmF5PENvbXBvbmVudENvbnN0cnVjdG9yPGFueT4+XG4gIHJlYWRvbmx5IHJlcXVpcmVzTmFtZXMhOiBSZWFkb25seUFycmF5PHN0cmluZz5cblxuICBhY3RpdmU6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIHByaXZhdGUgX3JlcXVpcmVzTmFtZXM6IHN0cmluZ1tdID0gW11cblxuICBjb25zdHJ1Y3RvciguLi5yZXF1aXJlczogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PltdKSB7XG4gICAgLy8gdmFsaWRhdGUgcmVxdWlyZXMgbGlzdFxuICAgIGlmICghcmVxdWlyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50R3JvdXA6IENvdWxkIG5vdCBsb2FkIHRoZSByZXF1aXJlcyBsaXN0JylcbiAgICB9XG4gICAgaWYgKCEocmVxdWlyZXMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50R3JvdXA6IHJlcXVpcmVzIGxpc3QgaXMgbm90IGFuIEFycmF5JylcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JlcXVpcmVzJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlcy5zbGljZSgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncmVxdWlyZXNOYW1lcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWlyZXNOYW1lcy5zbGljZSgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGZvciAobGV0IGl4ID0gMDsgaXggPCByZXF1aXJlcy5sZW5ndGg7IGl4KyspIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHJlcXVpcmVzW2l4XVxuICAgICAgbGV0IG5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsXG5cbiAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ29tcG9uZW50R3JvdXA6IHRoZSByZXF1aXJlZCBjb21wb25lbnQgYXQgbG9jYXRpb24gJHtpeH0gaXMgaW52YWxpZGBcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnQpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ29tcG9uZW50R3JvdXA6IHRoZSByZXF1aXJlZCBjb21wb25lbnQgYXQgbG9jYXRpb24gJHtpeH0gaXMgbm90IHJlZ2lzdGVyZWQgYXMgYSBAQ29tcG9uZW50LiBSZW1lbWJlciB0byBwcm92aWRlIHRoZSBjbGFzcyBvZiB0aGUgY29tcG9uZW50LCBub3QgdGhlIG5hbWVgXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcXVpcmVzTmFtZXMuc29tZSgoJCkgPT4gJCA9PT0gbmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDb21wb25lbnRHcm91cDogdGhlIHJlcXVpcmVkIGNvbXBvbmVudCBsaXN0IGhhcyBhIHJlcGVhdGVkIG5hbWUgJHtuYW1lfWBcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXF1aXJlc05hbWVzLnB1c2gobmFtZSlcbiAgICB9XG4gIH1cblxuICBoYXNFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogYm9vbGVhbiB7XG4gICAgaWYgKCFlbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHJldHVybiBmYWxzZVxuXG4gICAgcmV0dXJuIHRoaXMuZW50aXRpZXMuaW5kZXhPZihlbnRpdHkpICE9PSAtMVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGFkZEVudGl0eShlbnRpdHk6IElFbnRpdHkpIHtcbiAgICBpZiAoIWVudGl0eS5pc0FkZGVkVG9FbmdpbmUoKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0NvbXBvbmVudEdyb3VwOiBDYW5ub3QgYWRkIGEgZW50aXR5IHRoYXQgaXMgbm90IGFkZGVkIHRvIHRoZSBlbmdpbmUnXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZW50aXRpZXMuaW5kZXhPZihlbnRpdHkpID09PSAtMSkge1xuICAgICAgOyh0aGlzLmVudGl0aWVzIGFzIElFbnRpdHlbXSkucHVzaChlbnRpdHkpXG4gICAgfVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIHJlbW92ZUVudGl0eShlbnRpdHk6IElFbnRpdHkpIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuZW50aXRpZXMuaW5kZXhPZihlbnRpdHkpXG5cbiAgICBpZiAoaWQgIT09IC0xKSB7XG4gICAgICA7KHRoaXMuZW50aXRpZXMgYXMgSUVudGl0eVtdKS5zcGxpY2UoaWQsIDEpXG4gICAgfVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGNvbXBvbmVudFJlbW92ZWQoZW50aXR5OiBJRW50aXR5LCBjb21wb25lbnQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9yZXF1aXJlc05hbWVzLmluZGV4T2YoY29tcG9uZW50KSAhPT0gLTEpIHtcbiAgICAgIHRoaXMucmVtb3ZlRW50aXR5KGVudGl0eSlcbiAgICB9XG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgbWVldHNSZXF1aXJlbWVudHMoZW50aXR5OiBJRW50aXR5KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9yZXF1aXJlc05hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjb21wb25lbnROYW1lID0gdGhpcy5fcmVxdWlyZXNOYW1lc1tpXVxuICAgICAgaWYgKCEoY29tcG9uZW50TmFtZSBpbiBlbnRpdHkuY29tcG9uZW50cykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cbiJdfQ==