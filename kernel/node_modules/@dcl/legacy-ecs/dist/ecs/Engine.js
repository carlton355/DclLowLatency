var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { ComponentAdded, ComponentRemoved } from './IEntity';
import { getComponentName, getComponentId, DisposableComponentUpdated, DisposableComponentCreated, DisposableComponentRemoved, getComponentClassId } from './Component';
import { EventManager } from './EventManager';
import { ComponentGroup } from './ComponentGroup';
import { log, error } from './helpers';
import { Entity } from './Entity';
/**
 * @public
 */
var Engine = /** @class */ (function () {
    function Engine(rootEntity) {
        this.eventManager = new EventManager();
        // @internal
        this.systems = [];
        // @internal
        this.entityLists = {};
        // @internal
        this.addedSystems = [];
        this._entities = {};
        this._disposableComponents = {};
        this._componentGroups = {};
        // systems that doesn't require any component or handle their own logic
        this.simpleSystems = [];
        this.eventManager.addListener(ComponentAdded, this, this.componentAddedHandler);
        this.eventManager.addListener(ComponentRemoved, this, this.componentRemovedHandler);
        this.rootEntity = rootEntity;
        this.firstPersonCameraEntity = new Entity();
        this.firstPersonCameraEntity.uuid =
            'FirstPersonCameraEntityReference';
        this.addEntity(this.firstPersonCameraEntity);
        this.avatarEntity = new Entity();
        this.avatarEntity.uuid = 'AvatarEntityReference';
        this.addEntity(this.avatarEntity);
    }
    Object.defineProperty(Engine.prototype, "entities", {
        get: function () {
            return this._entities;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Engine.prototype, "disposableComponents", {
        get: function () {
            return this._disposableComponents;
        },
        enumerable: false,
        configurable: true
    });
    Engine.prototype.addEntity = function (entity) {
        var parent = entity.getParent();
        if (entity.isAddedToEngine()) {
            return entity;
        }
        entity.eventManager = this.eventManager;
        entity.engine = this;
        this._entities[entity.uuid] = entity;
        this.checkRequirementsAndAdd(entity);
        if (!parent) {
            entity.setParent(this.rootEntity);
        }
        else {
            if (!parent.isAddedToEngine() && parent !== this.rootEntity) {
                log('Engine: warning, added an entity with a parent not present in the engine. Parent id: ' +
                    parent.uuid);
            }
        }
        entity.alive = true;
        for (var i in entity.children) {
            var child = entity.children[i];
            if (child) {
                if (!child.isAddedToEngine()) {
                    this.addEntity(child);
                }
            }
        }
        return entity;
    };
    Engine.prototype.removeEntity = function (entity) {
        var id = entity.uuid;
        if (entity.isAddedToEngine()) {
            for (var componentName in entity.components) {
                var componentGroups = this._componentGroups[componentName];
                if (componentGroups) {
                    for (var groupIndex in componentGroups) {
                        componentGroups[groupIndex].removeEntity(entity);
                    }
                }
                delete this.entityLists[componentName][id];
            }
            for (var i = 0; i < this.simpleSystems.length; i++) {
                var system = this.simpleSystems[i];
                if (system.onRemoveEntity) {
                    system.onRemoveEntity(entity);
                }
            }
            for (var i in entity.children) {
                var child = entity.children[i];
                if (child) {
                    this.removeEntity(child);
                }
            }
            entity.alive = false;
            entity.eventManager = null;
            delete this._entities[id];
            return true;
        }
        else {
            log('Engine: Trying to remove non existent entity from engine.');
            if (!entity.isAddedToEngine()) {
                log("Engine: Entity \"" + entity.uuid + "\" has not been added to any engine yet.");
            }
            else {
                log('Engine: Entity id: ' + id);
            }
            log("Engine: Entity's components:");
            for (var componentName in entity.components) {
                log(componentName);
            }
            return false;
        }
    };
    Engine.prototype.addSystem = function (system, priority) {
        if (priority === void 0) { priority = 0; }
        if (this.addedSystems.indexOf(system) !== -1) {
            log('Engine: Trying to add a system that is already added. Aborting');
            return system;
        }
        if (this.systems.length > 0) {
            for (var i = 0; i < this.systems.length; i++) {
                var entry = this.systems[i];
                var isLast = i === this.systems.length - 1;
                if (entry.priority > priority) {
                    this.addedSystems.push(system);
                    this.systems.splice(i, 0, { system: system, priority: priority });
                    break;
                }
                else if (isLast) {
                    this.addedSystems.push(system);
                    this.systems.splice(i + 1, 0, { system: system, priority: priority });
                    break;
                }
            }
        }
        else {
            this.addedSystems.push(system);
            this.systems.splice(1, 0, { system: system, priority: priority });
        }
        this.registerSystem(system);
        return system;
    };
    Engine.prototype.removeSystem = function (system) {
        var idx = this.addedSystems.indexOf(system);
        if (idx !== -1) {
            system.active = false;
            if (system.deactivate) {
                system.deactivate();
            }
            this.addedSystems.splice(idx, 1);
            for (var i = 0; i < this.systems.length; i++) {
                var sys = this.systems[i].system;
                if (sys === system) {
                    this.systems.splice(i, 1);
                }
            }
            return true;
        }
        return false;
    };
    Engine.prototype.update = function (dt) {
        for (var i in this.systems) {
            var system = this.systems[i].system;
            if (system.active && system.update) {
                try {
                    system.update(dt);
                }
                catch (e) {
                    // TODO: e may not be an Error
                    error(e);
                }
            }
        }
        return this;
    };
    Engine.prototype.getEntitiesWithComponent = function (component) {
        var componentName = typeof component === 'string' ? component : getComponentName(component);
        if (componentName in this.entityLists) {
            return this.entityLists[componentName];
        }
        else {
            return (this.entityLists[componentName] = {});
        }
    };
    Engine.prototype.registerComponent = function (component) {
        var id = getComponentId(component);
        var name = getComponentName(component);
        var classId = getComponentClassId(component);
        this._disposableComponents[id] = component;
        if (classId !== null) {
            this.eventManager.fireEvent(new DisposableComponentCreated(id, name, classId));
            this.eventManager.fireEvent(new DisposableComponentUpdated(id, component));
        }
    };
    Engine.prototype.disposeComponent = function (component) {
        var id = getComponentId(component);
        if (delete this._disposableComponents[id]) {
            this.eventManager.fireEvent(new DisposableComponentRemoved(id));
            if (component.onDispose) {
                component.onDispose();
            }
            return true;
        }
        return false;
    };
    Engine.prototype.updateComponent = function (component) {
        this.eventManager.fireEvent(new DisposableComponentUpdated(getComponentId(component), component));
    };
    Engine.prototype.getComponentGroup = function () {
        var requires = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            requires[_i] = arguments[_i];
        }
        var componentGroup = undefined;
        // Return an already created component-group if it already exists
        if (requires.length > 0) {
            // 1. get component groups for first require
            var componentGroups = this._componentGroups[getComponentName(requires[0])];
            if (componentGroups) {
                var components = requires.slice();
                // 2. search for a component group that has all the same requirements
                for (var i = 0; i < componentGroups.length; i++) {
                    var traversedComponentGroup = componentGroups[i];
                    if (components.length === traversedComponentGroup.requires.length) {
                        for (var j = 0; j < components.length; j++) {
                            if (traversedComponentGroup.requires.indexOf(components[j]) === -1)
                                break;
                            if (j === components.length - 1) {
                                componentGroup = traversedComponentGroup;
                            }
                        }
                        if (componentGroup)
                            break;
                    }
                }
            }
        }
        if (componentGroup) {
            // 3. Found an existent component group with the exact same requirements
            return componentGroup;
        }
        // Otherwise create and store it
        componentGroup = new (ComponentGroup.bind.apply(ComponentGroup, __spreadArray([void 0], __read(requires), false)))();
        componentGroup.active = true;
        var requiresNames = componentGroup.requiresNames;
        for (var i = 0; i < requiresNames.length; i++) {
            var componentName = requiresNames[i];
            var componentGroups = this._componentGroups[componentName];
            if (!componentGroups) {
                this._componentGroups[componentName] = componentGroups = [];
            }
            if (componentGroups.indexOf(componentGroup) === -1) {
                componentGroups.push(componentGroup);
            }
        }
        for (var entityId in this._entities) {
            this.checkRequirements(this._entities[entityId], componentGroup);
        }
        return componentGroup;
    };
    Engine.prototype.removeComponentGroup = function (componentGroup) {
        if (componentGroup.active) {
            componentGroup.active = false;
            var requiresNames = componentGroup.requiresNames;
            for (var i = 0; i < requiresNames.length; i++) {
                var componentName = requiresNames[i];
                var componentGroups = this._componentGroups[componentName];
                if (componentGroups) {
                    var idx = componentGroups.indexOf(componentGroup);
                    if (idx !== -1) {
                        componentGroups.splice(idx, 1);
                    }
                }
            }
            return true;
        }
        return false;
    };
    Engine.prototype.registerSystem = function (system) {
        system.active = true;
        if (system.activate) {
            system.activate(this);
        }
        this.simpleSystems.push(system);
    };
    Engine.prototype.checkRequirementsAndAdd = function (entity) {
        if (!entity.isAddedToEngine())
            return;
        for (var componentName in entity.components) {
            if (!(componentName in this.entityLists)) {
                this.entityLists[componentName] = {};
            }
            this.entityLists[componentName][entity.uuid] = entity;
            var componentGroups = this._componentGroups[componentName];
            if (componentGroups) {
                for (var systemIndex in componentGroups) {
                    this.checkRequirements(entity, componentGroups[systemIndex]);
                }
            }
        }
        for (var i = 0; i < this.simpleSystems.length; i++) {
            var system = this.simpleSystems[i];
            if (system.onAddEntity) {
                system.onAddEntity(entity);
            }
        }
    };
    Engine.prototype.checkRequirements = function (entity, system) {
        if (system.meetsRequirements(entity)) {
            if (!system.hasEntity(entity)) {
                system.addEntity(entity);
            }
        }
        else {
            if (system.hasEntity(entity)) {
                system.removeEntity(entity);
            }
        }
    };
    Engine.prototype.componentAddedHandler = function (event) {
        var _a;
        var entity = event.entity, componentName = event.componentName;
        if (!entity.isAddedToEngine())
            return;
        if (!this.entityLists[componentName]) {
            this.entityLists[componentName] = (_a = {}, _a[entity.uuid] = entity, _a);
        }
        else {
            this.entityLists[componentName][entity.uuid] = entity;
        }
        var componentGroups = this._componentGroups[componentName];
        if (componentGroups) {
            for (var i in componentGroups) {
                this.checkRequirements(entity, componentGroups[i]);
            }
        }
    };
    Engine.prototype.componentRemovedHandler = function (event) {
        // In case a single component gets removed from an entity, we inform
        // all systems that this entity lost this specific component.
        var entity = event.entity, componentName = event.componentName;
        if (!entity.isAddedToEngine())
            return;
        delete this.entityLists[componentName][entity.uuid];
        var componentGroups = this._componentGroups[componentName];
        if (componentGroups) {
            for (var i in componentGroups) {
                this.checkRequirements(entity, componentGroups[i]);
            }
        }
    };
    return Engine;
}());
export { Engine };
//# sourceMappingURL=data:application/json;base64,