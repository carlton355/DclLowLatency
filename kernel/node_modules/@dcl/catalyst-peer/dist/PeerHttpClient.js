"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchOrThrow = exports.PeerHttpClient = exports.ResponseError = void 0;
/* eslint-disable @typescript-eslint/ban-types */
const enums_1 = require("./peerjs-server-connector/enums");
async function safeJson(response) {
    try {
        return await response.json();
    }
    catch (e) {
        return undefined;
    }
}
class ResponseError extends Error {
    constructor(request, response, init, responseJson, message) {
        var _a, _b;
        super(message !== null && message !== void 0 ? message : `Error performing request to ${JSON.stringify(request)} with method ${(_a = init === null || init === void 0 ? void 0 : init.method) !== null && _a !== void 0 ? _a : 'GET'}. Status: ${(_b = responseJson === null || responseJson === void 0 ? void 0 : responseJson.status) !== null && _b !== void 0 ? _b : response.statusText}`);
        this.request = request;
        this.response = response;
        this.init = init;
        this.responseJson = responseJson;
    }
}
exports.ResponseError = ResponseError;
class PeerHttpClient {
    constructor(lighthouseUrl, tokenProvider) {
        this.lighthouseUrl = lighthouseUrl;
        this.tokenProvider = tokenProvider;
    }
    async fetch(urlOrPath, init) {
        var _a;
        let actualUrl = urlOrPath;
        try {
            new URL(actualUrl);
        }
        catch (e) {
            actualUrl = this.lighthouseUrl + actualUrl;
        }
        const actualInit = Object.assign(Object.assign({}, init), { body: (_a = init === null || init === void 0 ? void 0 : init.body) !== null && _a !== void 0 ? _a : ((init === null || init === void 0 ? void 0 : init.bodyObject) ? JSON.stringify(init.bodyObject) : undefined), headers: Object.assign(Object.assign({}, init === null || init === void 0 ? void 0 : init.headers), { 'Content-Type': 'application/json', [enums_1.PeerHeaders.PeerToken]: this.tokenProvider() }) });
        const response = await fetchOrThrow(actualUrl, actualInit);
        const json = await response.json();
        return { response, json };
    }
}
exports.PeerHttpClient = PeerHttpClient;
async function fetchOrThrow(input, init) {
    const response = await fetch(input, init);
    if (response.status >= 400) {
        throw new ResponseError(input, response, init, await safeJson(response));
    }
    return response;
}
exports.fetchOrThrow = fetchOrThrow;
//# sourceMappingURL=PeerHttpClient.js.map