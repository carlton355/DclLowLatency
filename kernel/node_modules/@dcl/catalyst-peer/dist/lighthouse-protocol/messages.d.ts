export declare enum PeerIncomingMessageType {
    PEER_LEFT_ISLAND = "PEER_LEFT_ISLAND",
    PEER_JOINED_ISLAND = "PEER_JOINED_ISLAND",
    OPTIMAL_NETWORK_RESPONSE = "OPTIMAL_NETWORK_RESPONSE",
    CHANGE_ISLAND = "CHANGE_ISLAND"
}
export declare type PeerWithPosition = {
    id: string;
    position: [number, number, number];
};
export declare type ChangeIsland = {
    type: PeerIncomingMessageType.CHANGE_ISLAND;
    payload: {
        islandId: string;
        peers: PeerWithPosition[];
    };
};
export declare type PeerJoinedIsland = {
    type: PeerIncomingMessageType.PEER_LEFT_ISLAND;
    payload: {
        islandId: string;
        peer: PeerWithPosition;
    };
};
export declare type PeerLeftIsland = {
    type: PeerIncomingMessageType.PEER_JOINED_ISLAND;
    payload: {
        islandId: string;
        peer: PeerWithPosition;
    };
};
export declare type PeerIncomingMessageContent = ChangeIsland | PeerJoinedIsland | PeerLeftIsland;
export declare type PeerIncomingMessage = {
    readonly src: string;
    readonly dst: string;
} & PeerIncomingMessageContent;
export declare enum PeerOutgoingMessageType {
    HEARTBEAT = "HEARTBEAT"
}
export declare type HeartbeatMessage = {
    type: PeerOutgoingMessageType.HEARTBEAT;
    payload: {
        connectedPeerIds: string[];
        parcel?: [number, number];
        position?: [number, number, number];
        preferedIslandId?: string;
    };
};
export declare type PeerOutgoingMessage = HeartbeatMessage;
