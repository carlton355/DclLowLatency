"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ID_ALPHABET = exports.average = exports.randomBetween = exports.randomUint32 = exports.MAX_UINT32 = exports.pickRandom = exports.noReject = exports.shuffle = exports.delay = void 0;
function delay(time) {
    return new Promise((resolve) => setTimeout(resolve, time));
}
exports.delay = delay;
function shuffle(array) {
    return array.sort(() => 0.5 - Math.random());
}
exports.shuffle = shuffle;
function noReject(promise) {
    return promise.then((value) => ['fulfilled', value], (error) => ['rejected', error]);
}
exports.noReject = noReject;
/**
 * Picks count random elements from the array and returns them and the remaining elements. If the array
 * has less or equal elements than the amount required, then it returns a copy of the array.
 */
function pickRandom(array, count) {
    const shuffled = shuffle(array);
    const selected = shuffled.splice(0, count);
    return [selected, shuffled];
}
exports.pickRandom = pickRandom;
exports.MAX_UINT32 = 4294967295;
function randomUint32() {
    return Math.floor(Math.random() * exports.MAX_UINT32);
}
exports.randomUint32 = randomUint32;
function randomBetween(min, max) {
    return Math.random() * (max - min) + min;
}
exports.randomBetween = randomBetween;
function average(numbers) {
    return numbers.reduce((a, b) => a + b, 0) / numbers.length;
}
exports.average = average;
// Using encodeURIComponent, all these characters seem to be safe. But if this causes issues in the future, we can use the alphabet below, which is safer
exports.DEFAULT_ID_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_-!#$&/()<>{}[]+*=,.;:|~';
// export const DEFAULT_ID_ALPHABET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_-!()*.~,;"
//# sourceMappingURL=util.js.map