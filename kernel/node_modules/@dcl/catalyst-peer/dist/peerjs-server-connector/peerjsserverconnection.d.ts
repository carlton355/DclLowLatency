import { EventEmitter } from 'eventemitter3';
import { ConnectedPeerData } from '../types';
import { PeerErrorType, ServerMessageType } from './enums';
import { LogLevel } from './logger';
import { ServerMessage } from './servermessage';
import { Socket, SocketBuilder } from './socket';
export declare type MessageHandler = {
    handleMessage(messsage: ServerMessage): void;
};
export declare type ValidationMessagePayload = any;
declare class PeerOptions {
    debug?: LogLevel;
    host?: string;
    port?: number;
    path?: string;
    key?: string;
    token?: string;
    secure?: boolean;
    pingInterval?: number;
    socketBuilder?: SocketBuilder;
    heartbeatExtras?: () => object;
    logFunction?: (logLevel: LogLevel, ...rest: any[]) => void;
    authHandler?: (msg: string) => Promise<ValidationMessagePayload>;
}
export declare type HandshakeData = {
    sdp: any;
    connectionId: string;
    sessionId: string;
} & Record<string, any>;
export declare function createOfferMessage(myId: string, peerData: ConnectedPeerData, handshakeData: HandshakeData): {
    type: ServerMessageType;
    src: string;
    dst: string;
    payload: any;
};
export declare function createValidationMessage(myId: string, payload: ValidationMessagePayload): {
    type: ServerMessageType;
    src: string;
    payload: any;
};
export declare function createAnswerMessage(myId: string, peerData: ConnectedPeerData, handshakeData: HandshakeData): {
    type: ServerMessageType;
    src: string;
    dst: string;
    payload: any;
};
export declare function createCandidateMessage(myId: string, peerData: ConnectedPeerData, candidateData: any, connectionId: string): {
    type: ServerMessageType;
    src: string;
    dst: string;
    payload: any;
};
/**
 * Connector to the PeerJS server in order to publish and receive connection offers
 */
export declare class PeerJSServerConnection extends EventEmitter {
    private static readonly DEFAULT_KEY;
    private readonly _options;
    private _id;
    private _lastServerId;
    private _api;
    private _messageHandler;
    private _disconnected;
    private _open;
    /** Valid connection after the peer and the server complete the handshake (signature and validation of message) */
    private _valid;
    private _socket;
    get id(): string | null;
    get messageHandler(): MessageHandler;
    get options(): PeerOptions;
    get open(): boolean;
    get connected(): boolean;
    get socket(): Socket;
    get disconnected(): boolean;
    constructor(handler: MessageHandler, id?: string, options?: PeerOptions);
    private _initializeServerConnection;
    /** Initialize a connection with the server. */
    private _initialize;
    /** Handles messages from the server. */
    private _handleMessage;
    private _delayedAbort;
    /**
     * Emits an error message and destroys the Peer.
     * The Peer is not destroyed if it's in a disconnected state, in which case
     * it retains its disconnected state and its existing connections.
     */
    private _abort;
    /** Emits a typed error message. */
    emitError(type: PeerErrorType, err: any): void;
    /**
     * Disconnects the Peer's connection to the PeerServer. Does not close any
     *  active connections.
     * Warning: The peer can no longer create or accept connections after being
     *  disconnected. It also cannot reconnect to the server.
     */
    disconnect(): Promise<void>;
    /** Attempts to reconnect with the same ID. */
    reconnect(): Promise<void>;
    sendOffer(peerData: ConnectedPeerData, handshakeData: HandshakeData): void;
    sendAnswer(peerData: ConnectedPeerData, handshakeData: HandshakeData): void;
    sendValidation(payload: ValidationMessagePayload): void;
    sendCandidate(peerData: ConnectedPeerData, candidateData: any, connectionId: string): void;
    sendRejection(dst: string, sessionId: string, label: string, reason: string): void;
    /**
     * Get a list of available peer IDs. If you're running your own server, you'll
     * want to set allow_discovery: true in the PeerServer options. If you're using
     * the cloud server, email team@peerjs.com to get the functionality enabled for
     * your key.
     */
    listAllPeers(cb?: (_: any[]) => void): void;
}
export {};
