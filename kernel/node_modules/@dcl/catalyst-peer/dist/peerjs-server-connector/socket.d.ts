import { EventEmitter } from 'eventemitter3';
export declare type SocketType = {
    onmessage: any;
    onclose: any;
    onopen: any;
    readyState: number;
    close(code?: number, reason?: string): void;
    send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;
};
export declare type SocketBuilder = (url: string) => SocketType;
/**
 * An abstraction on top of WebSockets to provide fastest
 * possible connection for peers.
 */
export declare class Socket extends EventEmitter {
    private readonly pingInterval;
    private socketBuilder;
    private heartbeatExtras?;
    private _disconnected;
    private _id;
    private _messagesQueue;
    private _wsUrl;
    private _socket;
    private _wsPingTimer;
    constructor(secure: any, host: string, port: number, path: string, key: string, pingInterval: number, socketBuilder: SocketBuilder, heartbeatExtras?: (() => object) | undefined);
    /** Check in with ID or get one from server. */
    start(id: string | null, token: string): void;
    /** Start up websocket communications. */
    private _startWebSocket;
    private _scheduleHeartbeat;
    private _sendHeartbeat;
    /** Is the websocket currently open? */
    private _wsOpen;
    /** Send queued messages. */
    private _sendQueuedMessages;
    /** Exposed send for DC & Peer. */
    send(data: any): void;
    close(): void;
}
