export declare const util: {
    noop(): void;
    readonly CLOUD_HOST: "0.peerjs.com";
    readonly CLOUD_PORT: 443;
    validateId(id: string): boolean;
    randomToken(): string;
    generateToken(n: number): string;
};
export declare function connectionIdFor(myId: string, peerId: string, sessionId: string): string;
export declare function delay(time: number): Promise<unknown>;
export declare function shuffle<T>(array: T[]): T[];
export declare function noReject<T>(promise: Promise<T>): Promise<['fulfilled' | 'rejected', any]>;
/**
 * Picks count random elements from the array and returns them and the remaining elements. If the array
 * has less or equal elements than the amount required, then it returns a copy of the array.
 */
export declare function pickRandom<T>(array: T[], count: number): [T[], T[]];
/**
 * Picks the top `count` elements according to `criteria` from the array and returns them and the remaining elements. If the array
 * has less or equal elements than the amount required, then it returns a copy of the array sorted by `criteria`.
 */
export declare function pickBy<T>(array: T[], count: number, criteria: (t1: T, t2: T) => number): [T[], T[]];
