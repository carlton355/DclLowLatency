"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Socket = void 0;
/* eslint-disable @typescript-eslint/ban-types */
const eventemitter3_1 = require("eventemitter3");
const enums_1 = require("./enums");
const logger_1 = __importDefault(require("./logger"));
/**
 * An abstraction on top of WebSockets to provide fastest
 * possible connection for peers.
 */
class Socket extends eventemitter3_1.EventEmitter {
    constructor(secure, host, port, path, key, pingInterval = 5000, socketBuilder, heartbeatExtras) {
        super();
        this.pingInterval = pingInterval;
        this.socketBuilder = socketBuilder;
        this.heartbeatExtras = heartbeatExtras;
        this._disconnected = false;
        this._id = null;
        this._messagesQueue = [];
        const wsProtocol = secure ? 'wss://' : 'ws://';
        this._wsUrl = wsProtocol + host + ':' + port + path + 'peerjs?key=' + key;
    }
    /** Check in with ID or get one from server. */
    start(id, token) {
        this._id = id;
        if (this._id) {
            this._wsUrl += '&id=' + id;
        }
        this._wsUrl += '&token=' + token;
        this._startWebSocket();
    }
    /** Start up websocket communications. */
    _startWebSocket() {
        if (this._socket) {
            return;
        }
        this._socket = this.socketBuilder(this._wsUrl);
        this._socket.onmessage = (event) => {
            let data;
            try {
                data = JSON.parse(event.data);
                logger_1.default.log('Server message received:', data);
            }
            catch (e) {
                logger_1.default.log('Invalid server message', event.data);
                return;
            }
            if (data.type === enums_1.ServerMessageType.AssignedId) {
                this._id = data.payload.id;
            }
            this.emit(enums_1.SocketEventType.Message, data);
        };
        this._socket.onclose = (event) => {
            logger_1.default.log('Socket closed.', event);
            this._disconnected = true;
            clearTimeout(this._wsPingTimer);
            this.emit(enums_1.SocketEventType.Disconnected);
        };
        // Take care of the queue of connections if necessary and make sure Peer knows
        // socket is open.
        this._socket.onopen = () => {
            if (this._disconnected)
                return;
            this._sendQueuedMessages();
            logger_1.default.log('Socket open');
            this._scheduleHeartbeat();
        };
    }
    _scheduleHeartbeat() {
        this._wsPingTimer = setTimeout(() => {
            this._sendHeartbeat();
        }, this.pingInterval);
    }
    _sendHeartbeat() {
        if (!this._wsOpen()) {
            logger_1.default.log(`Cannot send heartbeat, because socket closed`);
            return;
        }
        const message = JSON.stringify({
            type: enums_1.ServerMessageType.Heartbeat,
            payload: this.heartbeatExtras ? this.heartbeatExtras() : {}
        });
        this._socket.send(message);
        this._scheduleHeartbeat();
    }
    /** Is the websocket currently open? */
    _wsOpen() {
        return !!this._socket && this._socket.readyState === 1;
    }
    /** Send queued messages. */
    _sendQueuedMessages() {
        //Create copy of queue and clear it,
        //because send method push the message back to queue if smth will go wrong
        const copiedQueue = [...this._messagesQueue];
        this._messagesQueue = [];
        for (const message of copiedQueue) {
            this.send(message);
        }
    }
    /** Exposed send for DC & Peer. */
    send(data) {
        if (this._disconnected) {
            return;
        }
        // If we didn't get an ID yet, we can't yet send anything so we should queue
        // up these messages.
        if (!this._id) {
            this._messagesQueue.push(data);
            return;
        }
        if (!data.type) {
            this.emit(enums_1.SocketEventType.Error, 'Invalid message');
            return;
        }
        if (!this._wsOpen()) {
            this._messagesQueue.push(data);
            return;
        }
        const message = JSON.stringify(data);
        this._socket.send(message);
    }
    close() {
        if (!this._disconnected && !!this._socket) {
            this._socket.close();
            this._disconnected = true;
            clearTimeout(this._wsPingTimer);
        }
    }
}
exports.Socket = Socket;
//# sourceMappingURL=socket.js.map