import { Peer } from './Peer';
import { Packet } from './proto/peer_protobuf';
declare type PeriodicValue = {
    accumulatedInPeriod: number;
    currentValue?: number;
    lastAccumulatedValue?: number;
};
export declare class Stats {
    averagePacketSize?: number;
    totalPackets: number;
    totalBytes: number;
    lastPeriodUpdate: number;
    _bytesPerSecond: PeriodicValue;
    _packetsPerSecond: PeriodicValue;
    get bytesPerSecond(): number | undefined;
    get periodBytes(): number | undefined;
    get packetsPerSecond(): number | undefined;
    get periodPackets(): number | undefined;
    countPacket(packet: Packet, length: number, duplicate?: boolean, expired?: boolean): void;
    onPeriod(timestamp: number): void;
}
export declare class TypedStats extends Stats {
    statsByType: Record<string, Stats>;
    countPacket(packet: Packet, length: number): void;
    onPeriod(timestamp: number): void;
}
declare type PacketOperationType = 'sent' | 'received' | 'relayed';
export declare class GlobalStats {
    periodLength: number;
    sent: TypedStats;
    received: TypedStats;
    relayed: TypedStats;
    all: TypedStats;
    tagged: Record<string, TypedStats>;
    private periodId?;
    onPeriodicStatsUpdated: (stats: GlobalStats) => void;
    constructor(periodLength?: number);
    countPacket(packet: Packet, length: number, operation: PacketOperationType, tags?: string[]): void;
    onPeriod(timestamp: number): void;
    startPeriod(): void;
    dispose(): void;
    getStatsFor(statsKey: string): TypedStats | undefined;
}
/**
 * Helper function to build a data object to submit the stats for analytics
 */
export declare function buildCatalystPeerStatsData(catalystPeer: Peer): {
    connectedPeers: string[];
    knownPeersCount: number;
    position: import(".").Position3D | undefined;
};
export {};
