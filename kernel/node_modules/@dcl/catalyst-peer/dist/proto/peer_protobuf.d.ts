import { Reader, Writer } from 'protobufjs/minimal';
export declare enum PacketType {
    UKNOWN_PACKET_TYPE = 0,
    MESSAGE = 1,
    PING = 2,
    PONG = 3,
    SUSPEND_RELAY = 4
}
export declare enum PayloadEncoding {
    BYTES = 0,
    STRING = 1,
    JSON = 2
}
export interface MessageData {
    room: string;
    dst: Uint8Array[];
    payload: Uint8Array;
    encoding: PayloadEncoding;
}
export interface PingData {
    pingId: number;
}
export interface PongData {
    pingId: number;
}
export interface SuspendRelayData {
    relayedPeers: string[];
    durationMillis: number;
}
export interface Packet {
    sequenceId: number;
    instanceId: number;
    timestamp: number;
    src: string;
    subtype: string;
    discardOlderThan: number;
    optimistic: boolean;
    expireTime: number;
    hops: number;
    ttl: number;
    receivedBy: string[];
    messageData: MessageData | undefined;
    pingData: PingData | undefined;
    pongData: PongData | undefined;
    suspendRelayData: SuspendRelayData | undefined;
}
export declare namespace PacketType {
    function fromJSON(object: any): PacketType;
    function toJSON(object: PacketType): string;
}
export declare namespace PayloadEncoding {
    function fromJSON(object: any): PayloadEncoding;
    function toJSON(object: PayloadEncoding): string;
}
export declare const MessageData: {
    encode(message: MessageData, writer?: Writer): Writer;
    decode(reader: Reader, length?: number | undefined): MessageData;
    fromJSON(object: any): MessageData;
    fromPartial(object: DeepPartial<MessageData>): MessageData;
    toJSON(message: MessageData): unknown;
};
export declare const PingData: {
    encode(message: PingData, writer?: Writer): Writer;
    decode(reader: Reader, length?: number | undefined): PingData;
    fromJSON(object: any): PingData;
    fromPartial(object: DeepPartial<PingData>): PingData;
    toJSON(message: PingData): unknown;
};
export declare const PongData: {
    encode(message: PongData, writer?: Writer): Writer;
    decode(reader: Reader, length?: number | undefined): PongData;
    fromJSON(object: any): PongData;
    fromPartial(object: DeepPartial<PongData>): PongData;
    toJSON(message: PongData): unknown;
};
export declare const SuspendRelayData: {
    encode(message: SuspendRelayData, writer?: Writer): Writer;
    decode(reader: Reader, length?: number | undefined): SuspendRelayData;
    fromJSON(object: any): SuspendRelayData;
    fromPartial(object: DeepPartial<SuspendRelayData>): SuspendRelayData;
    toJSON(message: SuspendRelayData): unknown;
};
export declare const Packet: {
    encode(message: Packet, writer?: Writer): Writer;
    decode(reader: Reader, length?: number | undefined): Packet;
    fromJSON(object: any): Packet;
    fromPartial(object: DeepPartial<Packet>): Packet;
    toJSON(message: Packet): unknown;
};
declare type DeepPartial<T> = {
    [P in keyof T]?: T[P] extends Array<infer U> ? Array<DeepPartial<U>> : T[P] extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T[P] extends Date | Function | Uint8Array | undefined ? T[P] : T[P] extends infer U | undefined ? DeepPartial<U> : T[P] extends object ? DeepPartial<T[P]> : T[P];
};
export {};
