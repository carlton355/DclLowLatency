"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toFeatureList = exports.fetchFlags = void 0;
/**
 * Fetches a feature flags object from the server
 * @public
 */
async function fetchFlags(options) {
    const featureFlagsUrl = options.featureFlagsUrl || `https://feature-flags.decentraland.org`;
    const headers = new Headers();
    if (options.debug)
        headers.set("X-Debug", "true");
    if (typeof options.userId === "string" && options.userId.length)
        headers.set("X-Address-Hash", options.userId);
    try {
        const res = await fetch(new URL(options.applicationName + ".json", featureFlagsUrl).toString(), {
            method: "get",
            mode: "cors",
            credentials: "include",
            headers,
        });
        if (!res.ok) {
            return { flags: {}, variants: {}, error: new Error("Request to features server failed") };
        }
        return await res.json();
    }
    catch (error) {
        return { flags: {}, variants: {}, error };
    }
}
exports.fetchFlags = fetchFlags;
/**
 * Trasform a FeatureFlagsResult object into a list of string
 * according with the standard defined on the [ADR-73](https://github.com/decentraland/adr/blob/main/docs/ADR-73-ab-testing.md#segment-measuring-your-new-ab-testing)
 * @param ff - Feature flag object
 * @public
 */
function toFeatureList(ff = {}) {
    const flags = [];
    if (ff.flags) {
        for (const flag of Object.keys(ff.flags)) {
            if (ff.flags[flag]) {
                flags.push(flag);
                if (ff.variants && ff.variants[flag] && ff.variants[flag].enabled) {
                    flags.push(flag + ':' + ff.variants[flag].name);
                }
            }
        }
    }
    return flags;
}
exports.toFeatureList = toFeatureList;
//# sourceMappingURL=index.js.map