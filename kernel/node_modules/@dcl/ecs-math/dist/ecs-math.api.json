{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.18.19",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@dcl/ecs-math!",
  "docComment": "",
  "name": "@dcl/ecs-math",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@dcl/ecs-math!",
      "name": "",
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Angle:class",
          "docComment": "/**\n * Defines angle representation\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Angle "
            }
          ],
          "releaseTag": "Public",
          "name": "Angle",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Angle:constructor(1)",
              "docComment": "/**\n * Creates an Angle object of \"radians\" radians (float).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(radians: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "radians",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Angle.BetweenTwoPoints:member(1)",
              "docComment": "/**\n * Gets a new Angle object valued with the angle value in radians between the two given vectors\n *\n * @param a - defines first vector\n *\n * @param b - defines second vector\n *\n * @returns a new Angle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static BetweenTwoPoints(a: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Angle",
                  "canonicalReference": "@dcl/ecs-math!Angle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "BetweenTwoPoints"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Angle#degrees:member(1)",
              "docComment": "/**\n * Get value in degrees\n *\n * @returns the Angle value in degrees (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "degrees(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "degrees"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Angle.FromDegrees:member(1)",
              "docComment": "/**\n * Gets a new Angle object from the given float in degrees\n *\n * @param degrees - defines the angle value in degrees\n *\n * @returns a new Angle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromDegrees(degrees: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Angle",
                  "canonicalReference": "@dcl/ecs-math!Angle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "degrees",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "FromDegrees"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Angle.FromRadians:member(1)",
              "docComment": "/**\n * Gets a new Angle object from the given float in radians\n *\n * @param radians - defines the angle value in radians\n *\n * @returns a new Angle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromRadians(radians: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Angle",
                  "canonicalReference": "@dcl/ecs-math!Angle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "radians",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "FromRadians"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Angle#radians:member(1)",
              "docComment": "/**\n * Get value in radians\n *\n * @returns the Angle value in radians (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "radians(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "radians"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Arc2:class",
          "docComment": "/**\n * This represents an arc in a 2d space.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Arc2 "
            }
          ],
          "releaseTag": "Public",
          "name": "Arc2",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Arc2:constructor(1)",
              "docComment": "/**\n * Creates an Arc object from the three given points : start, middle and end.\n *\n * @param startPoint - Defines the start point of the arc\n *\n * @param midPoint - Defines the midlle point of the arc\n *\n * @param endPoint - Defines the end point of the arc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    startPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", \n    midPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", \n    endPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "startPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "midPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "endPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Arc2#angle:member",
              "docComment": "/**\n * Defines the angle of the arc (from mid point to end point).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "angle: "
                },
                {
                  "kind": "Reference",
                  "text": "Angle",
                  "canonicalReference": "@dcl/ecs-math!Angle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "angle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Arc2#centerPoint:member",
              "docComment": "/**\n * Defines the center point of the arc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "centerPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "centerPoint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Arc2#endPoint:member",
              "docComment": "/**\n * Defines the end point of the arc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "endPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "endPoint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Arc2#midPoint:member",
              "docComment": "/**\n * Defines the mid point of the arc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "midPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "midPoint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Arc2#orientation:member",
              "docComment": "/**\n * Defines the orientation of the arc (clock wise/counter clock wise).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "orientation: "
                },
                {
                  "kind": "Reference",
                  "text": "Orientation",
                  "canonicalReference": "@dcl/ecs-math!Orientation:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "orientation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Arc2#radius:member",
              "docComment": "/**\n * Defines the radius of the arc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "radius: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "radius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Arc2#startAngle:member",
              "docComment": "/**\n * Defines the start angle of the arc (from start point to middle point).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startAngle: "
                },
                {
                  "kind": "Reference",
                  "text": "Angle",
                  "canonicalReference": "@dcl/ecs-math!Angle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "startAngle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Arc2#startPoint:member",
              "docComment": "/**\n * Defines the start point of the arc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "startPoint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Axis:class",
          "docComment": "/**\n * Defines the 3 main axes\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Axis "
            }
          ],
          "releaseTag": "Public",
          "name": "Axis",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Axis.X:member",
              "docComment": "/**\n * X axis\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static X: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "X",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Axis.Y:member",
              "docComment": "/**\n * Y axis\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Y: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Axis.Z:member",
              "docComment": "/**\n * Z axis\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Z: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Z",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!BezierCurve:class",
          "docComment": "/**\n * Class used to represent a Bezier curve\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BezierCurve "
            }
          ],
          "releaseTag": "Public",
          "name": "BezierCurve",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!BezierCurve.Interpolate:member(1)",
              "docComment": "/**\n * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\n *\n * @param t - defines the time\n *\n * @param x1 - defines the left coordinate on X axis\n *\n * @param y1 - defines the left coordinate on Y axis\n *\n * @param x2 - defines the right coordinate on X axis\n *\n * @param y2 - defines the right coordinate on Y axis\n *\n * @returns the interpolated value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Interpolate(t: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", x1: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y1: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", x2: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y2: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "t",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "x1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "y1",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "x2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "y2",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "Interpolate"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Color3:class",
          "docComment": "/**\n * Class used to hold a RBG color\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Color3 "
            }
          ],
          "releaseTag": "Public",
          "name": "Color3",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Color3:constructor(1)",
              "docComment": "/**\n * Creates a new Color3 object from red, green, blue values, all between 0 and 1\n *\n * @param r - defines the red component (between 0 and 1, default is 0)\n *\n * @param g - defines the green component (between 0 and 1, default is 0)\n *\n * @param b - defines the blue component (between 0 and 1, default is 0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    r?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    g?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    b?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#add:member(1)",
              "docComment": "/**\n * Creates a new Color3 set with the added values of the current Color3 and of the given one\n *\n * @param otherColor - defines the second operand\n *\n * @returns the new Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#addToRef:member(1)",
              "docComment": "/**\n * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\n *\n * @param otherColor - defines the second operand\n *\n * @param result - defines Color3 object to store the result into\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addToRef(otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#asArray:member(1)",
              "docComment": "/**\n * Returns a new array populated with 3 numeric elements : red, green and blue values\n *\n * @returns the new array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asArray(): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "asArray"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Color3#b:member",
              "docComment": "/**\n * Defines the blue component (between 0 and 1, default is 0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "b",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.Black:member(1)",
              "docComment": "/**\n * Returns a Color3 value containing a black color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Black(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Black"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.Blue:member(1)",
              "docComment": "/**\n * Returns a Color3 value containing a blue color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Blue(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Blue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#clampToRef:member(1)",
              "docComment": "/**\n * Clamps the rgb values by the min and max values and stores the result into \"result\"\n *\n * @param min - defines minimum clamping value (default is 0)\n *\n * @param max - defines maximum clamping value (default is 1)\n *\n * @param result - defines color to store the result into\n *\n * @returns the original Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clampToRef(min: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "clampToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#clone:member(1)",
              "docComment": "/**\n * Copy the current object\n *\n * @returns a new Color3 copied the current one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#copyFrom:member(1)",
              "docComment": "/**\n * Copies the rgb values from the source in the current Color3\n *\n * @param source - defines the source Color3 object\n *\n * @returns the updated Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFrom(source: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#copyFromFloats:member(1)",
              "docComment": "/**\n * Updates the Color3 rgb values from the given floats\n *\n * @param r - defines the red component to read from\n *\n * @param g - defines the green component to read from\n *\n * @param b - defines the blue component to read from\n *\n * @returns the current Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFromFloats(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "copyFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#equals:member(1)",
              "docComment": "/**\n * Determines equality between Color3 objects\n *\n * @param otherColor - defines the second operand\n *\n * @returns true if the rgb values are equal to the given ones\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#equalsFloats:member(1)",
              "docComment": "/**\n * Determines equality between the current Color3 object and a set of r,b,g values\n *\n * @param r - defines the red component to check\n *\n * @param g - defines the green component to check\n *\n * @param b - defines the blue component to check\n *\n * @returns true if the rgb values are equal to the given ones\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equalsFloats(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "equalsFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.FromArray:member(1)",
              "docComment": "/**\n * Creates a new Vector3 from the starting index of the given array\n *\n * @param array - defines the source array\n *\n * @param offset - defines an offset in the source array\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "FromArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.FromHexString:member(1)",
              "docComment": "/**\n * Creates a new Color3 from the string containing valid hexadecimal values\n *\n * @param hex - defines a string containing valid hexadecimal values\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromHexString(hex: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "FromHexString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.FromInts:member(1)",
              "docComment": "/**\n * Creates a new Color3 from integer values (less than 256)\n *\n * @param r - defines the red component to read from (value between 0 and 255)\n *\n * @param g - defines the green component to read from (value between 0 and 255)\n *\n * @param b - defines the blue component to read from (value between 0 and 255)\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromInts(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "FromInts"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Color3#g:member",
              "docComment": "/**\n * Defines the green component (between 0 and 1, default is 0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "g",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#getClassName:member(1)",
              "docComment": "/**\n * Returns the string \"Color3\"\n *\n * @returns \"Color3\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClassName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getClassName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#getHashCode:member(1)",
              "docComment": "/**\n * Compute the Color3 hash code\n *\n * @returns an unique number that can be used to hash Color3 objects\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHashCode(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getHashCode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.Gray:member(1)",
              "docComment": "/**\n * Returns a Color3 value containing a gray color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Gray(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Gray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.Green:member(1)",
              "docComment": "/**\n * Returns a Color3 value containing a green color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Green(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Green"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.Lerp:member(1)",
              "docComment": "/**\n * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n *\n * @param start - defines the start Color3 value\n *\n * @param end - defines the end Color3 value\n *\n * @param amount - defines the gradient value between start and end\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Lerp(start: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Lerp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.LerpToRef:member(1)",
              "docComment": "/**\n * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n *\n * @param left - defines the start value\n *\n * @param right - defines the end value\n *\n * @param amount - defines the gradient factor\n *\n * @param result - defines the Color3 object where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static LerpToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "LerpToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.Magenta:member(1)",
              "docComment": "/**\n * Returns a Color3 value containing a magenta color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Magenta(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Magenta"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#multiply:member(1)",
              "docComment": "/**\n * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\n *\n * @param otherColor - defines the second operand\n *\n * @returns the new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiply(otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#multiplyToRef:member(1)",
              "docComment": "/**\n * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\n *\n * @param otherColor - defines the second operand\n *\n * @param result - defines the Color3 object where to store the result\n *\n * @returns the current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyToRef(otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.Purple:member(1)",
              "docComment": "/**\n * Returns a Color3 value containing a purple color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Purple(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Purple"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Color3#r:member",
              "docComment": "/**\n * Defines the red component (between 0 and 1, default is 0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "r",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.Random:member(1)",
              "docComment": "/**\n * Returns a Color3 value containing a random color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Random(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Random"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.Red:member(1)",
              "docComment": "/**\n * Returns a Color3 value containing a red color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Red(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Red"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#scale:member(1)",
              "docComment": "/**\n * Multiplies in place each rgb value by scale\n *\n * @param scale - defines the scaling factor\n *\n * @returns the updated Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#scaleAndAddToRef:member(1)",
              "docComment": "/**\n * Scale the current Color3 values by a factor and add the result to a given Color3\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines color to store the result into\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleAndAddToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#scaleToRef:member(1)",
              "docComment": "/**\n * Multiplies the rgb values by scale and stores the result into \"result\"\n *\n * @param scale - defines the scaling factor\n *\n * @param result - defines the Color3 object where to store the result\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#set:member(1)",
              "docComment": "/**\n * Updates the Color3 rgb values from the given floats\n *\n * @param r - defines the red component to read from\n *\n * @param g - defines the green component to read from\n *\n * @param b - defines the blue component to read from\n *\n * @returns the current Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#subtract:member(1)",
              "docComment": "/**\n * Returns a new Color3 set with the subtracted values of the given one from the current Color3\n *\n * @param otherColor - defines the second operand\n *\n * @returns the new Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtract(otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#subtractToRef:member(1)",
              "docComment": "/**\n * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\n *\n * @param otherColor - defines the second operand\n *\n * @param result - defines Color3 object to store the result into\n *\n * @returns the unmodified current Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractToRef(otherColor: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "subtractToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.Teal:member(1)",
              "docComment": "/**\n * Returns a Color3 value containing a teal color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Teal(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Teal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#toArray:member(1)",
              "docComment": "/**\n * Stores in the given array from the given starting index the red, green, blue values as successive elements\n *\n * @param array - defines the array where to store the r,g,b components\n *\n * @param index - defines an optional index in the target array to define where to start storing values\n *\n * @returns the current Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "toArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#toColor4:member(1)",
              "docComment": "/**\n * Returns a new Color4 object from the current Color3 and the given alpha\n *\n * @param alpha - defines the alpha component on the new Color4 object (default is 1)\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toColor4(alpha?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "alpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toColor4"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#toGammaSpace:member(1)",
              "docComment": "/**\n * Computes a new Color3 converted from the current one to gamma space\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toGammaSpace(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toGammaSpace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#toGammaSpaceToRef:member(1)",
              "docComment": "/**\n * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color3 object where to store the gamma space version\n *\n * @returns the unmodified Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toGammaSpaceToRef(convertedColor: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "convertedColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toGammaSpaceToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#toHexString:member(1)",
              "docComment": "/**\n * Compute the Color3 hexadecimal code as a string\n *\n * @returns a string containing the hexadecimal representation of the Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toHexString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toHexString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#toJSON:member(1)",
              "docComment": "/**\n * Serializes Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        r: number;\n        g: number;\n        b: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toJSON"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#toLinearSpace:member(1)",
              "docComment": "/**\n * Computes a new Color3 converted from the current one to linear space\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toLinearSpace(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toLinearSpace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#toLinearSpaceToRef:member(1)",
              "docComment": "/**\n * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color3 object where to store the linear space version\n *\n * @returns the unmodified Color3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toLinearSpaceToRef(convertedColor: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "convertedColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toLinearSpaceToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#toLuminance:member(1)",
              "docComment": "/**\n * Returns the luminance value\n *\n * @returns a float value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toLuminance(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toLuminance"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3#toString:member(1)",
              "docComment": "/**\n * Creates a string with the Color3 current values\n *\n * @returns the string representation of the Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.White:member(1)",
              "docComment": "/**\n * Returns a Color3 value containing a white color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static White(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "White"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color3.Yellow:member(1)",
              "docComment": "/**\n * Returns a Color3 value containing a yellow color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Yellow(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Yellow"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Color4:class",
          "docComment": "/**\n * Class used to hold a RBGA color\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Color4 "
            }
          ],
          "releaseTag": "Public",
          "name": "Color4",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Color4:constructor(1)",
              "docComment": "/**\n * Creates a new Color4 object from red, green, blue values, all between 0 and 1\n *\n * @param r - defines the red component (between 0 and 1, default is 0)\n *\n * @param g - defines the green component (between 0 and 1, default is 0)\n *\n * @param b - defines the blue component (between 0 and 1, default is 0)\n *\n * @param a - defines the alpha component (between 0 and 1, default is 1)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    r?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    g?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    b?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    a?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Color4#a:member",
              "docComment": "/**\n * Defines the alpha component (between 0 and 1, default is 1)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "a",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#add:member(1)",
              "docComment": "/**\n * Creates a new Color4 set with the added values of the current Color4 and of the given one\n *\n * @param right - defines the second operand\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(right: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#addInPlace:member(1)",
              "docComment": "/**\n * Adds in place the given Color4 values to the current Color4 object\n *\n * @param right - defines the second operand\n *\n * @returns the current updated Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addInPlace(right: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#asArray:member(1)",
              "docComment": "/**\n * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\n *\n * @returns the new array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asArray(): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "asArray"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Color4#b:member",
              "docComment": "/**\n * Defines the blue component (between 0 and 1, default is 0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "b",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.Black:member(1)",
              "docComment": "/**\n * Returns a Color4 value containing a black color\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Black(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Black"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.Blue:member(1)",
              "docComment": "/**\n * Returns a Color4 value containing a blue color\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Blue(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Blue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.CheckColors4:member(1)",
              "docComment": "/**\n * Check the content of a given array and convert it to an array containing RGBA data If the original array was already containing count * 4 values then it is returned directly\n *\n * @param colors - defines the array to check\n *\n * @param count - defines the number of RGBA data to expect\n *\n * @returns an array containing count * 4 values (RGBA)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static CheckColors4(colors: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ", count: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "colors",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "count",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "CheckColors4"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#clampToRef:member(1)",
              "docComment": "/**\n * Clamps the rgb values by the min and max values and stores the result into \"result\"\n *\n * @param min - defines minimum clamping value (default is 0)\n *\n * @param max - defines maximum clamping value (default is 1)\n *\n * @param result - defines color to store the result into.\n *\n * @returns the cuurent Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clampToRef(min: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "clampToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.Clear:member(1)",
              "docComment": "/**\n * Returns a Color4 value containing a transparent color\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Clear(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#clone:member(1)",
              "docComment": "/**\n * Creates a new Color4 copied from the current one\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#copyFrom:member(1)",
              "docComment": "/**\n * Copies the given Color4 values into the current one\n *\n * @param source - defines the source Color4 object\n *\n * @returns the current updated Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFrom(source: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#copyFromFloats:member(1)",
              "docComment": "/**\n * Copies the given float values into the current one\n *\n * @param r - defines the red component to read from\n *\n * @param g - defines the green component to read from\n *\n * @param b - defines the blue component to read from\n *\n * @param a - defines the alpha component to read from\n *\n * @returns the current updated Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFromFloats(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "copyFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.FromArray:member(1)",
              "docComment": "/**\n * Creates a new Color4 from the starting index element of the given array\n *\n * @param array - defines the source array to read from\n *\n * @param offset - defines the offset in the source array\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "FromArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.FromColor3:member(1)",
              "docComment": "/**\n * Creates a new Color4 from a Color3 and an alpha value\n *\n * @param color3 - defines the source Color3 to read from\n *\n * @param alpha - defines the alpha component (1.0 by default)\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromColor3(color3: "
                },
                {
                  "kind": "Reference",
                  "text": "Color3",
                  "canonicalReference": "@dcl/ecs-math!Color3:class"
                },
                {
                  "kind": "Content",
                  "text": ", alpha?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "color3",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "alpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "FromColor3"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.FromHexString:member(1)",
              "docComment": "/**\n * Creates a new Color4 from the string containing valid hexadecimal values\n *\n * @param hex - defines a string containing valid hexadecimal values\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromHexString(hex: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "FromHexString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.FromInts:member(1)",
              "docComment": "/**\n * Creates a new Color3 from integer values (less than 256)\n *\n * @param r - defines the red component to read from (value between 0 and 255)\n *\n * @param g - defines the green component to read from (value between 0 and 255)\n *\n * @param b - defines the blue component to read from (value between 0 and 255)\n *\n * @param a - defines the alpha component to read from (value between 0 and 255)\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromInts(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "FromInts"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Color4#g:member",
              "docComment": "/**\n * Defines the green component (between 0 and 1, default is 0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "g",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#getClassName:member(1)",
              "docComment": "/**\n * Returns the string \"Color4\"\n *\n * @returns \"Color4\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClassName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getClassName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#getHashCode:member(1)",
              "docComment": "/**\n * Compute the Color4 hash code\n *\n * @returns an unique number that can be used to hash Color4 objects\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHashCode(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getHashCode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.Gray:member(1)",
              "docComment": "/**\n * Returns a Color4 value containing a gray color\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Gray(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Gray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.Green:member(1)",
              "docComment": "/**\n * Returns a Color4 value containing a green color\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Green(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Green"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.Lerp:member(1)",
              "docComment": "/**\n * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n *\n * @param left - defines the start value\n *\n * @param right - defines the end value\n *\n * @param amount - defines the gradient factor\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Lerp(left: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Lerp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.LerpToRef:member(1)",
              "docComment": "/**\n * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n *\n * @param left - defines the start value\n *\n * @param right - defines the end value\n *\n * @param amount - defines the gradient factor\n *\n * @param result - defines the Color4 object where to store data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static LerpToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "LerpToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.Magenta:member(1)",
              "docComment": "/**\n * Returns a Color4 value containing a magenta color\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Magenta(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Magenta"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#multiply:member(1)",
              "docComment": "/**\n * Multipy an Color4 value by another and return a new Color4 object\n *\n * @param color - defines the Color4 value to multiply by\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiply(color: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "color",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#multiplyToRef:member(1)",
              "docComment": "/**\n * Multipy a Color4 value by another and push the result in a reference value\n *\n * @param color - defines the Color4 value to multiply by\n *\n * @param result - defines the Color4 to fill the result in\n *\n * @returns the result Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyToRef(color: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "color",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.Purple:member(1)",
              "docComment": "/**\n * Returns a Color4 value containing a purple color\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Purple(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Purple"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Color4#r:member",
              "docComment": "/**\n * Defines the red component (between 0 and 1, default is 0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "r",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.Red:member(1)",
              "docComment": "/**\n * Returns a Color4 value containing a red color\n *\n * @returns a new Color3 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Red(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Red"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#scale:member(1)",
              "docComment": "/**\n * Creates a new Color4 with the current Color4 values multiplied by scale\n *\n * @param scale - defines the scaling factor to apply\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#scaleAndAddToRef:member(1)",
              "docComment": "/**\n * Scale the current Color4 values by a factor and add the result to a given Color4\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the Color4 object where to store the result\n *\n * @returns the unmodified current Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleAndAddToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#scaleToRef:member(1)",
              "docComment": "/**\n * Multiplies the current Color4 values by scale and stores the result in \"result\"\n *\n * @param scale - defines the scaling factor to apply\n *\n * @param result - defines the Color4 object where to store the result\n *\n * @returns the current unmodified Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#set:member(1)",
              "docComment": "/**\n * Copies the given float values into the current one\n *\n * @param r - defines the red component to read from\n *\n * @param g - defines the green component to read from\n *\n * @param b - defines the blue component to read from\n *\n * @param a - defines the alpha component to read from\n *\n * @returns the current updated Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#subtract:member(1)",
              "docComment": "/**\n * Creates a new Color4 set with the subtracted values of the given one from the current Color4\n *\n * @param right - defines the second operand\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtract(right: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#subtractToRef:member(1)",
              "docComment": "/**\n * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\n *\n * @param right - defines the second operand\n *\n * @param result - defines the Color4 object where to store the result\n *\n * @returns the current Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractToRef(right: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "subtractToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.Teal:member(1)",
              "docComment": "/**\n * Returns a Color4 value containing a teal color\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Teal(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Teal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#toArray:member(1)",
              "docComment": "/**\n * Stores from the starting index in the given array the Color4 successive values\n *\n * @param array - defines the array where to store the r,g,b components\n *\n * @param index - defines an optional index in the target array to define where to start storing values\n *\n * @returns the current Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArray(array: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ", index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "toArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#toGammaSpace:member(1)",
              "docComment": "/**\n * Computes a new Color4 converted from the current one to gamma space\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toGammaSpace(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toGammaSpace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#toGammaSpaceToRef:member(1)",
              "docComment": "/**\n * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color4 object where to store the gamma space version\n *\n * @returns the unmodified Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toGammaSpaceToRef(convertedColor: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "convertedColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toGammaSpaceToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#toHexString:member(1)",
              "docComment": "/**\n * Compute the Color4 hexadecimal code as a string\n *\n * @returns a string containing the hexadecimal representation of the Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toHexString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toHexString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#toLinearSpace:member(1)",
              "docComment": "/**\n * Computes a new Color4 converted from the current one to linear space\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toLinearSpace(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toLinearSpace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#toLinearSpaceToRef:member(1)",
              "docComment": "/**\n * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\n *\n * @param convertedColor - defines the Color4 object where to store the linear space version\n *\n * @returns the unmodified Color4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toLinearSpaceToRef(convertedColor: "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "convertedColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toLinearSpaceToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4#toString:member(1)",
              "docComment": "/**\n * Creates a string with the Color4 current values\n *\n * @returns the string representation of the Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.White:member(1)",
              "docComment": "/**\n * Returns a Color4 value containing a white color\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static White(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "White"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Color4.Yellow:member(1)",
              "docComment": "/**\n * Returns a Color4 value containing a yellow color\n *\n * @returns a new Color4 object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Yellow(): "
                },
                {
                  "kind": "Reference",
                  "text": "Color4",
                  "canonicalReference": "@dcl/ecs-math!Color4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Yellow"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Curve3:class",
          "docComment": "/**\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space. A Curve3 is designed from a series of successive Vector3. {@link https://doc.babylonjs.com/how_to/how_to_use_curve3}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Curve3 "
            }
          ],
          "releaseTag": "Public",
          "name": "Curve3",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Curve3:constructor(1)",
              "docComment": "/**\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space. A Curve3 is designed from a series of successive Vector3. {@link http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object | Tutorial}\n *\n * @param points - points which make up the curve\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(points: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "points",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Curve3#continue:member(1)",
              "docComment": "/**\n * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB); This new Curve3 is built by translating and sticking the curveB at the end of the curveA. curveA and curveB keep unchanged.\n *\n * @param curve - the curve to continue from this curve\n *\n * @returns the newly constructed curve\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "continue(curve: "
                },
                {
                  "kind": "Reference",
                  "text": "Curve3",
                  "canonicalReference": "@dcl/ecs-math!Curve3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Curve3",
                  "canonicalReference": "@dcl/ecs-math!Curve3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "curve",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "continue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Curve3.CreateCatmullRomSpline:member(1)",
              "docComment": "/**\n * Returns a Curve3 object along a CatmullRom Spline curve :\n *\n * @param points - (array of Vector3) the points the spline must pass through. At least, four points required\n *\n * @param nbPoints - (integer) the wanted number of points between each curve control points\n *\n * @param closed - (boolean) optional with default false, when true forms a closed loop from the points\n *\n * @returns the created Curve3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static CreateCatmullRomSpline(points: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", nbPoints: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", closed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Curve3",
                  "canonicalReference": "@dcl/ecs-math!Curve3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "points",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "nbPoints",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "closed",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "CreateCatmullRomSpline"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Curve3.CreateCubicBezier:member(1)",
              "docComment": "/**\n * Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve\n *\n * @param v0 - (Vector3) the origin point of the Cubic Bezier\n *\n * @param v1 - (Vector3) the first control point\n *\n * @param v2 - (Vector3) the second control point\n *\n * @param v3 - (Vector3) the end point of the Cubic Bezier\n *\n * @param nbPoints - (integer) the wanted number of points in the curve\n *\n * @returns the created Curve3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static CreateCubicBezier(v0: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", v1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", v2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", v3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", nbPoints: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Curve3",
                  "canonicalReference": "@dcl/ecs-math!Curve3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "v0",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "v1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "v2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "v3",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "nbPoints",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "CreateCubicBezier"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Curve3.CreateHermiteSpline:member(1)",
              "docComment": "/**\n * Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline\n *\n * @param p1 - (Vector3) the origin point of the Hermite Spline\n *\n * @param t1 - (Vector3) the tangent vector at the origin point\n *\n * @param p2 - (Vector3) the end point of the Hermite Spline\n *\n * @param t2 - (Vector3) the tangent vector at the end point\n *\n * @param nbPoints - (integer) the wanted number of points in the curve\n *\n * @returns the created Curve3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static CreateHermiteSpline(p1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", t1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", p2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", t2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", nbPoints: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Curve3",
                  "canonicalReference": "@dcl/ecs-math!Curve3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "t1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "p2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "t2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "nbPoints",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "CreateHermiteSpline"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Curve3.CreateQuadraticBezier:member(1)",
              "docComment": "/**\n * Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve\n *\n * @param v0 - (Vector3) the origin point of the Quadratic Bezier\n *\n * @param v1 - (Vector3) the control point\n *\n * @param v2 - (Vector3) the end point of the Quadratic Bezier\n *\n * @param nbPoints - (integer) the wanted number of points in the curve\n *\n * @returns the created Curve3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static CreateQuadraticBezier(v0: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", v1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", v2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", nbPoints: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Curve3",
                  "canonicalReference": "@dcl/ecs-math!Curve3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "v0",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "v1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "v2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "nbPoints",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "CreateQuadraticBezier"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Curve3#getPoints:member(1)",
              "docComment": "/**\n * @returns the Curve3 stored array of successive Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPoints(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getPoints"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Curve3#length:member(1)",
              "docComment": "/**\n * @returns the computed length (float) of the curve.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "length(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "length"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/ecs-math!DEG2RAD:var",
          "docComment": "/**\n * Constant used to convert from Euler degrees to radians\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEG2RAD: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "releaseTag": "Public",
          "name": "DEG2RAD",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!double:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type double = "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "double",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EcsMathReadOnlyQuaternion = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly x: number;\n    readonly y: number;\n    readonly z: number;\n    readonly w: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EcsMathReadOnlyQuaternion",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EcsMathReadOnlyVector2 = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly y: number;\n    readonly x: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EcsMathReadOnlyVector2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EcsMathReadOnlyVector3 = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly y: number;\n    readonly x: number;\n    readonly z: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EcsMathReadOnlyVector3",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EcsMathReadOnlyVector4 = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly x: number;\n    readonly y: number;\n    readonly z: number;\n    readonly w: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EcsMathReadOnlyVector4",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/ecs-math!Epsilon:var",
          "docComment": "/**\n * Constant used to define the minimal number value in Babylon.js\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Epsilon = 0.000001"
            }
          ],
          "releaseTag": "Public",
          "name": "Epsilon",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!float:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type float = "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "float",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!FloatArray:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FloatArray = "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FloatArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Frustum:class",
          "docComment": "/**\n * Reprasents a camera frustum\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Frustum "
            }
          ],
          "releaseTag": "Public",
          "name": "Frustum",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Frustum.GetBottomPlaneToRef:member(1)",
              "docComment": "/**\n * Gets the bottom frustum plane transformed by the transform matrix\n *\n * @param transform - transformation matrix to be applied to the resulting frustum plane\n *\n * @param frustumPlane - the resuling frustum plane\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetBottomPlaneToRef(transform: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", frustumPlane: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transform",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "frustumPlane",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "GetBottomPlaneToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Frustum.GetFarPlaneToRef:member(1)",
              "docComment": "/**\n * Gets the far frustum plane transformed by the transform matrix\n *\n * @param transform - transformation matrix to be applied to the resulting frustum plane\n *\n * @param frustumPlane - the resuling frustum plane\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetFarPlaneToRef(transform: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", frustumPlane: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transform",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "frustumPlane",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "GetFarPlaneToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Frustum.GetLeftPlaneToRef:member(1)",
              "docComment": "/**\n * Gets the left frustum plane transformed by the transform matrix\n *\n * @param transform - transformation matrix to be applied to the resulting frustum plane\n *\n * @param frustumPlane - the resuling frustum plane\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetLeftPlaneToRef(transform: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", frustumPlane: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transform",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "frustumPlane",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "GetLeftPlaneToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Frustum.GetNearPlaneToRef:member(1)",
              "docComment": "/**\n * Gets the near frustum plane transformed by the transform matrix\n *\n * @param transform - transformation matrix to be applied to the resulting frustum plane\n *\n * @param frustumPlane - the resuling frustum plane\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetNearPlaneToRef(transform: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", frustumPlane: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transform",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "frustumPlane",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "GetNearPlaneToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Frustum.GetPlanes:member(1)",
              "docComment": "/**\n * Gets the planes representing the frustum\n *\n * @param transform - matrix to be applied to the returned planes\n *\n * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetPlanes(transform: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transform",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "GetPlanes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Frustum.GetPlanesToRef:member(1)",
              "docComment": "/**\n * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\n *\n * @param transform - transformation matrix to be applied to the resulting frustum planes\n *\n * @param frustumPlanes - the resuling frustum planes\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetPlanesToRef(transform: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", frustumPlanes: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transform",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "frustumPlanes",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "GetPlanesToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Frustum.GetRightPlaneToRef:member(1)",
              "docComment": "/**\n * Gets the right frustum plane transformed by the transform matrix\n *\n * @param transform - transformation matrix to be applied to the resulting frustum plane\n *\n * @param frustumPlane - the resuling frustum plane\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetRightPlaneToRef(transform: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", frustumPlane: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transform",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "frustumPlane",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "GetRightPlaneToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Frustum.GetTopPlaneToRef:member(1)",
              "docComment": "/**\n * Gets the top frustum plane transformed by the transform matrix\n *\n * @param transform - transformation matrix to be applied to the resulting frustum plane\n *\n * @param frustumPlane - the resuling frustum plane\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetTopPlaneToRef(transform: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", frustumPlane: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transform",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "frustumPlane",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "GetTopPlaneToRef"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@dcl/ecs-math!ISize:interface",
          "docComment": "/**\n * Interface for the size containing width and height\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISize "
            }
          ],
          "releaseTag": "Public",
          "name": "ISize",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/ecs-math!ISize#height:member",
              "docComment": "/**\n * Heighht\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@dcl/ecs-math!ISize#width:member",
              "docComment": "/**\n * Width\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/ecs-math!MathTmp:var",
          "docComment": "/**\n * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MathTmp: "
            },
            {
              "kind": "Content",
              "text": "{\n    Vector3: "
            },
            {
              "kind": "Reference",
              "text": "Vector3",
              "canonicalReference": "@dcl/ecs-math!Vector3:class"
            },
            {
              "kind": "Content",
              "text": "[];\n    Matrix: "
            },
            {
              "kind": "Reference",
              "text": "Matrix",
              "canonicalReference": "@dcl/ecs-math!Matrix:class"
            },
            {
              "kind": "Content",
              "text": "[];\n    Quaternion: "
            },
            {
              "kind": "Reference",
              "text": "Quaternion",
              "canonicalReference": "@dcl/ecs-math!Quaternion:class"
            },
            {
              "kind": "Content",
              "text": "[];\n    staticUp: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Vector3",
              "canonicalReference": "@dcl/ecs-math!Vector3:class"
            },
            {
              "kind": "Content",
              "text": ">;\n    tmpMatrix: "
            },
            {
              "kind": "Reference",
              "text": "Matrix",
              "canonicalReference": "@dcl/ecs-math!Matrix:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "MathTmp",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Matrix:class",
          "docComment": "/**\n * Class used to store matrix data (4x4)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Matrix "
            }
          ],
          "releaseTag": "Public",
          "name": "Matrix",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Matrix:constructor(1)",
              "docComment": "/**\n * Creates an empty matrix (filled with zeros)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#add:member(1)",
              "docComment": "/**\n * Adds the current matrix with a second one\n *\n * @param other - defines the matrix to add\n *\n * @returns a new matrix as the addition of the current matrix and the given one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#addAtIndex:member(1)",
              "docComment": "/**\n * add a value at the specified position in the current Matrix\n *\n * @param index - the index of the value within the matrix. between 0 and 15.\n *\n * @param value - the value to be added\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addAtIndex(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addAtIndex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#addToRef:member(1)",
              "docComment": "/**\n * Sets the given matrix \"result\" to the addition of the current matrix and the given one\n *\n * @param other - defines the matrix to add\n *\n * @param result - defines the target matrix\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addToRef(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#addToSelf:member(1)",
              "docComment": "/**\n * Adds in place the given matrix to the current matrix\n *\n * @param other - defines the second operand\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addToSelf(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addToSelf"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#asArray:member(1)",
              "docComment": "/**\n * Returns the matrix as a FloatArray\n *\n * @returns the matrix underlying array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asArray(): "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "asArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#clone:member(1)",
              "docComment": "/**\n * Clone the current matrix\n *\n * @returns a new matrix from the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.Compose:member(1)",
              "docComment": "/**\n * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n *\n * @param scale - defines the scale vector3\n *\n * @param rotation - defines the rotation quaternion\n *\n * @param translation - defines the translation vector3\n *\n * @returns a new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Compose(scale: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", rotation: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ", translation: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "rotation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "translation",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Compose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.ComposeToRef:member(1)",
              "docComment": "/**\n * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n *\n * @param scale - defines the scale vector3\n *\n * @param rotation - defines the rotation quaternion\n *\n * @param translation - defines the translation vector3\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ComposeToRef(scale: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", rotation: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ", translation: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "rotation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "translation",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "ComposeToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#copyFrom:member(1)",
              "docComment": "/**\n * Copy the current matrix from the given one\n *\n * @param other - defines the source matrix\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFrom(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#copyToArray:member(1)",
              "docComment": "/**\n * Populates the given array from the starting index with the current matrix values\n *\n * @param array - defines the target array\n *\n * @param offset - defines the offset in the target array where to start storing values\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyToArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "copyToArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#decompose:member(1)",
              "docComment": "/**\n * Decomposes the current Matrix into a translation, rotation and scaling components\n *\n * @param scale - defines the scale vector3 given as a reference to update\n *\n * @param rotation - defines the rotation quaternion given as a reference to update\n *\n * @param translation - defines the translation vector3 given as a reference to update\n *\n * @returns true if operation was successful\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decompose(scale?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", rotation?: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ", translation?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "rotation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "translation",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "decompose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.DecomposeLerp:member(1)",
              "docComment": "/**\n * Builds a new matrix whose values are computed by: * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n *\n * @param startValue - defines the first matrix\n *\n * @param endValue - defines the second matrix\n *\n * @param gradient - defines the gradient between the two matrices\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static DecomposeLerp(startValue: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", endValue: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", gradient: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "startValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "endValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "gradient",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "DecomposeLerp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.DecomposeLerpToRef:member(1)",
              "docComment": "/**\n * Update a matrix to values which are computed by: * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n *\n * @param startValue - defines the first matrix\n *\n * @param endValue - defines the second matrix\n *\n * @param gradient - defines the gradient between the two matrices\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static DecomposeLerpToRef(startValue: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", endValue: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", gradient: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "startValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "endValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "gradient",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "DecomposeLerpToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#determinant:member(1)",
              "docComment": "/**\n * Gets the determinant of the matrix\n *\n * @returns the matrix determinant\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "determinant(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "determinant"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#equals:member(1)",
              "docComment": "/**\n * Check equality between this matrix and a second one\n *\n * @param value - defines the second matrix to compare\n *\n * @returns true is the current matrix and the given one values are strictly equal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(value: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.FromArray:member(1)",
              "docComment": "/**\n * Creates a matrix from an array\n *\n * @param array - defines the source array\n *\n * @param offset - defines an offset in the source array\n *\n * @returns a new Matrix set from the starting index of the given array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "FromArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.FromArrayToRef:member(1)",
              "docComment": "/**\n * Copy the content of an array into a given matrix\n *\n * @param array - defines the source array\n *\n * @param offset - defines an offset in the source array\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArrayToRef(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "FromArrayToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.FromFloatArrayToRefScaled:member(1)",
              "docComment": "/**\n * Stores an array into a matrix after having multiplied each component by a given factor\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @param scale - defines the scaling factor\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromFloatArrayToRefScaled(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "FromFloatArrayToRefScaled"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.FromQuaternionToRef:member(1)",
              "docComment": "/**\n * Creates a rotation matrix from a quaternion and stores it in a target matrix\n *\n * @param quat - defines the quaternion to use\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromQuaternionToRef(quat: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "quat",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "FromQuaternionToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.FromValues:member(1)",
              "docComment": "/**\n * Creates new matrix from a list of values (16)\n *\n * @param initialM11 - defines 1st value of 1st row\n *\n * @param initialM12 - defines 2nd value of 1st row\n *\n * @param initialM13 - defines 3rd value of 1st row\n *\n * @param initialM14 - defines 4th value of 1st row\n *\n * @param initialM21 - defines 1st value of 2nd row\n *\n * @param initialM22 - defines 2nd value of 2nd row\n *\n * @param initialM23 - defines 3rd value of 2nd row\n *\n * @param initialM24 - defines 4th value of 2nd row\n *\n * @param initialM31 - defines 1st value of 3rd row\n *\n * @param initialM32 - defines 2nd value of 3rd row\n *\n * @param initialM33 - defines 3rd value of 3rd row\n *\n * @param initialM34 - defines 4th value of 3rd row\n *\n * @param initialM41 - defines 1st value of 4th row\n *\n * @param initialM42 - defines 2nd value of 4th row\n *\n * @param initialM43 - defines 3rd value of 4th row\n *\n * @param initialM44 - defines 4th value of 4th row\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromValues(initialM11: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM12: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM13: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM14: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM21: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM22: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM23: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM24: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM31: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM32: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM33: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM34: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM41: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM42: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM43: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM44: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 33,
                "endIndex": 34
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "initialM11",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "initialM12",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "initialM13",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "initialM14",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "initialM21",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "initialM22",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                },
                {
                  "parameterName": "initialM23",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  }
                },
                {
                  "parameterName": "initialM24",
                  "parameterTypeTokenRange": {
                    "startIndex": 15,
                    "endIndex": 16
                  }
                },
                {
                  "parameterName": "initialM31",
                  "parameterTypeTokenRange": {
                    "startIndex": 17,
                    "endIndex": 18
                  }
                },
                {
                  "parameterName": "initialM32",
                  "parameterTypeTokenRange": {
                    "startIndex": 19,
                    "endIndex": 20
                  }
                },
                {
                  "parameterName": "initialM33",
                  "parameterTypeTokenRange": {
                    "startIndex": 21,
                    "endIndex": 22
                  }
                },
                {
                  "parameterName": "initialM34",
                  "parameterTypeTokenRange": {
                    "startIndex": 23,
                    "endIndex": 24
                  }
                },
                {
                  "parameterName": "initialM41",
                  "parameterTypeTokenRange": {
                    "startIndex": 25,
                    "endIndex": 26
                  }
                },
                {
                  "parameterName": "initialM42",
                  "parameterTypeTokenRange": {
                    "startIndex": 27,
                    "endIndex": 28
                  }
                },
                {
                  "parameterName": "initialM43",
                  "parameterTypeTokenRange": {
                    "startIndex": 29,
                    "endIndex": 30
                  }
                },
                {
                  "parameterName": "initialM44",
                  "parameterTypeTokenRange": {
                    "startIndex": 31,
                    "endIndex": 32
                  }
                }
              ],
              "name": "FromValues"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.FromValuesToRef:member(1)",
              "docComment": "/**\n * Stores a list of values (16) inside a given matrix\n *\n * @param initialM11 - defines 1st value of 1st row\n *\n * @param initialM12 - defines 2nd value of 1st row\n *\n * @param initialM13 - defines 3rd value of 1st row\n *\n * @param initialM14 - defines 4th value of 1st row\n *\n * @param initialM21 - defines 1st value of 2nd row\n *\n * @param initialM22 - defines 2nd value of 2nd row\n *\n * @param initialM23 - defines 3rd value of 2nd row\n *\n * @param initialM24 - defines 4th value of 2nd row\n *\n * @param initialM31 - defines 1st value of 3rd row\n *\n * @param initialM32 - defines 2nd value of 3rd row\n *\n * @param initialM33 - defines 3rd value of 3rd row\n *\n * @param initialM34 - defines 4th value of 3rd row\n *\n * @param initialM41 - defines 1st value of 4th row\n *\n * @param initialM42 - defines 2nd value of 4th row\n *\n * @param initialM43 - defines 3rd value of 4th row\n *\n * @param initialM44 - defines 4th value of 4th row\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromValuesToRef(initialM11: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM12: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM13: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM14: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM21: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM22: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM23: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM24: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM31: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM32: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM33: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM34: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM41: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM42: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM43: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", initialM44: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 35,
                "endIndex": 36
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "initialM11",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "initialM12",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "initialM13",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "initialM14",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "initialM21",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "initialM22",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                },
                {
                  "parameterName": "initialM23",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  }
                },
                {
                  "parameterName": "initialM24",
                  "parameterTypeTokenRange": {
                    "startIndex": 15,
                    "endIndex": 16
                  }
                },
                {
                  "parameterName": "initialM31",
                  "parameterTypeTokenRange": {
                    "startIndex": 17,
                    "endIndex": 18
                  }
                },
                {
                  "parameterName": "initialM32",
                  "parameterTypeTokenRange": {
                    "startIndex": 19,
                    "endIndex": 20
                  }
                },
                {
                  "parameterName": "initialM33",
                  "parameterTypeTokenRange": {
                    "startIndex": 21,
                    "endIndex": 22
                  }
                },
                {
                  "parameterName": "initialM34",
                  "parameterTypeTokenRange": {
                    "startIndex": 23,
                    "endIndex": 24
                  }
                },
                {
                  "parameterName": "initialM41",
                  "parameterTypeTokenRange": {
                    "startIndex": 25,
                    "endIndex": 26
                  }
                },
                {
                  "parameterName": "initialM42",
                  "parameterTypeTokenRange": {
                    "startIndex": 27,
                    "endIndex": 28
                  }
                },
                {
                  "parameterName": "initialM43",
                  "parameterTypeTokenRange": {
                    "startIndex": 29,
                    "endIndex": 30
                  }
                },
                {
                  "parameterName": "initialM44",
                  "parameterTypeTokenRange": {
                    "startIndex": 31,
                    "endIndex": 32
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 33,
                    "endIndex": 34
                  }
                }
              ],
              "name": "FromValuesToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.FromXYZAxesToRef:member(1)",
              "docComment": "/**\n * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\n *\n * @param xaxis - defines the value of the 1st axis\n *\n * @param yaxis - defines the value of the 2nd axis\n *\n * @param zaxis - defines the value of the 3rd axis\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromXYZAxesToRef(xaxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", yaxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", zaxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "xaxis",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "yaxis",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "zaxis",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "FromXYZAxesToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.GetAsMatrix2x2:member(1)",
              "docComment": "/**\n * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray\n *\n * @param matrix - defines the matrix to use\n *\n * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetAsMatrix2x2(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "GetAsMatrix2x2"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.GetAsMatrix3x3:member(1)",
              "docComment": "/**\n * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray\n *\n * @param matrix - defines the matrix to use\n *\n * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetAsMatrix3x3(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "GetAsMatrix3x3"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#getClassName:member(1)",
              "docComment": "/**\n * Returns the name of the current matrix class\n *\n * @returns the string \"Matrix\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClassName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getClassName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#getHashCode:member(1)",
              "docComment": "/**\n * Gets the hash code of the current matrix\n *\n * @returns the hash code\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHashCode(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getHashCode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#getRotationMatrix:member(1)",
              "docComment": "/**\n * Gets only rotation part of the current matrix\n *\n * @returns a new matrix sets to the extracted rotation matrix from the current one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRotationMatrix(): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getRotationMatrix"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#getRotationMatrixToRef:member(1)",
              "docComment": "/**\n * Extracts the rotation matrix from the current one and sets it as the given \"result\"\n *\n * @param result - defines the target matrix to store data to\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRotationMatrixToRef(result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getRotationMatrixToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#getRow:member(1)",
              "docComment": "/**\n * Gets specific row of the matrix\n *\n * @param index - defines the number of the row to get\n *\n * @returns the index-th row of the current matrix as a new Vector4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRow(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@dcl/ecs-math!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getRow"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#getTranslation:member(1)",
              "docComment": "/**\n * Gets the translation value of the current matrix\n *\n * @returns a new Vector3 as the extracted translation from the matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTranslation(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTranslation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#getTranslationToRef:member(1)",
              "docComment": "/**\n * Fill a Vector3 with the extracted translation from the matrix\n *\n * @param result - defines the Vector3 where to store the translation\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTranslationToRef(result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getTranslationToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.Identity:member(1)",
              "docComment": "/**\n * Creates a new identity matrix\n *\n * @returns a new identity matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Identity(): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Identity"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Matrix.IdentityReadOnly:member",
              "docComment": "/**\n * Gets an identity matrix that must not be updated\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static get IdentityReadOnly(): "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "IdentityReadOnly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.IdentityToRef:member(1)",
              "docComment": "/**\n * Creates a new identity matrix and stores the result in a given matrix\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static IdentityToRef(result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "IdentityToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#invert:member(1)",
              "docComment": "/**\n * Inverts the current matrix in place\n *\n * @returns the current inverted matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invert(): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "invert"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.Invert:member(1)",
              "docComment": "/**\n * Creates a new matrix as the invert of a given matrix\n *\n * @param source - defines the source matrix\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Invert(source: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "Invert"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#invertToRef:member(1)",
              "docComment": "/**\n * Sets the given matrix to the current inverted Matrix\n *\n * @param other - defines the target matrix\n *\n * @returns the unmodified current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invertToRef(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "invertToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#isIdentity:member(1)",
              "docComment": "/**\n * Check if the current matrix is identity\n *\n * @returns true is the matrix is the identity matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isIdentity(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isIdentity"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#isIdentityAs3x2:member(1)",
              "docComment": "/**\n * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\n *\n * @returns true is the matrix is the identity matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isIdentityAs3x2(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isIdentityAs3x2"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.Lerp:member(1)",
              "docComment": "/**\n * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n *\n * @param startValue - defines the start value\n *\n * @param endValue - defines the end value\n *\n * @param gradient - defines the gradient factor\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Lerp(startValue: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", endValue: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", gradient: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "startValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "endValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "gradient",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Lerp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.LerpToRef:member(1)",
              "docComment": "/**\n * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n *\n * @param startValue - defines the start value\n *\n * @param endValue - defines the end value\n *\n * @param gradient - defines the gradient factor\n *\n * @param result - defines the Matrix object where to store data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static LerpToRef(startValue: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", endValue: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", gradient: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "startValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "endValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "gradient",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "LerpToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.LookAtLH:member(1)",
              "docComment": "/**\n * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\" This function works in left handed mode\n *\n * @param eye - defines the final position of the entity\n *\n * @param target - defines where the entity should look at\n *\n * @param up - defines the up vector for the entity\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static LookAtLH(eye: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", up: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eye",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "LookAtLH"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.LookAtLHToRef:member(1)",
              "docComment": "/**\n * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\". This function works in left handed mode\n *\n * @param eye - defines the final position of the entity\n *\n * @param target - defines where the entity should look at\n *\n * @param up - defines the up vector for the entity\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static LookAtLHToRef(eye: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", up: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eye",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "LookAtLHToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.LookAtRH:member(1)",
              "docComment": "/**\n * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\" This function works in right handed mode\n *\n * @param eye - defines the final position of the entity\n *\n * @param target - defines where the entity should look at\n *\n * @param up - defines the up vector for the entity\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static LookAtRH(eye: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", up: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eye",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "LookAtRH"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.LookAtRHToRef:member(1)",
              "docComment": "/**\n * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\". This function works in right handed mode\n *\n * @param eye - defines the final position of the entity\n *\n * @param target - defines where the entity should look at\n *\n * @param up - defines the up vector for the entity\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static LookAtRHToRef(eye: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", up: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eye",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "LookAtRHToRef"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Matrix#m:member",
              "docComment": "/**\n * Gets the internal data of the matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get m(): "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "m",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#multiply:member(1)",
              "docComment": "/**\n * Multiply two matrices\n *\n * @param other - defines the second operand\n *\n * @returns a new matrix set with the multiplication result of the current Matrix and the given one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiply(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#multiplyAtIndex:member(1)",
              "docComment": "/**\n * mutiply the specified position in the current Matrix by a value\n *\n * @param index - the index of the value within the matrix. between 0 and 15.\n *\n * @param value - the value to be added\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyAtIndex(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiplyAtIndex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#multiplyToArray:member(1)",
              "docComment": "/**\n * Sets the FloatArray \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\n *\n * @param other - defines the second operand\n *\n * @param result - defines the array where to store the multiplication\n *\n * @param offset - defines the offset in the target array where to start storing values\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyToArray(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "multiplyToArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#multiplyToRef:member(1)",
              "docComment": "/**\n * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\n *\n * @param other - defines the second operand\n *\n * @param result - defines the matrix where to store the multiplication\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyToRef(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.OrthoLH:member(1)",
              "docComment": "/**\n * Create a left-handed orthographic projection matrix\n *\n * @param width - defines the viewport width\n *\n * @param height - defines the viewport height\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a left-handed orthographic projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static OrthoLH(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "OrthoLH"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.OrthoLHToRef:member(1)",
              "docComment": "/**\n * Store a left-handed orthographic projection to a given matrix\n *\n * @param width - defines the viewport width\n *\n * @param height - defines the viewport height\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static OrthoLHToRef(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "OrthoLHToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.OrthoOffCenterLH:member(1)",
              "docComment": "/**\n * Create a left-handed orthographic projection matrix\n *\n * @param left - defines the viewport left coordinate\n *\n * @param right - defines the viewport right coordinate\n *\n * @param bottom - defines the viewport bottom coordinate\n *\n * @param top - defines the viewport top coordinate\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a left-handed orthographic projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static OrthoOffCenterLH(left: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", bottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", top: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "bottom",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "top",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                }
              ],
              "name": "OrthoOffCenterLH"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.OrthoOffCenterLHToRef:member(1)",
              "docComment": "/**\n * Stores a left-handed orthographic projection into a given matrix\n *\n * @param left - defines the viewport left coordinate\n *\n * @param right - defines the viewport right coordinate\n *\n * @param bottom - defines the viewport bottom coordinate\n *\n * @param top - defines the viewport top coordinate\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static OrthoOffCenterLHToRef(left: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", bottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", top: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "bottom",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "top",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  }
                }
              ],
              "name": "OrthoOffCenterLHToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.OrthoOffCenterRH:member(1)",
              "docComment": "/**\n * Creates a right-handed orthographic projection matrix\n *\n * @param left - defines the viewport left coordinate\n *\n * @param right - defines the viewport right coordinate\n *\n * @param bottom - defines the viewport bottom coordinate\n *\n * @param top - defines the viewport top coordinate\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a right-handed orthographic projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static OrthoOffCenterRH(left: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", bottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", top: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "bottom",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "top",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                }
              ],
              "name": "OrthoOffCenterRH"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.OrthoOffCenterRHToRef:member(1)",
              "docComment": "/**\n * Stores a right-handed orthographic projection into a given matrix\n *\n * @param left - defines the viewport left coordinate\n *\n * @param right - defines the viewport right coordinate\n *\n * @param bottom - defines the viewport bottom coordinate\n *\n * @param top - defines the viewport top coordinate\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static OrthoOffCenterRHToRef(left: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", bottom: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", top: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "bottom",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "top",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  }
                }
              ],
              "name": "OrthoOffCenterRHToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.PerspectiveFovLH:member(1)",
              "docComment": "/**\n * Creates a left-handed perspective projection matrix\n *\n * @param fov - defines the horizontal field of view\n *\n * @param aspect - defines the aspect ratio\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a left-handed perspective projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static PerspectiveFovLH(fov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", aspect: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "aspect",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "PerspectiveFovLH"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.PerspectiveFovLHToRef:member(1)",
              "docComment": "/**\n * Stores a left-handed perspective projection into a given matrix\n *\n * @param fov - defines the horizontal field of view\n *\n * @param aspect - defines the aspect ratio\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n *\n * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static PerspectiveFovLHToRef(fov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", aspect: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", isVerticalFovFixed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "aspect",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "isVerticalFovFixed",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                }
              ],
              "name": "PerspectiveFovLHToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.PerspectiveFovRH:member(1)",
              "docComment": "/**\n * Creates a right-handed perspective projection matrix\n *\n * @param fov - defines the horizontal field of view\n *\n * @param aspect - defines the aspect ratio\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a right-handed perspective projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static PerspectiveFovRH(fov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", aspect: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "aspect",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "PerspectiveFovRH"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.PerspectiveFovRHToRef:member(1)",
              "docComment": "/**\n * Stores a right-handed perspective projection into a given matrix\n *\n * @param fov - defines the horizontal field of view\n *\n * @param aspect - defines the aspect ratio\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n *\n * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static PerspectiveFovRHToRef(fov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", aspect: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", isVerticalFovFixed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "aspect",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "isVerticalFovFixed",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                }
              ],
              "name": "PerspectiveFovRHToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.PerspectiveFovWebVRToRef:member(1)",
              "docComment": "/**\n * Stores a perspective projection for WebVR info a given matrix\n *\n * @param fov - defines the field of view\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @param result - defines the target matrix\n *\n * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static PerspectiveFovWebVRToRef(fov: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        upDegrees: number;\n        downDegrees: number;\n        leftDegrees: number;\n        rightDegrees: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", rightHanded?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "rightHanded",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "PerspectiveFovWebVRToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.PerspectiveLH:member(1)",
              "docComment": "/**\n * Creates a left-handed perspective projection matrix\n *\n * @param width - defines the viewport width\n *\n * @param height - defines the viewport height\n *\n * @param znear - defines the near clip plane\n *\n * @param zfar - defines the far clip plane\n *\n * @returns a new matrix as a left-handed perspective projection matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static PerspectiveLH(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", znear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zfar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "znear",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "zfar",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "PerspectiveLH"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.Reflection:member(1)",
              "docComment": "/**\n * Computes a reflection matrix from a plane\n *\n * @param plane - defines the reflection plane\n *\n * @returns a new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Reflection(plane: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "Reflection"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.ReflectionToRef:member(1)",
              "docComment": "/**\n * Computes a reflection matrix from a plane\n *\n * @param plane - defines the reflection plane\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ReflectionToRef(plane: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "plane",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "ReflectionToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#removeRotationAndScaling:member(1)",
              "docComment": "/**\n * Remove rotation and scaling part from the matrix\n *\n * @returns the updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeRotationAndScaling(): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "removeRotationAndScaling"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#reset:member(1)",
              "docComment": "/**\n * Sets all the matrix elements to zero\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reset(): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reset"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.RotationAxis:member(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the given axis\n *\n * @param axis - defines the axis to use\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationAxis(axis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "RotationAxis"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.RotationAxisToRef:member(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\n *\n * @param axis - defines the axis to use\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationAxisToRef(axis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "RotationAxisToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.RotationX:member(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the X axis\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationX(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "RotationX"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.RotationXToRef:member(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationXToRef(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "RotationXToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.RotationY:member(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the Y axis\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationY(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "RotationY"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.RotationYawPitchRoll:member(1)",
              "docComment": "/**\n * Creates a rotation matrix\n *\n * @param yaw - defines the yaw angle in radians (Y axis)\n *\n * @param pitch - defines the pitch angle in radians (X axis)\n *\n * @param roll - defines the roll angle in radians (X axis)\n *\n * @returns the new rotation matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationYawPitchRoll(yaw: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roll: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "yaw",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pitch",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "roll",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "RotationYawPitchRoll"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.RotationYawPitchRollToRef:member(1)",
              "docComment": "/**\n * Creates a rotation matrix and stores it in a given matrix\n *\n * @param yaw - defines the yaw angle in radians (Y axis)\n *\n * @param pitch - defines the pitch angle in radians (X axis)\n *\n * @param roll - defines the roll angle in radians (X axis)\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationYawPitchRollToRef(yaw: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roll: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "yaw",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pitch",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "roll",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "RotationYawPitchRollToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.RotationYToRef:member(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationYToRef(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "RotationYToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.RotationZ:member(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the Z axis\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationZ(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "RotationZ"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.RotationZToRef:member(1)",
              "docComment": "/**\n * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\n *\n * @param angle - defines the angle (in radians) to use\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationZToRef(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "RotationZToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#scale:member(1)",
              "docComment": "/**\n * Compute a new matrix set with the current matrix values multiplied by scale (float)\n *\n * @param scale - defines the scale factor\n *\n * @returns a new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#scaleAndAddToRef:member(1)",
              "docComment": "/**\n * Scale the current matrix values by a factor and add the result to a given matrix\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the Matrix to store the result\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleAndAddToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#scaleToRef:member(1)",
              "docComment": "/**\n * Scale the current matrix values by a factor to a given result matrix\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the matrix to store the result\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.Scaling:member(1)",
              "docComment": "/**\n * Creates a scaling matrix\n *\n * @param x - defines the scale factor on X axis\n *\n * @param y - defines the scale factor on Y axis\n *\n * @param z - defines the scale factor on Z axis\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Scaling(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Scaling"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.ScalingToRef:member(1)",
              "docComment": "/**\n * Creates a scaling matrix and stores it in a given matrix\n *\n * @param x - defines the scale factor on X axis\n *\n * @param y - defines the scale factor on Y axis\n *\n * @param z - defines the scale factor on Z axis\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ScalingToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "ScalingToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#setRow:member(1)",
              "docComment": "/**\n * Sets the index-th row of the current matrix to the vector4 values\n *\n * @param index - defines the number of the row to set\n *\n * @param row - defines the target vector4\n *\n * @returns the updated current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRow(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", row: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "row",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setRow"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#setRowFromFloats:member(1)",
              "docComment": "/**\n * Sets the index-th row of the current matrix with the given 4 x float values\n *\n * @param index - defines the row index\n *\n * @param x - defines the x component to set\n *\n * @param y - defines the y component to set\n *\n * @param z - defines the z component to set\n *\n * @param w - defines the w component to set\n *\n * @returns the updated current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRowFromFloats(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "setRowFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#setTranslation:member(1)",
              "docComment": "/**\n * Inserts the translation vector in the current matrix\n *\n * @param vector3 - defines the translation to insert\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTranslation(vector3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector3",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setTranslation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#setTranslationFromFloats:member(1)",
              "docComment": "/**\n * Inserts the translation vector (using 3 floats) in the current matrix\n *\n * @param x - defines the 1st component of the translation\n *\n * @param y - defines the 2nd component of the translation\n *\n * @param z - defines the 3rd component of the translation\n *\n * @returns the current updated matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTranslationFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "setTranslationFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#toArray:member(1)",
              "docComment": "/**\n * Returns the matrix as a FloatArray\n *\n * @returns the matrix underlying array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArray(): "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#toggleModelMatrixHandInPlace:member(1)",
              "docComment": "/**\n * Toggles model matrix from being right handed to left handed in place and vice versa\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toggleModelMatrixHandInPlace(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toggleModelMatrixHandInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#toggleProjectionMatrixHandInPlace:member(1)",
              "docComment": "/**\n * Toggles projection matrix from being right handed to left handed in place and vice versa\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toggleProjectionMatrixHandInPlace(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toggleProjectionMatrixHandInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#toNormalMatrix:member(1)",
              "docComment": "/**\n * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\n *\n * @param ref - matrix to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toNormalMatrix(ref: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toNormalMatrix"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.Translation:member(1)",
              "docComment": "/**\n * Creates a translation matrix\n *\n * @param x - defines the translation on X axis\n *\n * @param y - defines the translation on Y axis\n *\n * @param z - defines the translationon Z axis\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Translation(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Translation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.TranslationToRef:member(1)",
              "docComment": "/**\n * Creates a translation matrix and stores it in a given matrix\n *\n * @param x - defines the translation on X axis\n *\n * @param y - defines the translation on Y axis\n *\n * @param z - defines the translationon Z axis\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TranslationToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "TranslationToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#transpose:member(1)",
              "docComment": "/**\n * Compute the transpose of the matrix\n *\n * @returns the new transposed matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transpose(): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "transpose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.Transpose:member(1)",
              "docComment": "/**\n * Compute the transpose of a given matrix\n *\n * @param matrix - defines the matrix to transpose\n *\n * @returns the new matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Transpose(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "Transpose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix#transposeToRef:member(1)",
              "docComment": "/**\n * Compute the transpose of the matrix and store it in a given matrix\n *\n * @param result - defines the target matrix\n *\n * @returns the current matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transposeToRef(result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "transposeToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.TransposeToRef:member(1)",
              "docComment": "/**\n * Compute the transpose of a matrix and store it in a target matrix\n *\n * @param matrix - defines the matrix to transpose\n *\n * @param result - defines the target matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TransposeToRef(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "TransposeToRef"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Matrix#updateFlag:member",
              "docComment": "/**\n * Gets the update flag of the matrix which is an unique number for the matrix. It will be incremented every time the matrix data change. You can use it to speed the comparison between two versions of the same matrix.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateFlag: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "updateFlag",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Matrix.Zero:member(1)",
              "docComment": "/**\n * Creates a new zero matrix\n *\n * @returns a new zero matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!Nullable:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Nullable<T> = "
            },
            {
              "kind": "Content",
              "text": "T | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Nullable",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/ecs-math!Orientation:enum",
          "docComment": "/**\n * Defines potential orientation for back face culling\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Orientation "
            }
          ],
          "releaseTag": "Public",
          "name": "Orientation",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/ecs-math!Orientation.CCW:member",
              "docComment": "/**\n * Counter clockwise\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CCW = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "CCW",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/ecs-math!Orientation.CW:member",
              "docComment": "/**\n * Clockwise\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CW = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "CW",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Path2:class",
          "docComment": "/**\n * Represents a 2D path made up of multiple 2D points\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Path2 "
            }
          ],
          "releaseTag": "Public",
          "name": "Path2",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Path2:constructor(1)",
              "docComment": "/**\n * Creates a Path2 object from the starting 2D coordinates x and y.\n *\n * @param x - the starting points x value\n *\n * @param y - the starting points y value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path2#addArcTo:member(1)",
              "docComment": "/**\n * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\n *\n * @param midX - middle point x value\n *\n * @param midY - middle point y value\n *\n * @param endX - end point x value\n *\n * @param endY - end point y value\n *\n * @param numberOfSegments - (default: 36)\n *\n * @returns the updated Path2.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addArcTo(midX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", midY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", endX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", endY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", numberOfSegments?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Path2",
                  "canonicalReference": "@dcl/ecs-math!Path2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "midX",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "midY",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "endX",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "endY",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "numberOfSegments",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "addArcTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path2#addLineTo:member(1)",
              "docComment": "/**\n * Adds a new segment until the given coordinates (x, y) to the current Path2.\n *\n * @param x - the added points x value\n *\n * @param y - the added points y value\n *\n * @returns the updated Path2.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addLineTo(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Path2",
                  "canonicalReference": "@dcl/ecs-math!Path2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addLineTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path2#close:member(1)",
              "docComment": "/**\n * Closes the Path2.\n *\n * @returns the Path2.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Reference",
                  "text": "Path2",
                  "canonicalReference": "@dcl/ecs-math!Path2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Path2#closed:member",
              "docComment": "/**\n * If the path start and end point are the same\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closed: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "closed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path2#getPointAtLengthPosition:member(1)",
              "docComment": "/**\n * Retreives the point at the distance aways from the starting point\n *\n * @param normalizedLengthPosition - the length along the path to retreive the point from\n *\n * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPointAtLengthPosition(normalizedLengthPosition: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "normalizedLengthPosition",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getPointAtLengthPosition"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path2#getPoints:member(1)",
              "docComment": "/**\n * Gets the points which construct the path\n *\n * @returns the Path2 internal array of points.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPoints(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getPoints"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path2#length:member(1)",
              "docComment": "/**\n * Gets the sum of the distance between each sequential point in the path\n *\n * @returns the Path2 total length (float).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "length(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "length"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path2.StartingAt:member(1)",
              "docComment": "/**\n * Creates a new path starting from an x and y position\n *\n * @param x - starting x value\n *\n * @param y - starting y value\n *\n * @returns a new Path2 starting at the coordinates (x, y).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static StartingAt(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Path2",
                  "canonicalReference": "@dcl/ecs-math!Path2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "StartingAt"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Path3D:class",
          "docComment": "/**\n * Represents a 3D path made up of multiple 3D points\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Path3D "
            }
          ],
          "releaseTag": "Public",
          "name": "Path3D",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Path3D:constructor(1)",
              "docComment": "/**\n * new Path3D(path, normal, raw) Creates a Path3D. A Path3D is a logical math object, so not a mesh. please read the description in the tutorial : http://doc.babylonjs.com/tutorials/How_to_use_Path3D\n *\n * @param path - an array of Vector3, the curve axis of the Path3D\n *\n * @param normal - (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\n *\n * @param raw - (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    path: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", firstNormal?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@dcl/ecs-math!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", raw?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "firstNormal",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "raw",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path3D#getBinormals:member(1)",
              "docComment": "/**\n * Returns an array populated with binormal vectors on each Path3D curve point.\n *\n * @returns an array populated with binormal vectors on each Path3D curve point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getBinormals(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getBinormals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path3D#getCurve:member(1)",
              "docComment": "/**\n * Returns the Path3D array of successive Vector3 designing its curve.\n *\n * @returns the Path3D array of successive Vector3 designing its curve.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCurve(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCurve"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path3D#getDistances:member(1)",
              "docComment": "/**\n * Returns an array populated with distances (float) of the i-th point from the first curve point.\n *\n * @returns an array populated with distances (float) of the i-th point from the first curve point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDistances(): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getDistances"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path3D#getNormals:member(1)",
              "docComment": "/**\n * Returns an array populated with normal vectors on each Path3D curve point.\n *\n * @returns an array populated with normal vectors on each Path3D curve point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNormals(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getNormals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path3D#getTangents:member(1)",
              "docComment": "/**\n * Returns an array populated with tangent vectors on each Path3D curve point.\n *\n * @returns an array populated with tangent vectors on each Path3D curve point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTangents(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTangents"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Path3D#path:member",
              "docComment": "/**\n * an array of Vector3, the curve axis of the Path3D\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Path3D#update:member(1)",
              "docComment": "/**\n * Forces the Path3D tangent, normal, binormal and distance recomputation.\n *\n * @param path - path which all values are copied into the curves points\n *\n * @param firstNormal - which should be projected onto the curve\n *\n * @returns the same object updated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "update(path: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", firstNormal?: "
                },
                {
                  "kind": "Reference",
                  "text": "Nullable",
                  "canonicalReference": "@dcl/ecs-math!Nullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Path3D",
                  "canonicalReference": "@dcl/ecs-math!Path3D:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "firstNormal",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 8
                  }
                }
              ],
              "name": "update"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Plane:class",
          "docComment": "/**\n * Represens a plane by the equation ax + by + cz + d = 0\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Plane "
            }
          ],
          "releaseTag": "Public",
          "name": "Plane",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Plane:constructor(1)",
              "docComment": "/**\n * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\n *\n * @param a - a component of the plane\n *\n * @param b - b component of the plane\n *\n * @param c - c component of the plane\n *\n * @param d - d component of the plane\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", c: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", d: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "c",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "d",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane#asArray:member(1)",
              "docComment": "/**\n * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asArray(): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "asArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane#clone:member(1)",
              "docComment": "/**\n * @returns a new plane copied from the current Plane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane#copyFromPoints:member(1)",
              "docComment": "/**\n * Updates the current Plane from the plane defined by the three given points.\n *\n * @param point1 - one of the points used to contruct the plane\n *\n * @param point2 - one of the points used to contruct the plane\n *\n * @param point3 - one of the points used to contruct the plane\n *\n * @returns the updated Plane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFromPoints(point1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", point2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", point3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "point2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "point3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "copyFromPoints"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Plane#d:member",
              "docComment": "/**\n * d component of the plane\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "d: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "d",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane#dotCoordinate:member(1)",
              "docComment": "/**\n * Calcualtte the dot product between the point and the plane normal\n *\n * @param point - point to calculate the dot product with\n *\n * @returns the dot product (float) of the point coordinates and the plane normal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dotCoordinate(point: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "dotCoordinate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane.FromArray:member(1)",
              "docComment": "/**\n * Creates a plane from an array\n *\n * @param array - the array to create a plane from\n *\n * @returns a new Plane from the given array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "FromArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane.FromPoints:member(1)",
              "docComment": "/**\n * Creates a plane from three points\n *\n * @param point1 - point used to create the plane\n *\n * @param point2 - point used to create the plane\n *\n * @param point3 - point used to create the plane\n *\n * @returns a new Plane defined by the three given points.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromPoints(point1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", point2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", point3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "point2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "point3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "FromPoints"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane.FromPositionAndNormal:member(1)",
              "docComment": "/**\n * Creates a plane from an origin point and a normal\n *\n * @param origin - origin of the plane to be constructed\n *\n * @param normal - normal of the plane to be constructed\n *\n * @returns a new Plane the normal vector to this plane at the given origin point. Note : the vector \"normal\" is updated because normalized.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromPositionAndNormal(origin: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", normal: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "origin",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "normal",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "FromPositionAndNormal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane#getClassName:member(1)",
              "docComment": "/**\n * @returns the string \"Plane\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClassName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getClassName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane#getHashCode:member(1)",
              "docComment": "/**\n * @returns the Plane hash code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHashCode(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getHashCode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane#isFrontFacingTo:member(1)",
              "docComment": "/**\n * Checks if the plane is facing a given direction\n *\n * @param direction - the direction to check if the plane is facing\n *\n * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)\n *\n * @returns True is the vector \"direction\" is the same side than the plane normal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFrontFacingTo(direction: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", epsilon: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "direction",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "epsilon",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "isFrontFacingTo"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Plane#normal:member",
              "docComment": "/**\n * Normal of the plane (a,b,c)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normal: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "normal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane#normalize:member(1)",
              "docComment": "/**\n * Normalize the current Plane in place.\n *\n * @returns the updated Plane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalize(): "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "normalize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane#signedDistanceTo:member(1)",
              "docComment": "/**\n * Calculates the distance to a point\n *\n * @param point - point to calculate distance to\n *\n * @returns the signed distance (float) from the given point to the Plane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "signedDistanceTo(point: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "signedDistanceTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane.SignedDistanceToPlaneFromPositionAndNormal:member(1)",
              "docComment": "/**\n * Calculates the distance from a plane and a point\n *\n * @param origin - origin of the plane to be constructed\n *\n * @param normal - normal of the plane to be constructed\n *\n * @param point - point to calculate distance to\n *\n * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static SignedDistanceToPlaneFromPositionAndNormal(origin: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", normal: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", point: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "origin",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "normal",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "SignedDistanceToPlaneFromPositionAndNormal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Plane#transform:member(1)",
              "docComment": "/**\n * Applies a transformation the plane and returns the result\n *\n * @param transformation - the transformation matrix to be applied to the plane\n *\n * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transform(transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "@dcl/ecs-math!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "transform"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Quaternion:class",
          "docComment": "/**\n * Class used to store quaternion data {@link https://en.wikipedia.org/wiki/Quaternion} {@link http://doc.babylonjs.com/features/position,_rotation,_scaling}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Quaternion implements "
            },
            {
              "kind": "Reference",
              "text": "EcsMathReadOnlyQuaternion",
              "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Quaternion",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Quaternion:constructor(1)",
              "docComment": "/**\n * Creates a new Quaternion from the given floats\n *\n * @param x - defines the first component (0 by default)\n *\n * @param y - defines the second component (0 by default)\n *\n * @param z - defines the third component (0 by default)\n *\n * @param w - defines the fourth component (1.0 by default)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    x?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    y?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    z?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    w?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.Angle:member(1)",
              "docComment": "/**\n * Returns the angle in degrees between two rotations a and b.\n *\n * @param quat1 - defines the first quaternion\n *\n * @param quat2 - defines the second quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Angle(quat1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", quat2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "quat1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "quat2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Angle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#angleAxis:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "angleAxis(degress: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", axis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "degress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "angleAxis"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.AreClose:member(1)",
              "docComment": "/**\n * Checks if the two quaternions are close to each other\n *\n * @param quat0 - defines the first quaternion to check\n *\n * @param quat1 - defines the second quaternion to check\n *\n * @returns true if the two quaternions are close to each other\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static AreClose(quat0: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", quat1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "quat0",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "quat1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "AreClose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#asArray:member(1)",
              "docComment": "/**\n * Copy the quaternion to an array\n *\n * @returns a new array populated with 4 elements from the quaternion coordinates\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asArray(): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "asArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#clone:member(1)",
              "docComment": "/**\n * Clone the current quaternion\n *\n * @returns a new quaternion copied from the current one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#conjugate:member(1)",
              "docComment": "/**\n * Conjugates in place (1-q) the current quaternion\n *\n * @returns a new quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "conjugate(): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "conjugate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#conjugateInPlace:member(1)",
              "docComment": "/**\n * Conjugates in place (1-q) the current quaternion\n *\n * @returns the current updated quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "conjugateInPlace(): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "conjugateInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#conjugateToRef:member(1)",
              "docComment": "/**\n * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\n *\n * @param ref - defines the target quaternion\n *\n * @returns the current quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "conjugateToRef(ref: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "conjugateToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#copyFrom:member(1)",
              "docComment": "/**\n * Copy a quaternion to the current one\n *\n * @param other - defines the other quaternion\n *\n * @returns the updated current quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFrom(other: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#copyFromFloats:member(1)",
              "docComment": "/**\n * Updates the current quaternion with the given float coordinates\n *\n * @param x - defines the x coordinate\n *\n * @param y - defines the y coordinate\n *\n * @param z - defines the z coordinate\n *\n * @param w - defines the w coordinate\n *\n * @returns the updated current quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "copyFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.Dot:member(1)",
              "docComment": "/**\n * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @returns the dot product\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Dot(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Dot"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#equals:member(1)",
              "docComment": "/**\n * Check if two quaternions are equals\n *\n * @param otherQuaternion - defines the second operand\n *\n * @returns true if the current quaternion and the given one coordinates are strictly equals\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(otherQuaternion: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherQuaternion",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.Euler:member(1)",
              "docComment": "/**\n * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n *\n * @param x - the rotation on the x axis in euler degrees\n *\n * @param y - the rotation on the y axis in euler degrees\n *\n * @param z - the rotation on the z axis in euler degrees\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Euler(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Euler"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Quaternion#eulerAngles:member",
              "docComment": "/**\n * Gets or sets the euler angle representation of the rotation. Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get eulerAngles(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset eulerAngles(euler: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eulerAngles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.FromArray:member(1)",
              "docComment": "/**\n * Creates a new quaternion from data stored into an array\n *\n * @param array - defines the data source\n *\n * @param offset - defines the offset in the source array where the data starts\n *\n * @returns a new quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "FromArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.FromEulerAnglesRef:member(1)",
              "docComment": "/**\n * Creates a new quaternion from a set of euler angles and stores it in the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromEulerAnglesRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "FromEulerAnglesRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#fromRotationMatrix:member(1)",
              "docComment": "/**\n * Updates the current quaternion from the given rotation matrix values\n *\n * @param matrix - defines the source matrix\n *\n * @returns the current updated quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fromRotationMatrix(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromRotationMatrix"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.FromRotationMatrix:member(1)",
              "docComment": "/**\n * Creates a new quaternion from a rotation matrix\n *\n * @param matrix - defines the source matrix\n *\n * @returns a new quaternion created from the given rotation matrix values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromRotationMatrix(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "FromRotationMatrix"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.FromRotationMatrixToRef:member(1)",
              "docComment": "/**\n * Updates the given quaternion with the given rotation matrix values\n *\n * @param matrix - defines the source matrix\n *\n * @param result - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromRotationMatrixToRef(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "FromRotationMatrixToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.FromToRotation:member(1)",
              "docComment": "/**\n * Creates a rotation which rotates from fromDirection to toDirection.\n *\n * @param from - defines the first direction Vector\n *\n * @param to - defines the target direction Vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromToRotation(from: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", up?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "FromToRotation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#getClassName:member(1)",
              "docComment": "/**\n * Gets the class name of the quaternion\n *\n * @returns the string \"Quaternion\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClassName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getClassName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#getHashCode:member(1)",
              "docComment": "/**\n * Gets a hash code for this quaternion\n *\n * @returns the quaternion hash code\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHashCode(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getHashCode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.Hermite:member(1)",
              "docComment": "/**\n * Interpolate between two quaternions using Hermite interpolation\n *\n * @param value1 - defines first quaternion\n *\n * @param tangent1 - defines the incoming tangent\n *\n * @param value2 - defines second quaternion\n *\n * @param tangent2 - defines the outgoing tangent\n *\n * @param amount - defines the target quaternion\n *\n * @returns the new interpolated quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Hermite(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", tangent1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", tangent2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tangent1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "tangent2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "Hermite"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Quaternion.Identity:member",
              "docComment": "/**\n * Creates an identity quaternion\n *\n * @returns - the identity quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static get Identity(): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Identity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.Inverse:member(1)",
              "docComment": "/**\n * Inverse a given quaternion\n *\n * @param q - defines the source quaternion\n *\n * @returns a new quaternion as the inverted current quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Inverse(q: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "Inverse"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.IsIdentity:member(1)",
              "docComment": "/**\n * Gets a boolean indicating if the given quaternion is identity\n *\n * @param quaternion - defines the quaternion to check\n *\n * @returns true if the quaternion is identity\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static IsIdentity(quaternion: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "quaternion",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "IsIdentity"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Quaternion#length:member",
              "docComment": "/**\n * Gets length of current quaternion\n *\n * @returns the quaternion length (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get length(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "length",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Quaternion#lengthSquared:member",
              "docComment": "/**\n * Gets length of current quaternion\n *\n * @returns the quaternion length (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get lengthSquared(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lengthSquared",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.LookRotation:member(1)",
              "docComment": "/**\n * Creates a rotation with the specified forward and upwards directions.\n *\n * @param forward - the direction to look in\n *\n * @param up - the vector that defines in which direction up is\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static LookRotation(forward: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", up?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forward",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "LookRotation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#multiply:member(1)",
              "docComment": "/**\n * Multiplies two quaternions\n *\n * @param q1 - defines the second operand\n *\n * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiply(q1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#multiplyInPlace:member(1)",
              "docComment": "/**\n * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\n *\n * @param q1 - defines the second operand\n *\n * @returns the currentupdated quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyInPlace(q1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "multiplyInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#multiplyToRef:member(1)",
              "docComment": "/**\n * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\n *\n * @param q1 - defines the second operand\n *\n * @param result - defines the target quaternion\n *\n * @returns the current quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyToRef(q1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#normalize:member(1)",
              "docComment": "/**\n * Normalize in place the current quaternion\n *\n * @returns the current updated quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalize(): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "normalize"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Quaternion#normalized:member",
              "docComment": "/**\n * Converts this quaternion to one with the same orientation but with a magnitude of 1.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get normalized(): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "normalized",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.RotateTowards:member(1)",
              "docComment": "/**\n * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n *\n * @param from - defines the first quaternion\n *\n * @param to - defines the second quaternion\n *\n * @param maxDegreesDelta - the interval step\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotateTowards(from: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ", maxDegreesDelta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "maxDegreesDelta",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "RotateTowards"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.RotationAlphaBetaGamma:member(1)",
              "docComment": "/**\n * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\n *\n * @param alpha - defines the rotation around first axis\n *\n * @param beta - defines the rotation around second axis\n *\n * @param gamma - defines the rotation around third axis\n *\n * @returns the new quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationAlphaBetaGamma(alpha: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", beta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", gamma: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "alpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "beta",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "gamma",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "RotationAlphaBetaGamma"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.RotationAlphaBetaGammaToRef:member(1)",
              "docComment": "/**\n * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\n *\n * @param alpha - defines the rotation around first axis\n *\n * @param beta - defines the rotation around second axis\n *\n * @param gamma - defines the rotation around third axis\n *\n * @param result - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationAlphaBetaGammaToRef(alpha: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", beta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", gamma: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "alpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "beta",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "gamma",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "RotationAlphaBetaGammaToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.RotationAxis:member(1)",
              "docComment": "/**\n * Creates a quaternion from a rotation around an axis\n *\n * @param axis - defines the axis to use\n *\n * @param angle - defines the angle to use (in Euler degrees)\n *\n * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationAxis(axis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "RotationAxis"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.RotationAxisToRef:member(1)",
              "docComment": "/**\n * Creates a rotation around an axis and stores it into the given quaternion\n *\n * @param axis - defines the axis to use\n *\n * @param angle - defines the angle to use (in Euler degrees)\n *\n * @param result - defines the target quaternion\n *\n * @returns the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationAxisToRef(axis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "RotationAxisToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.RotationQuaternionFromAxis:member(1)",
              "docComment": "/**\n * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @returns the new quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationQuaternionFromAxis(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "RotationQuaternionFromAxis"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.RotationQuaternionFromAxisToRef:member(1)",
              "docComment": "/**\n * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @param ref - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationQuaternionFromAxisToRef(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", ref: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "RotationQuaternionFromAxisToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.RotationYawPitchRoll:member(1)",
              "docComment": "/**\n * Creates a new quaternion from the given Euler float angles (y, x, z)\n *\n * @param yaw - defines the rotation around Y axis\n *\n * @param pitch - defines the rotation around X axis\n *\n * @param roll - defines the rotation around Z axis\n *\n * @returns the new quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationYawPitchRoll(yaw: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roll: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "yaw",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pitch",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "roll",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "RotationYawPitchRoll"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.RotationYawPitchRollToRef:member(1)",
              "docComment": "/**\n * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n *\n * @param yaw - defines the rotation around Y axis\n *\n * @param pitch - defines the rotation around X axis\n *\n * @param roll - defines the rotation around Z axis\n *\n * @param result - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationYawPitchRollToRef(yaw: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", roll: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "yaw",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pitch",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "roll",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "RotationYawPitchRollToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#scale:member(1)",
              "docComment": "/**\n * Multiplies the current quaternion by a scale factor\n *\n * @param value - defines the scale factor\n *\n * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#scaleAndAddToRef:member(1)",
              "docComment": "/**\n * Scale the current quaternion values by a factor and add the result to a given quaternion\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the Quaternion object where to store the result\n *\n * @returns the unmodified current quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleAndAddToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#scaleInPlace:member(1)",
              "docComment": "/**\n * Multiplies in place the current quaternion by a scale factor\n *\n * @param value - defines the scale factor\n *\n * @returns the current modified quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleInPlace(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scaleInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#scaleToRef:member(1)",
              "docComment": "/**\n * Scale the current quaternion values by a factor and stores the result to a given quaternion\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the Quaternion object where to store the result\n *\n * @returns the unmodified current quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#set:member(1)",
              "docComment": "/**\n * Updates the current quaternion from the given float coordinates\n *\n * @param x - defines the x coordinate\n *\n * @param y - defines the y coordinate\n *\n * @param z - defines the z coordinate\n *\n * @param w - defines the w coordinate\n *\n * @returns the updated current quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#setEuler:member(1)",
              "docComment": "/**\n * Updates the current quaternion from the given euler angles\n *\n * @returns the updated current quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setEuler(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "setEuler"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#setFromToRotation:member(1)",
              "docComment": "/**\n * Creates a rotation which rotates from fromDirection to toDirection.\n *\n * @param from - defines the first Vector\n *\n * @param to - defines the second Vector\n *\n * @param up - defines the direction\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setFromToRotation(from: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", up?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "up",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "setFromToRotation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.Slerp:member(1)",
              "docComment": "/**\n * Interpolates between two quaternions\n *\n * @param left - defines first quaternion\n *\n * @param right - defines second quaternion\n *\n * @param amount - defines the gradient to use\n *\n * @returns the new interpolated quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Slerp(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Slerp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.SlerpToRef:member(1)",
              "docComment": "/**\n * Interpolates between two quaternions and stores it into a target quaternion\n *\n * @param left - defines first quaternion\n *\n * @param right - defines second quaternion\n *\n * @param amount - defines the gradient to use\n *\n * @param result - defines the target quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static SlerpToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyQuaternion",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyQuaternion:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "SlerpToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#subtract:member(1)",
              "docComment": "/**\n * Subtract two quaternions\n *\n * @param other - defines the second operand\n *\n * @returns a new quaternion as the subtraction result of the given one from the current one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtract(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#toRotationMatrix:member(1)",
              "docComment": "/**\n * Updates the given rotation matrix with the current quaternion values\n *\n * @param result - defines the target matrix\n *\n * @returns the current unchanged quaternion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toRotationMatrix(result: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toRotationMatrix"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion#toString:member(1)",
              "docComment": "/**\n * Gets a string representation for the current quaternion\n *\n * @returns a string with the Quaternion coordinates\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Quaternion#w:member",
              "docComment": "/**\n * defines the fourth component (1.0 by default)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "w",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Quaternion#x:member",
              "docComment": "/**\n * defines the first component (0 by default)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Quaternion#y:member",
              "docComment": "/**\n * defines the second component (0 by default)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Quaternion#z:member",
              "docComment": "/**\n * defines the third component (0 by default)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "z",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Quaternion.Zero:member(1)",
              "docComment": "/**\n * Creates an empty quaternion\n *\n * @returns a new quaternion set to (0.0, 0.0, 0.0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/ecs-math!RAD2DEG:var",
          "docComment": "/**\n * Constant used to convert from radians to Euler degrees\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RAD2DEG: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "releaseTag": "Public",
          "name": "RAD2DEG",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@dcl/ecs-math!ReadOnlyColor4:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ReadOnlyColor4 = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly r: number;\n    readonly g: number;\n    readonly b: number;\n    readonly a: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ReadOnlyColor4",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Scalar:class",
          "docComment": "/**\n * Scalar computation library\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Scalar "
            }
          ],
          "releaseTag": "Public",
          "name": "Scalar",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.Clamp:member(1)",
              "docComment": "/**\n * Returns the value itself if it's between min and max. Returns min if the value is lower than min. Returns max if the value is greater than max.\n *\n * @param value - the value to clmap\n *\n * @param min - the min value to clamp to (default: 0)\n *\n * @param max - the max value to clamp to (default: 1)\n *\n * @returns the clamped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Clamp(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Clamp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.DeltaAngle:member(1)",
              "docComment": "/**\n * Calculates the shortest difference between two given angles given in degrees.\n *\n * @param current - current angle in degrees\n *\n * @param target - target angle in degrees\n *\n * @returns the delta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static DeltaAngle(current: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "current",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "DeltaAngle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.Denormalize:member(1)",
              "docComment": "/**\n * Denormalize the value from 0.0 and 1.0 using min and max values\n *\n * @param normalized - value to denormalize\n *\n * @param min - max to denormalize between\n *\n * @param max - min to denormalize between\n *\n * @returns the denormalized value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Denormalize(normalized: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "normalized",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Denormalize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.Hermite:member(1)",
              "docComment": "/**\n * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\". {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n *\n * @param value1 - spline value\n *\n * @param tangent1 - spline value\n *\n * @param value2 - spline value\n *\n * @param tangent2 - spline value\n *\n * @param amount - input value\n *\n * @returns hermite result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Hermite(value1: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tangent1: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tangent2: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tangent1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "tangent2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "Hermite"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.InverseLerp:member(1)",
              "docComment": "/**\n * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n *\n * @param a - start value\n *\n * @param b - target value\n *\n * @param value - value between a and b\n *\n * @returns the inverseLerp value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static InverseLerp(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "InverseLerp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.Lerp:member(1)",
              "docComment": "/**\n * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar.\n *\n * @param start - start value\n *\n * @param end - target value\n *\n * @param amount - amount to lerp between\n *\n * @returns the lerped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Lerp(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Lerp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.LerpAngle:member(1)",
              "docComment": "/**\n * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees. The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n *\n * @param start - start value\n *\n * @param end - target value\n *\n * @param amount - amount to lerp between\n *\n * @returns the lerped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static LerpAngle(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "LerpAngle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.Log2:member(1)",
              "docComment": "/**\n * the log2 of value.\n *\n * @param value - the value to compute log2 of\n *\n * @returns the log2 of value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Log2(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "Log2"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.MoveTowards:member(1)",
              "docComment": "/**\n * Moves a value current towards target.\n *\n * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta. Negative values of maxDelta pushes the value away from target.\n *\n * @param current - current value\n *\n * @param target - target value\n *\n * @param maxDelta - max distance to move\n *\n * @returns resulting value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static MoveTowards(current: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", maxDelta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "current",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "maxDelta",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "MoveTowards"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.MoveTowardsAngle:member(1)",
              "docComment": "/**\n * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n *\n * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n *\n * @param current - current value\n *\n * @param target - target value\n *\n * @param maxDelta - max distance to move\n *\n * @returns resulting angle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static MoveTowardsAngle(current: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", maxDelta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "current",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "maxDelta",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "MoveTowardsAngle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.Normalize:member(1)",
              "docComment": "/**\n * Normalize the value between 0.0 and 1.0 using min and max values\n *\n * @param value - value to normalize\n *\n * @param min - max to normalize between\n *\n * @param max - min to normalize between\n *\n * @returns the normalized value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Normalize(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Normalize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.NormalizeRadians:member(1)",
              "docComment": "/**\n * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n *\n * @param angle - The angle to normalize in radian.\n *\n * @returns The converted angle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static NormalizeRadians(angle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "angle",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "NormalizeRadians"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.PercentToRange:member(1)",
              "docComment": "/**\n * This function returns number that corresponds to the percentage in a given range.\n *\n * PercentToRange(0.34,0,100) will return 34.\n *\n * @param percent - to convert to number\n *\n * @param min - min range\n *\n * @param max - max range\n *\n * @returns the number\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static PercentToRange(percent: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "percent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "PercentToRange"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.PingPong:member(1)",
              "docComment": "/**\n * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n *\n * @param tx - value\n *\n * @param length - length\n *\n * @returns The returned value will move back and forth between 0 and length\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static PingPong(tx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", length: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tx",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "length",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "PingPong"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.RandomRange:member(1)",
              "docComment": "/**\n * Returns a random float number between and min and max values\n *\n * @param min - min value of random\n *\n * @param max - max value of random\n *\n * @returns random value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RandomRange(min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "RandomRange"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.RangeToPercent:member(1)",
              "docComment": "/**\n * This function returns percentage of a number in a given range.\n *\n * RangeToPercent(40,20,60) will return 0.5 (50%) RangeToPercent(34,0,100) will return 0.34 (34%)\n *\n * @param num - to convert to percentage\n *\n * @param min - min range\n *\n * @param max - max range\n *\n * @returns the percentage\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RangeToPercent(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "RangeToPercent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.Repeat:member(1)",
              "docComment": "/**\n * Loops the value, so that it is never larger than length and never smaller than 0.\n *\n * This is similar to the modulo operator but it works with floating point numbers. For example, using 3.0 for t and 2.5 for length, the result would be 0.5. With t = 5 and length = 2.5, the result would be 0.0. Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n *\n * @param value - the value\n *\n * @param length - the length\n *\n * @returns the looped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Repeat(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", length: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "length",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Repeat"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.Sign:member(1)",
              "docComment": "/**\n * Returns -1 if value is negative and +1 is value is positive.\n *\n * @param _value - the value\n *\n * @returns the value itself if it's equal to zero.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Sign(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "Sign"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.SmoothStep:member(1)",
              "docComment": "/**\n * Interpolates between min and max with smoothing at the limits.\n *\n * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n *\n * @param from - from\n *\n * @param to - to\n *\n * @param tx - value\n *\n * @returns the smooth stepped value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static SmoothStep(from: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "tx",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "SmoothStep"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.ToHex:member(1)",
              "docComment": "/**\n * Returns a string : the upper case translation of the number i to hexadecimal.\n *\n * @param i - number\n *\n * @returns the upper case translation of the number i to hexadecimal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ToHex(i: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "i",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "ToHex"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Scalar.TwoPi:member",
              "docComment": "/**\n * Two pi constants convenient for computation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TwoPi: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "TwoPi",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Scalar.WithinEpsilon:member(1)",
              "docComment": "/**\n * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n *\n * @param a - number\n *\n * @param b - number\n *\n * @param epsilon - (default = 1.401298E-45)\n *\n * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static WithinEpsilon(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", epsilon?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "epsilon",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "WithinEpsilon"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Size:class",
          "docComment": "/**\n * Size containing widht and height\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Size implements "
            },
            {
              "kind": "Reference",
              "text": "ISize",
              "canonicalReference": "@dcl/ecs-math!ISize:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Size",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Size:constructor(1)",
              "docComment": "/**\n * Creates a Size object from the given width and height (floats).\n *\n * @param width - width of the new size\n *\n * @param height - height of the new size\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size#add:member(1)",
              "docComment": "/**\n * Sums the width and height of two sizes\n *\n * @param otherSize - size to add to this size\n *\n * @returns a new Size set as the addition result of the current Size and the given one.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(otherSize: "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherSize",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size#clone:member(1)",
              "docComment": "/**\n * Clones the size\n *\n * @returns a new Size copied from the given one.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size#copyFrom:member(1)",
              "docComment": "/**\n * Updates the current size from the given one.\n *\n * @param src - the given size\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFrom(src: "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "src",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size#copyFromFloats:member(1)",
              "docComment": "/**\n * Updates in place the current Size from the given floats.\n *\n * @param width - width of the new size\n *\n * @param height - height of the new size\n *\n * @returns the updated Size.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFromFloats(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "copyFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size#equals:member(1)",
              "docComment": "/**\n * True if the current Size and the given one width and height are strictly equal.\n *\n * @param other - the other size to compare against\n *\n * @returns True if the current Size and the given one width and height are strictly equal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size#getClassName:member(1)",
              "docComment": "/**\n * \"Size\"\n *\n * @returns the string \"Size\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClassName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getClassName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size#getHashCode:member(1)",
              "docComment": "/**\n * Returns the Size hash code.\n *\n * @returns a hash code for a unique width and height\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHashCode(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getHashCode"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Size#height:member",
              "docComment": "/**\n * Height\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size.Lerp:member(1)",
              "docComment": "/**\n * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n *\n * @param start - starting size to lerp between\n *\n * @param end - end size to lerp between\n *\n * @param amount - amount to lerp between the start and end values\n *\n * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Lerp(start: "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Lerp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size#multiplyByFloats:member(1)",
              "docComment": "/**\n * Multiplies the width and height by numbers\n *\n * @param w - factor to multiple the width by\n *\n * @param h - factor to multiple the height by\n *\n * @returns a new Size set with the multiplication result of the current Size and the given floats.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyByFloats(w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", h: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "h",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiplyByFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size#set:member(1)",
              "docComment": "/**\n * Updates in place the current Size from the given floats.\n *\n * @param width - width to set\n *\n * @param height - height to set\n *\n * @returns the updated Size.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size#subtract:member(1)",
              "docComment": "/**\n * Subtracts the width and height of two\n *\n * @param otherSize - size to subtract to this size\n *\n * @returns a new Size set as the subtraction result of the given one from the current Size.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtract(otherSize: "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherSize",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Size#surface:member",
              "docComment": "/**\n * The surface of the Size : width * height (float).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get surface(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "surface",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size#toString:member(1)",
              "docComment": "/**\n * Returns a string with the Size width and height\n *\n * @returns a string with the Size width and height\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Size#width:member",
              "docComment": "/**\n * Width\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Size.Zero:member(1)",
              "docComment": "/**\n * Create a new size of zero\n *\n * @returns a new Size set to (0.0, 0.0)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "Size",
                  "canonicalReference": "@dcl/ecs-math!Size:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@dcl/ecs-math!Space:enum",
          "docComment": "/**\n * Defines supported spaces\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Space "
            }
          ],
          "releaseTag": "Public",
          "name": "Space",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/ecs-math!Space.BONE:member",
              "docComment": "/**\n * Bone space\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BONE = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "BONE",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/ecs-math!Space.LOCAL:member",
              "docComment": "/**\n * Local (object) space\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LOCAL = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "LOCAL",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@dcl/ecs-math!Space.WORLD:member",
              "docComment": "/**\n * World space\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "WORLD = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "WORLD",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/ecs-math!ToGammaSpace:var",
          "docComment": "/**\n * Constant used to convert a value to gamma space\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ToGammaSpace: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "releaseTag": "Public",
          "name": "ToGammaSpace",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@dcl/ecs-math!ToLinearSpace:var",
          "docComment": "/**\n * Constant used to convert a value to linear space\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ToLinearSpace = 2.2"
            }
          ],
          "releaseTag": "Public",
          "name": "ToLinearSpace",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Vector2:class",
          "docComment": "/**\n * Class representing a vector containing 2 coordinates\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Vector2 implements "
            },
            {
              "kind": "Reference",
              "text": "EcsMathReadOnlyVector2",
              "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Vector2",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Vector2:constructor(1)",
              "docComment": "/**\n * Creates a new Vector2 from the given x and y coordinates\n *\n * @param x - defines the first coordinate\n *\n * @param y - defines the second coordinate\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    x?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    y?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#add:member(1)",
              "docComment": "/**\n * Add another vector with the current one\n *\n * @param otherVector - defines the other vector\n *\n * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Add:member(1)",
              "docComment": "/**\n * Returns a new Vector2 as the result of the addition of the two given vectors.\n *\n * @param vector1 - the first vector\n *\n * @param vector2 - the second vector\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Add(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#addInPlace:member(1)",
              "docComment": "/**\n * Set the Vector2 coordinates by adding the given Vector2 coordinates\n *\n * @param otherVector - defines the other vector\n *\n * @returns the current updated Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#addToRef:member(1)",
              "docComment": "/**\n * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\n *\n * @param otherVector - defines the other vector\n *\n * @param result - defines the target vector\n *\n * @returns the unmodified current Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#addVector3:member(1)",
              "docComment": "/**\n * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\n *\n * @param otherVector - defines the other vector\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addVector3(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addVector3"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#asArray:member(1)",
              "docComment": "/**\n * Copy the current vector to an array\n *\n * @returns a new array with 2 elements: the Vector2 coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asArray(): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "asArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.CatmullRom:member(1)",
              "docComment": "/**\n * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\n *\n * @param value1 - defines 1st point of control\n *\n * @param value2 - defines 2nd point of control\n *\n * @param value3 - defines 3rd point of control\n *\n * @param value4 - defines 4th point of control\n *\n * @param amount - defines the interpolation factor\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static CatmullRom(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", value3: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", value4: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "value4",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "CatmullRom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Center:member(1)",
              "docComment": "/**\n * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\n *\n * @param value1 - defines first vector\n *\n * @param value2 - defines second vector\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Center(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Center"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Clamp:member(1)",
              "docComment": "/**\n * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\". If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate. If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\n *\n * @param value - defines the value to clamp\n *\n * @param min - defines the lower limit\n *\n * @param max - defines the upper limit\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Clamp(value: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Clamp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#clone:member(1)",
              "docComment": "/**\n * Gets a new Vector2 copied from the Vector2\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#copyFrom:member(1)",
              "docComment": "/**\n * Sets the Vector2 coordinates with the given Vector2 coordinates\n *\n * @param source - defines the source Vector2\n *\n * @returns the current updated Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFrom(source: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#copyFromFloats:member(1)",
              "docComment": "/**\n * Sets the Vector2 coordinates with the given floats\n *\n * @param x - defines the first coordinate\n *\n * @param y - defines the second coordinate\n *\n * @returns the current updated Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "copyFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Distance:member(1)",
              "docComment": "/**\n * Gets the distance between the vectors \"value1\" and \"value2\"\n *\n * @param value1 - defines first vector\n *\n * @param value2 - defines second vector\n *\n * @returns the distance between vectors\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Distance(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Distance"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.DistanceOfPointFromSegment:member(1)",
              "docComment": "/**\n * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\n *\n * @param p - defines the middle point\n *\n * @param segA - defines one point of the segment\n *\n * @param segB - defines the other point of the segment\n *\n * @returns the shortest distance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static DistanceOfPointFromSegment(p: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", segA: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", segB: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "segA",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "segB",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "DistanceOfPointFromSegment"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.DistanceSquared:member(1)",
              "docComment": "/**\n * Returns the squared distance between the vectors \"value1\" and \"value2\"\n *\n * @param value1 - defines first vector\n *\n * @param value2 - defines second vector\n *\n * @returns the squared distance between vectors\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static DistanceSquared(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "DistanceSquared"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#divide:member(1)",
              "docComment": "/**\n * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\n *\n * @param otherVector - defines the other vector\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divide(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "divide"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#divideInPlace:member(1)",
              "docComment": "/**\n * Divides the current Vector2 coordinates by the given ones\n *\n * @param otherVector - defines the other vector\n *\n * @returns the current updated Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divideInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "divideInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#divideToRef:member(1)",
              "docComment": "/**\n * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\n *\n * @param otherVector - defines the other vector\n *\n * @param result - defines the target vector\n *\n * @returns the unmodified current Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divideToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "divideToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Dot:member(1)",
              "docComment": "/**\n * Gets the dot product of the vector \"left\" and the vector \"right\"\n *\n * @param left - defines first vector\n *\n * @param right - defines second vector\n *\n * @returns the dot product (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Dot(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Dot"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#equals:member(1)",
              "docComment": "/**\n * Gets a boolean if two vectors are equals\n *\n * @param otherVector - defines the other vector\n *\n * @returns true if the given vector coordinates strictly equal the current Vector2 ones\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#equalsWithEpsilon:member(1)",
              "docComment": "/**\n * Gets a boolean if two vectors are equals (using an epsilon value)\n *\n * @param otherVector - defines the other vector\n *\n * @param epsilon - defines the minimal distance to consider equality\n *\n * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equalsWithEpsilon(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", epsilon?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "epsilon",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "equalsWithEpsilon"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#floor:member(1)",
              "docComment": "/**\n * Gets a new Vector2 from current Vector2 floored values\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "floor(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "floor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#fract:member(1)",
              "docComment": "/**\n * Gets a new Vector2 from current Vector2 floored values\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fract(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "fract"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.FromArray:member(1)",
              "docComment": "/**\n * Gets a new Vector2 set from the given index element of the given array\n *\n * @param array - defines the data source\n *\n * @param offset - defines the offset in the data source\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "FromArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.FromArrayToRef:member(1)",
              "docComment": "/**\n * Sets \"result\" from the given index element of the given array\n *\n * @param array - defines the data source\n *\n * @param offset - defines the offset in the data source\n *\n * @param result - defines the target vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArrayToRef(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "FromArrayToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#getClassName:member(1)",
              "docComment": "/**\n * Gets class name\n *\n * @returns the string \"Vector2\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClassName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getClassName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#getHashCode:member(1)",
              "docComment": "/**\n * Gets current vector hash code\n *\n * @returns the Vector2 hash code as a number\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHashCode(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getHashCode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Hermite:member(1)",
              "docComment": "/**\n * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\"\n *\n * @param value1 - defines the 1st control point\n *\n * @param tangent1 - defines the outgoing tangent\n *\n * @param value2 - defines the 2nd control point\n *\n * @param tangent2 - defines the incoming tangent\n *\n * @param amount - defines the interpolation factor\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Hermite(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", tangent1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", tangent2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tangent1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "tangent2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "Hermite"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#length:member(1)",
              "docComment": "/**\n * Gets the length of the vector\n *\n * @returns the vector length (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "length(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "length"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#lengthSquared:member(1)",
              "docComment": "/**\n * Gets the vector squared length\n *\n * @returns the vector squared length (float)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lengthSquared(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "lengthSquared"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Lerp:member(1)",
              "docComment": "/**\n * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\n *\n * @param start - defines the start vector\n *\n * @param end - defines the end vector\n *\n * @param amount - defines the interpolation factor\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Lerp(start: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Lerp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Maximize:member(1)",
              "docComment": "/**\n * Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\n *\n * @param left - defines 1st vector\n *\n * @param right - defines 2nd vector\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Maximize(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Maximize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Minimize:member(1)",
              "docComment": "/**\n * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\n *\n * @param left - defines 1st vector\n *\n * @param right - defines 2nd vector\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Minimize(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Minimize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#multiply:member(1)",
              "docComment": "/**\n * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\n *\n * @param otherVector - defines the other vector\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiply(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#multiplyByFloats:member(1)",
              "docComment": "/**\n * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\n *\n * @param x - defines the first coordinate\n *\n * @param y - defines the second coordinate\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyByFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiplyByFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#multiplyInPlace:member(1)",
              "docComment": "/**\n * Multiplies in place the current Vector2 coordinates by the given ones\n *\n * @param otherVector - defines the other vector\n *\n * @returns the current updated Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "multiplyInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#multiplyToRef:member(1)",
              "docComment": "/**\n * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\n *\n * @param otherVector - defines the other vector\n *\n * @param result - defines the target vector\n *\n * @returns the unmodified current Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#negate:member(1)",
              "docComment": "/**\n * Gets a new Vector2 with current Vector2 negated coordinates\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "negate(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "negate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#normalize:member(1)",
              "docComment": "/**\n * Normalize the vector\n *\n * @returns the current updated Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalize(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "normalize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Normalize:member(1)",
              "docComment": "/**\n * Returns a new Vector2 equal to the normalized given vector\n *\n * @param vector - defines the vector to normalize\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Normalize(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "Normalize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.One:member(1)",
              "docComment": "/**\n * Gets a new Vector2(1, 1)\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static One(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "One"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.PointInTriangle:member(1)",
              "docComment": "/**\n * Determines if a given vector is included in a triangle\n *\n * @param p - defines the vector to test\n *\n * @param p0 - defines 1st triangle point\n *\n * @param p1 - defines 2nd triangle point\n *\n * @param p2 - defines 3rd triangle point\n *\n * @returns true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static PointInTriangle(p: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", p0: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", p1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", p2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "p0",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "p1",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "p2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "PointInTriangle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#scale:member(1)",
              "docComment": "/**\n * Returns a new Vector2 scaled by \"scale\" from the current Vector2\n *\n * @param scale - defines the scaling factor\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#scaleAndAddToRef:member(1)",
              "docComment": "/**\n * Scale the current Vector2 values by a factor and add the result to a given Vector2\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the Vector2 object where to store the result\n *\n * @returns the unmodified current Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleAndAddToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#scaleInPlace:member(1)",
              "docComment": "/**\n * Multiply the Vector2 coordinates by scale\n *\n * @param scale - defines the scaling factor\n *\n * @returns the current updated Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleInPlace(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scaleInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#scaleToRef:member(1)",
              "docComment": "/**\n * Scale the current Vector2 values by a factor to a given Vector2\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the Vector2 object where to store the result\n *\n * @returns the unmodified current Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#set:member(1)",
              "docComment": "/**\n * Sets the Vector2 coordinates with the given floats\n *\n * @param x - defines the first coordinate\n *\n * @param y - defines the second coordinate\n *\n * @returns the current updated Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#subtract:member(1)",
              "docComment": "/**\n * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\n *\n * @param otherVector - defines the other vector\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtract(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#subtractInPlace:member(1)",
              "docComment": "/**\n * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\n *\n * @param otherVector - defines the other vector\n *\n * @returns the current updated Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtractInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#subtractToRef:member(1)",
              "docComment": "/**\n * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\n *\n * @param otherVector - defines the other vector\n *\n * @param result - defines the target vector\n *\n * @returns the unmodified current Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "subtractToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#toArray:member(1)",
              "docComment": "/**\n * Sets the Vector2 coordinates in the given array or FloatArray from the given index.\n *\n * @param array - defines the source array\n *\n * @param index - defines the offset in source array\n *\n * @returns the current Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "toArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2#toString:member(1)",
              "docComment": "/**\n * Gets a string with the Vector2 coordinates\n *\n * @returns a string with the Vector2 coordinates\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Transform:member(1)",
              "docComment": "/**\n * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\n *\n * @param vector - defines the vector to transform\n *\n * @param transformation - defines the matrix to apply\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Transform(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Transform"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.TransformToRef:member(1)",
              "docComment": "/**\n * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\n *\n * @param vector - defines the vector to transform\n *\n * @param transformation - defines the matrix to apply\n *\n * @param result - defines the target vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TransformToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector2",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector2:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "TransformToRef"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Vector2#x:member",
              "docComment": "/**\n * defines the first coordinate\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Vector2#y:member",
              "docComment": "/**\n * defines the second coordinate\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector2.Zero:member(1)",
              "docComment": "/**\n * Gets a new Vector2(0, 0)\n *\n * @returns a new Vector2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "@dcl/ecs-math!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Vector3:class",
          "docComment": "/**\n * Classed used to store (x,y,z) vector representation A Vector3 is the main object used in 3D geometry It can represent etiher the coordinates of a point the space, either a direction Reminder: Babylon.js uses a left handed forward facing system\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Vector3 implements "
            },
            {
              "kind": "Reference",
              "text": "EcsMathReadOnlyVector3",
              "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Vector3",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Vector3:constructor(1)",
              "docComment": "/**\n * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n *\n * @param x - defines the first coordinates (on X axis)\n *\n * @param y - defines the second coordinates (on Y axis)\n *\n * @param z - defines the third coordinates (on Z axis)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    x?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    y?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    z?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#add:member(1)",
              "docComment": "/**\n * Gets a new Vector3, result of the addition the current Vector3 and the given vector\n *\n * @param otherVector - defines the second operand\n *\n * @returns the resulting Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Add:member(1)",
              "docComment": "/**\n * Returns a new Vector3 as the result of the addition of the two given vectors.\n *\n * @param vector1 - the first vector\n *\n * @param vector2 - the second vector\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Add(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#addInPlace:member(1)",
              "docComment": "/**\n * Adds the given vector to the current Vector3\n *\n * @param otherVector - defines the second operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#addInPlaceFromFloats:member(1)",
              "docComment": "/**\n * Adds the given coordinates to the current Vector3\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addInPlaceFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "addInPlaceFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#addToRef:member(1)",
              "docComment": "/**\n * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\n *\n * @param otherVector - defines the second operand\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#applyMatrix4:member(1)",
              "docComment": "/**\n * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\n *\n * @param matrix - The transformation matrix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyMatrix4(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "applyMatrix4"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#applyMatrix4ToRef:member(1)",
              "docComment": "/**\n * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector \"result\" with this result\n *\n * @param matrix - The transformation matrix\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyMatrix4ToRef(matrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "applyMatrix4ToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#asArray:member(1)",
              "docComment": "/**\n * Creates an array containing three elements : the coordinates of the Vector3\n *\n * @returns a new array of numbers\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asArray(): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "asArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Backward:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n *\n * @returns a new forward Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Backward(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Backward"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.CatmullRom:member(1)",
              "docComment": "/**\n * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\n *\n * @param value1 - defines the first control point\n *\n * @param value2 - defines the second control point\n *\n * @param value3 - defines the third control point\n *\n * @param value4 - defines the fourth control point\n *\n * @param amount - defines the amount on the spline to use\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static CatmullRom(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value3: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value4: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "value4",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "CatmullRom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Center:member(1)",
              "docComment": "/**\n * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\n *\n * @param value1 - defines the first operand\n *\n * @param value2 - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Center(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Center"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Clamp:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\" If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n *\n * @param value - defines the current value\n *\n * @param min - defines the lower range value\n *\n * @param max - defines the upper range value\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Clamp(value: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Clamp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.ClampToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\" If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n *\n * @param value - defines the current value\n *\n * @param min - defines the lower range value\n *\n * @param max - defines the upper range value\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ClampToRef(value: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", min: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "ClampToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#clone:member(1)",
              "docComment": "/**\n * Creates a new Vector3 copied from the current Vector3\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#copyFrom:member(1)",
              "docComment": "/**\n * Copies the given vector coordinates to the current Vector3 ones\n *\n * @param source - defines the source Vector3\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFrom(source: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#copyFromFloats:member(1)",
              "docComment": "/**\n * Copies the given floats to the current Vector3 coordinates\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "copyFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Cross:member(1)",
              "docComment": "/**\n * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\" The cross product is then orthogonal to both \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @returns the cross product\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Cross(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Cross"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.CrossToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the cross product of \"left\" and \"right\" The cross product is then orthogonal to both \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static CrossToRef(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "CrossToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Distance:member(1)",
              "docComment": "/**\n * Returns the distance between the vectors \"value1\" and \"value2\"\n *\n * @param value1 - defines the first operand\n *\n * @param value2 - defines the second operand\n *\n * @returns the distance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Distance(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Distance"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.DistanceSquared:member(1)",
              "docComment": "/**\n * Returns the squared distance between the vectors \"value1\" and \"value2\"\n *\n * @param value1 - defines the first operand\n *\n * @param value2 - defines the second operand\n *\n * @returns the squared distance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static DistanceSquared(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "DistanceSquared"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#divide:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n *\n * @param otherVector - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divide(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "divide"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#divideInPlace:member(1)",
              "docComment": "/**\n * Divides the current Vector3 coordinates by the given ones.\n *\n * @param otherVector - defines the second operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divideInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "divideInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#divideToRef:member(1)",
              "docComment": "/**\n * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\n *\n * @param otherVector - defines the second operand\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divideToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "divideToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Dot:member(1)",
              "docComment": "/**\n * Returns the dot product (float) between the vectors \"left\" and \"right\"\n *\n * @param left - defines the left operand\n *\n * @param right - defines the right operand\n *\n * @returns the dot product\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Dot(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Dot"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Down:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n *\n * @returns a new down Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Down(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Down"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#equals:member(1)",
              "docComment": "/**\n * Returns true if the current Vector3 and the given vector coordinates are strictly equal\n *\n * @param otherVector - defines the second operand\n *\n * @returns true if both vectors are equals\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#equalsToFloats:member(1)",
              "docComment": "/**\n * Returns true if the current Vector3 coordinates equals the given floats\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns true if both vectors are equals\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equalsToFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "equalsToFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#equalsWithEpsilon:member(1)",
              "docComment": "/**\n * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n *\n * @param otherVector - defines the second operand\n *\n * @param epsilon - defines the minimal distance to define values as equals\n *\n * @returns true if both vectors are distant less than epsilon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equalsWithEpsilon(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", epsilon?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "epsilon",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "equalsWithEpsilon"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#floor:member(1)",
              "docComment": "/**\n * Gets a new Vector3 from current Vector3 floored values\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "floor(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "floor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Forward:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n *\n * @returns a new forward Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Forward(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Forward"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#fract:member(1)",
              "docComment": "/**\n * Gets a new Vector3 from current Vector3 floored values\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fract(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "fract"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.FromArray:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set from the index \"offset\" of the given array\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "FromArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.FromArrayToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArrayToRef(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "FromArrayToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.FromFloatArray:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set from the index \"offset\" of the given FloatArray This function is deprecated. Use FromArray instead\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromFloatArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "FromFloatArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.FromFloatArrayToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the element values from the index \"offset\" of the given FloatArray This function is deprecated. Use FromArrayToRef instead.\n *\n * @param array - defines the source array\n *\n * @param offset - defines the offset in the source array\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromFloatArrayToRef(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "FromFloatArrayToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.FromFloatsToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the given floats.\n *\n * @param x - defines the x coordinate of the source\n *\n * @param y - defines the y coordinate of the source\n *\n * @param z - defines the z coordinate of the source\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromFloatsToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "FromFloatsToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.GetAngleBetweenVectors:member(1)",
              "docComment": "/**\n * Get angle between two vectors\n *\n * @param vector0 - angle between vector0 and vector1\n *\n * @param vector1 - angle between vector0 and vector1\n *\n * @param normal - direction of the normal\n *\n * @returns the angle between vector0 and vector1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetAngleBetweenVectors(vector0: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", normal: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector0",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "normal",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "GetAngleBetweenVectors"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#getClassName:member(1)",
              "docComment": "/**\n * Gets the class name\n *\n * @returns the string \"Vector3\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClassName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getClassName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.GetClipFactor:member(1)",
              "docComment": "/**\n * Get the clip factor between two vectors\n *\n * @param vector0 - defines the first operand\n *\n * @param vector1 - defines the second operand\n *\n * @param axis - defines the axis to use\n *\n * @param size - defines the size along the axis\n *\n * @returns the clip factor\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GetClipFactor(vector0: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", axis: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", size: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector0",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "size",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "GetClipFactor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#getHashCode:member(1)",
              "docComment": "/**\n * Creates the Vector3 hash code\n *\n * @returns a number which tends to be unique between Vector3 instances\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHashCode(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getHashCode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Hermite:member(1)",
              "docComment": "/**\n * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n *\n * @param value1 - defines the first control point\n *\n * @param tangent1 - defines the first tangent vector\n *\n * @param value2 - defines the second control point\n *\n * @param tangent2 - defines the second tangent vector\n *\n * @param amount - defines the amount on the interpolation spline (between 0 and 1)\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Hermite(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", tangent1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", tangent2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tangent1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "tangent2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "Hermite"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Vector3#isNonUniform:member",
              "docComment": "/**\n * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isNonUniform(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isNonUniform",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Left:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n *\n * @returns a new left Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Left(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Left"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#length:member(1)",
              "docComment": "/**\n * Gets the length of the Vector3\n *\n * @returns the length of the Vecto3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "length(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "length"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#lengthSquared:member(1)",
              "docComment": "/**\n * Gets the squared length of the Vector3\n *\n * @returns squared length of the Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lengthSquared(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "lengthSquared"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Lerp:member(1)",
              "docComment": "/**\n * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n *\n * @param start - defines the start value\n *\n * @param end - defines the end value\n *\n * @param amount - max defines amount between both (between 0 and 1)\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Lerp(start: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "Lerp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.LerpToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n *\n * @param start - defines the start value\n *\n * @param end - defines the end value\n *\n * @param amount - max defines amount between both (between 0 and 1)\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static LerpToRef(start: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "LerpToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Maximize:member(1)",
              "docComment": "/**\n * Gets the maximal coordinate values between two Vector3\n *\n * @param left - defines the first operand\n *\n * @param right - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Maximize(left: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Maximize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#maximizeInPlace:member(1)",
              "docComment": "/**\n * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\n *\n * @param other - defines the second operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maximizeInPlace(other: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "maximizeInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#maximizeInPlaceFromFloats:member(1)",
              "docComment": "/**\n * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maximizeInPlaceFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "maximizeInPlaceFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Minimize:member(1)",
              "docComment": "/**\n * Gets the minimal coordinate values between two Vector3\n *\n * @param left - defines the first operand\n *\n * @param right - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Minimize(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Minimize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#minimizeInPlace:member(1)",
              "docComment": "/**\n * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\n *\n * @param other - defines the second operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimizeInPlace(other: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "minimizeInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#minimizeInPlaceFromFloats:member(1)",
              "docComment": "/**\n * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimizeInPlaceFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "minimizeInPlaceFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#multiply:member(1)",
              "docComment": "/**\n * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\n *\n * @param otherVector - defines the second operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiply(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#multiplyByFloats:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyByFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "multiplyByFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#multiplyInPlace:member(1)",
              "docComment": "/**\n * Multiplies the current Vector3 coordinates by the given ones\n *\n * @param otherVector - defines the second operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "multiplyInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#multiplyToRef:member(1)",
              "docComment": "/**\n * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\n *\n * @param otherVector - defines the second operand\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#negate:member(1)",
              "docComment": "/**\n * Gets a new Vector3 set with the current Vector3 negated coordinates\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "negate(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "negate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#normalize:member(1)",
              "docComment": "/**\n * Normalize the current Vector3. Please note that this is an in place operation.\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalize(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "normalize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Normalize:member(1)",
              "docComment": "/**\n * Returns a new Vector3 as the normalization of the given vector\n *\n * @param vector - defines the Vector3 to normalize\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Normalize(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "Normalize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#normalizeFromLength:member(1)",
              "docComment": "/**\n * Normalize the current Vector3 with the given input length. Please note that this is an in place operation.\n *\n * @param len - the length of the vector\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalizeFromLength(len: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "len",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "normalizeFromLength"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#normalizeToNew:member(1)",
              "docComment": "/**\n * Normalize the current Vector3 to a new vector\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalizeToNew(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "normalizeToNew"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#normalizeToRef:member(1)",
              "docComment": "/**\n * Normalize the current Vector3 to the reference\n *\n * @param reference - define the Vector3 to update\n *\n * @returns the updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalizeToRef(reference: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "reference",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "normalizeToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.NormalizeToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the normalization of the given first vector\n *\n * @param vector - defines the Vector3 to normalize\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static NormalizeToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "NormalizeToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.One:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n *\n * @returns a new unit Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static One(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "One"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Right:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n *\n * @returns a new right Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Right(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Right"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#rotate:member(1)",
              "docComment": "/**\n * Rotates the current Vector3 based on the given quaternion\n *\n * @param q - defines the Quaternion\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rotate(q: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "rotate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#rotateToRef:member(1)",
              "docComment": "/**\n * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n *\n * @param q - defines the Quaternion\n *\n * @param result - defines the target Vector3\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rotateToRef(q: "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "q",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "rotateToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.RotationFromAxis:member(1)",
              "docComment": "/**\n * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system), RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply to something in order to rotate it from its local system to the given target system Note: axis1, axis2 and axis3 are normalized during this operation\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationFromAxis(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "RotationFromAxis"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.RotationFromAxisToRef:member(1)",
              "docComment": "/**\n * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n *\n * @param axis1 - defines the first axis\n *\n * @param axis2 - defines the second axis\n *\n * @param axis3 - defines the third axis\n *\n * @param ref - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static RotationFromAxisToRef(axis1: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", axis2: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", axis3: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", ref: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "axis1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "axis2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "axis3",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "RotationFromAxisToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#scale:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n *\n * @param scale - defines the multiplier factor\n *\n * @returns a new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#scaleAndAddToRef:member(1)",
              "docComment": "/**\n * Scale the current Vector3 values by a factor and add the result to a given Vector3\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the unmodified current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleAndAddToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#scaleInPlace:member(1)",
              "docComment": "/**\n * Multiplies the Vector3 coordinates by the float \"scale\"\n *\n * @param scale - defines the multiplier factor\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleInPlace(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scaleInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#scaleToRef:member(1)",
              "docComment": "/**\n * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\n *\n * @param scale - defines the multiplier factor\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#set:member(1)",
              "docComment": "/**\n * Copies the given floats to the current Vector3 coordinates\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#setAll:member(1)",
              "docComment": "/**\n * Copies the given float to the current Vector3 coordinates\n *\n * @param v - defines the x, y and z coordinates of the operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAll(v: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "v",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setAll"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#subtract:member(1)",
              "docComment": "/**\n * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\n *\n * @param otherVector - defines the second operand\n *\n * @returns the resulting Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtract(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#subtractFromFloats:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @returns the resulting Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "subtractFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#subtractFromFloatsToRef:member(1)",
              "docComment": "/**\n * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\n *\n * @param x - defines the x coordinate of the operand\n *\n * @param y - defines the y coordinate of the operand\n *\n * @param z - defines the z coordinate of the operand\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractFromFloatsToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "subtractFromFloatsToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#subtractInPlace:member(1)",
              "docComment": "/**\n * Subtract the given vector from the current Vector3\n *\n * @param otherVector - defines the second operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtractInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#subtractToRef:member(1)",
              "docComment": "/**\n * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\n *\n * @param otherVector - defines the second operand\n *\n * @param result - defines the Vector3 object where to store the result\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "subtractToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#toArray:member(1)",
              "docComment": "/**\n * Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3\n *\n * @param array - defines the destination array\n *\n * @param index - defines the offset in the destination array\n *\n * @returns the current Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "toArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#toQuaternion:member(1)",
              "docComment": "/**\n * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\n *\n * @returns a new Quaternion object, computed from the Vector3 coordinates\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toQuaternion(): "
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "@dcl/ecs-math!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toQuaternion"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3#toString:member(1)",
              "docComment": "/**\n * Creates a string representation of the Vector3\n *\n * @returns a string with the Vector3 coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.TransformCoordinates:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector. This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @returns the transformed Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TransformCoordinates(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "TransformCoordinates"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.TransformCoordinatesFromFloatsToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z) This method computes tranformed coordinates only, not transformed direction vectors\n *\n * @param x - define the x coordinate of the source vector\n *\n * @param y - define the y coordinate of the source vector\n *\n * @param z - define the z coordinate of the source vector\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TransformCoordinatesFromFloatsToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "TransformCoordinatesFromFloatsToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.TransformCoordinatesToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TransformCoordinatesToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "TransformCoordinatesToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.TransformNormal:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @returns the new Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TransformNormal(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "TransformNormal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.TransformNormalFromFloatsToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z) This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n *\n * @param x - define the x coordinate of the source vector\n *\n * @param y - define the y coordinate of the source vector\n *\n * @param z - define the z coordinate of the source vector\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TransformNormalFromFloatsToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "TransformNormalFromFloatsToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.TransformNormalToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n *\n * @param vector - defines the Vector3 to transform\n *\n * @param transformation - defines the transformation matrix\n *\n * @param result - defines the Vector3 where to store the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TransformNormalToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector3",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector3:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "TransformNormalToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Up:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, 1.0, 0.0)\n *\n * @returns a new up Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Up(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Up"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Vector3#x:member",
              "docComment": "/**\n * Defines the first coordinates (on X axis)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Vector3#y:member",
              "docComment": "/**\n * Defines the second coordinates (on Y axis)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Vector3#z:member",
              "docComment": "/**\n * Defines the third coordinates (on Z axis)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "z",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector3.Zero:member(1)",
              "docComment": "/**\n * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n *\n * @returns a new empty Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@dcl/ecs-math!Vector4:class",
          "docComment": "/**\n * Vector4 class created for EulerAngle class conversion to Quaternion\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Vector4 implements "
            },
            {
              "kind": "Reference",
              "text": "EcsMathReadOnlyVector4",
              "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Vector4",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@dcl/ecs-math!Vector4:constructor(1)",
              "docComment": "/**\n * Creates a Vector4 object from the given floats.\n *\n * @param x - x value of the vector\n *\n * @param y - y value of the vector\n *\n * @param z - z value of the vector\n *\n * @param w - w value of the vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(\n    x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", \n    w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#add:member(1)",
              "docComment": "/**\n * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\n *\n * @param otherVector - the vector to add\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.Add:member(1)",
              "docComment": "/**\n * Returns a new Vector4 as the result of the addition of the two given vectors.\n *\n * @param vector1 - the first vector\n *\n * @param vector2 - the second vector\n *\n * @returns the resulting vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Add(vector1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", vector2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "vector2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#addInPlace:member(1)",
              "docComment": "/**\n * Adds the given vector to the current Vector4.\n *\n * @param otherVector - the vector to add\n *\n * @returns the updated Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#addToRef:member(1)",
              "docComment": "/**\n * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\n *\n * @param otherVector - the vector to add\n *\n * @param result - the vector to store the result\n *\n * @returns the current Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#asArray:member(1)",
              "docComment": "/**\n * Returns a new array populated with 4 elements : the Vector4 coordinates.\n *\n * @returns the resulting array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asArray(): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "asArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.Center:member(1)",
              "docComment": "/**\n * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\n *\n * @param value1 - value to calulate the center between\n *\n * @param value2 - value to calulate the center between\n *\n * @returns the center between the two vectors\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Center(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Center"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#clone:member(1)",
              "docComment": "/**\n * Returns a new Vector4 copied from the current one.\n *\n * @returns the new cloned vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#copyFrom:member(1)",
              "docComment": "/**\n * Updates the current Vector4 with the given one coordinates.\n *\n * @param source - the source vector to copy from\n *\n * @returns the updated Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFrom(source: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyFrom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#copyFromFloats:member(1)",
              "docComment": "/**\n * Updates the current Vector4 coordinates with the given floats.\n *\n * @param x - float to copy from\n *\n * @param y - float to copy from\n *\n * @param z - float to copy from\n *\n * @param w - float to copy from\n *\n * @returns the updated Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "copyFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.Distance:member(1)",
              "docComment": "/**\n * Returns the distance (float) between the vectors \"value1\" and \"value2\".\n *\n * @param value1 - value to calulate the distance between\n *\n * @param value2 - value to calulate the distance between\n *\n * @returns the distance between the two vectors\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Distance(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Distance"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.DistanceSquared:member(1)",
              "docComment": "/**\n * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\n *\n * @param value1 - value to calulate the distance between\n *\n * @param value2 - value to calulate the distance between\n *\n * @returns the distance between the two vectors squared\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static DistanceSquared(value1: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", value2: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "DistanceSquared"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#divide:member(1)",
              "docComment": "/**\n * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\n *\n * @param otherVector - vector to devide with\n *\n * @returns resulting new vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divide(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "divide"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#divideInPlace:member(1)",
              "docComment": "/**\n * Divides the current Vector3 coordinates by the given ones.\n *\n * @param otherVector - vector to devide with\n *\n * @returns the updated Vector3.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divideInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "divideInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#divideToRef:member(1)",
              "docComment": "/**\n * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\n *\n * @param otherVector - vector to devide with\n *\n * @param result - vector to store the result\n *\n * @returns the current Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divideToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "divideToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#equals:member(1)",
              "docComment": "/**\n * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\n *\n * @param otherVector - the vector to compare against\n *\n * @returns true if they are equal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#equalsToFloats:member(1)",
              "docComment": "/**\n * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\n *\n * @param x - x value to compare against\n *\n * @param y - y value to compare against\n *\n * @param z - z value to compare against\n *\n * @param w - w value to compare against\n *\n * @returns true if equal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equalsToFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "equalsToFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#equalsWithEpsilon:member(1)",
              "docComment": "/**\n * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\n *\n * @param otherVector - vector to compare against\n *\n * @param epsilon - (Default: very small number)\n *\n * @returns true if they are equal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equalsWithEpsilon(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", epsilon?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "epsilon",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "equalsWithEpsilon"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#floor:member(1)",
              "docComment": "/**\n * Gets a new Vector4 from current Vector4 floored values\n *\n * @returns a new Vector4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "floor(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "floor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#fract:member(1)",
              "docComment": "/**\n * Gets a new Vector4 from current Vector3 floored values\n *\n * @returns a new Vector4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fract(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "fract"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.FromArray:member(1)",
              "docComment": "/**\n * Returns a new Vector4 set from the starting index of the given array.\n *\n * @param array - the array to pull values from\n *\n * @param offset - the offset into the array to start at\n *\n * @returns the new vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "FromArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.FromArrayToRef:member(1)",
              "docComment": "/**\n * Updates the given vector \"result\" from the starting index of the given array.\n *\n * @param array - the array to pull values from\n *\n * @param offset - the offset into the array to start at\n *\n * @param result - the vector to store the result in\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromArrayToRef(array: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayLike",
                  "canonicalReference": "!ArrayLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "FromArrayToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.FromFloatArrayToRef:member(1)",
              "docComment": "/**\n * Updates the given vector \"result\" from the starting index of the given FloatArray.\n *\n * @param array - the array to pull values from\n *\n * @param offset - the offset into the array to start at\n *\n * @param result - the vector to store the result in\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromFloatArrayToRef(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "FromFloatArrayToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.FromFloatsToRef:member(1)",
              "docComment": "/**\n * Updates the given vector \"result\" coordinates from the given floats.\n *\n * @param x - float to set from\n *\n * @param y - float to set from\n *\n * @param z - float to set from\n *\n * @param w - float to set from\n *\n * @param result - the vector to the floats in\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FromFloatsToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "FromFloatsToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#getClassName:member(1)",
              "docComment": "/**\n * Returns the string \"Vector4\".\n *\n * @returns \"Vector4\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClassName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getClassName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#getHashCode:member(1)",
              "docComment": "/**\n * Returns the Vector4 hash code.\n *\n * @returns a unique hash code\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHashCode(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getHashCode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#length:member(1)",
              "docComment": "/**\n * Returns the Vector4 length (float).\n *\n * @returns the length\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "length(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "length"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#lengthSquared:member(1)",
              "docComment": "/**\n * Returns the Vector4 squared length (float).\n *\n * @returns the length squared\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lengthSquared(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "lengthSquared"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.Maximize:member(1)",
              "docComment": "/**\n * Returns a vector with the maximum values from the left and right vectors\n *\n * @param left - left vector to maximize\n *\n * @param right - right vector to maximize\n *\n * @returns a new vector with the maximum of the left and right vector values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Maximize(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Maximize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#maximizeInPlace:member(1)",
              "docComment": "/**\n * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\n *\n * @param other - defines the second operand\n *\n * @returns the current updated Vector4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maximizeInPlace(other: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "maximizeInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.Minimize:member(1)",
              "docComment": "/**\n * Returns a vector with the minimum values from the left and right vectors\n *\n * @param left - left vector to minimize\n *\n * @param right - right vector to minimize\n *\n * @returns a new vector with the minimum of the left and right vector values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Minimize(left: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", right: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "left",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "right",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "Minimize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#minimizeInPlace:member(1)",
              "docComment": "/**\n * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\n *\n * @param other - defines the second operand\n *\n * @returns the current updated Vector4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimizeInPlace(other: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "minimizeInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#multiply:member(1)",
              "docComment": "/**\n * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\n *\n * @param otherVector - vector to multiple with\n *\n * @returns resulting new vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiply(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#multiplyByFloats:member(1)",
              "docComment": "/**\n * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\n *\n * @param x - x value multiply with\n *\n * @param y - y value multiply with\n *\n * @param z - z value multiply with\n *\n * @param w - w value multiply with\n *\n * @returns resulting new vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyByFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "multiplyByFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#multiplyInPlace:member(1)",
              "docComment": "/**\n * Multiplies in place the current Vector4 by the given one.\n *\n * @param otherVector - vector to multiple with\n *\n * @returns the updated Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "multiplyInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#multiplyToRef:member(1)",
              "docComment": "/**\n * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\n *\n * @param otherVector - vector to multiple with\n *\n * @param result - vector to store the result\n *\n * @returns the current Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiplyToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "multiplyToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#negate:member(1)",
              "docComment": "/**\n * Returns a new Vector4 set with the current Vector4 negated coordinates.\n *\n * @returns a new vector with the negated values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "negate(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "negate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#normalize:member(1)",
              "docComment": "/**\n * Normalizes in place the Vector4.\n *\n * @returns the updated Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalize(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "normalize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.Normalize:member(1)",
              "docComment": "/**\n * Returns a new normalized Vector4 from the given one.\n *\n * @param vector - the vector to normalize\n *\n * @returns the vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Normalize(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "Normalize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.NormalizeToRef:member(1)",
              "docComment": "/**\n * Updates the given vector \"result\" from the normalization of the given one.\n *\n * @param vector - the vector to normalize\n *\n * @param result - the vector to store the result in\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static NormalizeToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "NormalizeToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.One:member(1)",
              "docComment": "/**\n * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\n *\n * @returns the new vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static One(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "One"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#scale:member(1)",
              "docComment": "/**\n * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\n *\n * @param scale - the number to scale with\n *\n * @returns a new vector with the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scale"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#scaleAndAddToRef:member(1)",
              "docComment": "/**\n * Scale the current Vector4 values by a factor and add the result to a given Vector4\n *\n * @param scale - defines the scale factor\n *\n * @param result - defines the Vector4 object where to store the result\n *\n * @returns the unmodified current Vector4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleAndAddToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleAndAddToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#scaleInPlace:member(1)",
              "docComment": "/**\n * Multiplies the current Vector4 coordinates by scale (float).\n *\n * @param scale - the number to scale with\n *\n * @returns the updated Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleInPlace(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scaleInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#scaleToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\n *\n * @param scale - the number to scale with\n *\n * @param result - a vector to store the result in\n *\n * @returns the current Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleToRef(scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "scaleToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#set:member(1)",
              "docComment": "/**\n * Updates the current Vector4 coordinates with the given floats.\n *\n * @param x - float to set from\n *\n * @param y - float to set from\n *\n * @param z - float to set from\n *\n * @param w - float to set from\n *\n * @returns the updated Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#setAll:member(1)",
              "docComment": "/**\n * Copies the given float to the current Vector3 coordinates\n *\n * @param v - defines the x, y, z and w coordinates of the operand\n *\n * @returns the current updated Vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAll(v: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "v",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setAll"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#subtract:member(1)",
              "docComment": "/**\n * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\n *\n * @param otherVector - the vector to add\n *\n * @returns the new vector with the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtract(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#subtractFromFloats:member(1)",
              "docComment": "/**\n * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n *\n * @param x - value to subtract\n *\n * @param y - value to subtract\n *\n * @param z - value to subtract\n *\n * @param w - value to subtract\n *\n * @returns new vector containing the result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractFromFloats(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "subtractFromFloats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#subtractFromFloatsToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n *\n * @param x - value to subtract\n *\n * @param y - value to subtract\n *\n * @param z - value to subtract\n *\n * @param w - value to subtract\n *\n * @param result - the vector to store the result in\n *\n * @returns the current Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractFromFloatsToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "subtractFromFloatsToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#subtractInPlace:member(1)",
              "docComment": "/**\n * Subtract in place the given vector from the current Vector4.\n *\n * @param otherVector - the vector to subtract\n *\n * @returns the updated Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractInPlace(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtractInPlace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#subtractToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\n *\n * @param otherVector - the vector to subtract\n *\n * @param result - the vector to store the result\n *\n * @returns the current Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractToRef(otherVector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "otherVector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "subtractToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#toArray:member(1)",
              "docComment": "/**\n * Populates the given array from the given index with the Vector4 coordinates.\n *\n * @param array - array to populate\n *\n * @param index - index of the array to start at (default: 0)\n *\n * @returns the Vector4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArray(array: "
                },
                {
                  "kind": "Reference",
                  "text": "FloatArray",
                  "canonicalReference": "@dcl/ecs-math!FloatArray:type"
                },
                {
                  "kind": "Content",
                  "text": ", index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "toArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#toString:member(1)",
              "docComment": "/**\n * Returns the string with the Vector4 coordinates.\n *\n * @returns a string containing all the vector values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4#toVector3:member(1)",
              "docComment": "/**\n * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\n *\n * @returns this converted to a new vector3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toVector3(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "@dcl/ecs-math!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toVector3"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.TransformNormal:member(1)",
              "docComment": "/**\n * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector. This methods computes transformed normalized direction vectors only.\n *\n * @param vector - the vector to transform\n *\n * @param transformation - the transformation matrix to apply\n *\n * @returns the new vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TransformNormal(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "TransformNormal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.TransformNormalFromFloatsToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w). This methods computes transformed normalized direction vectors only.\n *\n * @param x - value to transform\n *\n * @param y - value to transform\n *\n * @param z - value to transform\n *\n * @param w - value to transform\n *\n * @param transformation - the transformation matrix to apply\n *\n * @param result - the vector to store the results in\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TransformNormalFromFloatsToRef(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "w",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                }
              ],
              "name": "TransformNormalFromFloatsToRef"
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.TransformNormalToRef:member(1)",
              "docComment": "/**\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector. This methods computes transformed normalized direction vectors only.\n *\n * @param vector - the vector to transform\n *\n * @param transformation - the transformation matrix to apply\n *\n * @param result - the vector to store the result in\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static TransformNormalToRef(vector: "
                },
                {
                  "kind": "Reference",
                  "text": "EcsMathReadOnlyVector4",
                  "canonicalReference": "@dcl/ecs-math!EcsMathReadOnlyVector4:type"
                },
                {
                  "kind": "Content",
                  "text": ", transformation: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix",
                  "canonicalReference": "@dcl/ecs-math!Matrix:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vector",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "transformation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "TransformNormalToRef"
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Vector4#w:member",
              "docComment": "/**\n * w value of the vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "w: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "w",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Vector4#x:member",
              "docComment": "/**\n * x value of the vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Vector4#y:member",
              "docComment": "/**\n * y value of the vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@dcl/ecs-math!Vector4#z:member",
              "docComment": "/**\n * z value of the vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "z",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@dcl/ecs-math!Vector4.Zero:member(1)",
              "docComment": "/**\n * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\n *\n * @returns the new vector\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Zero(): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector4",
                  "canonicalReference": "@dcl/ecs-math!Vector4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "Zero"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        }
      ]
    }
  ]
}
