import { FromTsProtoServiceDefinition, RawClient, TsProtoMethodDefinition, TsProtoServiceDefinition, ServerStreamingClientMethod, UnaryClientMethod, RawServiceImplementation } from "./codegen-types";
import { RpcClientPort, RpcServerPort } from "./types";
export declare function clientProcedureUnary<Request, Response>(port: unknown | Promise<unknown>, method: TsProtoMethodDefinition<Request, Response>): UnaryClientMethod<Request, Response>;
export declare function clientProcedureStream<Request, Response>(port: unknown | Promise<unknown>, method: TsProtoMethodDefinition<Request, Response>): ServerStreamingClientMethod<Request, Response>;
export declare function serverProcedureUnary<Request, Response, Context>(fn: (arg: Request, context: Context) => Promise<Response>, method: TsProtoMethodDefinition<Request, Response>): (arg: Uint8Array, context: Context) => Promise<Uint8Array>;
export declare function serverProcedureStream<Request, Response, Context>(fn: (arg: Request, context: Context) => Promise<AsyncGenerator<Response>> | AsyncGenerator<Response>, method: TsProtoMethodDefinition<Request, Response>): (arg: Uint8Array, context: Context) => AsyncGenerator<Uint8Array>;
export declare type RpcClientModule<Service extends TsProtoServiceDefinition, CallContext = {}> = RawClient<FromTsProtoServiceDefinition<Service>, CallContext>;
export declare type RpcServerModule<Service extends TsProtoServiceDefinition, CallContext = {}> = RawServiceImplementation<FromTsProtoServiceDefinition<Service>, CallContext>;
export declare function loadService<CallContext = {}, Service extends TsProtoServiceDefinition = any>(port: RpcClientPort, service: Service): RpcClientModule<Service, CallContext>;
export declare function registerService<CallContext = {}, Service extends TsProtoServiceDefinition = any>(port: RpcServerPort<CallContext>, service: Service, moduleInitializator: (port: RpcServerPort<CallContext>, context: CallContext) => Promise<RpcServerModule<Service, CallContext>>): void;
//# sourceMappingURL=codegen.d.ts.map