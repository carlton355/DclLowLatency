import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "";
/** THIS FILE IS AUTOGENERATED */
export declare enum RpcMessageTypes {
    RpcMessageTypes_EMPTY = 0,
    RpcMessageTypes_REQUEST = 1,
    RpcMessageTypes_RESPONSE = 2,
    RpcMessageTypes_STREAM_MESSAGE = 3,
    RpcMessageTypes_STREAM_ACK = 4,
    RpcMessageTypes_CREATE_PORT = 5,
    RpcMessageTypes_CREATE_PORT_RESPONSE = 6,
    RpcMessageTypes_REQUEST_MODULE = 7,
    RpcMessageTypes_REQUEST_MODULE_RESPONSE = 8,
    RpcMessageTypes_REMOTE_ERROR_RESPONSE = 9,
    RpcMessageTypes_DESTROY_PORT = 10,
    RpcMessageTypes_SERVER_READY = 11,
    UNRECOGNIZED = -1
}
export declare function rpcMessageTypesFromJSON(object: any): RpcMessageTypes;
export declare function rpcMessageTypesToJSON(object: RpcMessageTypes): string;
export interface RpcMessageHeader {
    messageIdentifier: number;
}
export interface CreatePort {
    messageIdentifier: number;
    portName: string;
}
export interface CreatePortResponse {
    messageIdentifier: number;
    portId: number;
}
export interface RequestModule {
    messageIdentifier: number;
    portId: number;
    moduleName: string;
}
export interface RequestModuleResponse {
    messageIdentifier: number;
    portId: number;
    procedures: ModuleProcedure[];
}
export interface DestroyPort {
    messageIdentifier: number;
    portId: number;
}
export interface ModuleProcedure {
    procedureId: number;
    procedureName: string;
}
export interface Request {
    messageIdentifier: number;
    portId: number;
    procedureId: number;
    payload: Uint8Array;
}
export interface RemoteError {
    messageIdentifier: number;
    errorCode: number;
    errorMessage: string;
}
export interface Response {
    messageIdentifier: number;
    payload: Uint8Array;
}
export interface StreamMessage {
    messageIdentifier: number;
    portId: number;
    sequenceId: number;
    payload: Uint8Array;
    closed: boolean;
    ack: boolean;
}
export declare const RpcMessageHeader: {
    encode(message: RpcMessageHeader, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RpcMessageHeader;
    fromJSON(object: any): RpcMessageHeader;
    toJSON(message: RpcMessageHeader): unknown;
    fromPartial<I extends {
        messageIdentifier?: number | undefined;
    } & {
        messageIdentifier?: number | undefined;
    } & { [K in Exclude<keyof I, "messageIdentifier">]: never; }>(object: I): RpcMessageHeader;
};
export declare const CreatePort: {
    encode(message: CreatePort, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreatePort;
    fromJSON(object: any): CreatePort;
    toJSON(message: CreatePort): unknown;
    fromPartial<I extends {
        messageIdentifier?: number | undefined;
        portName?: string | undefined;
    } & {
        messageIdentifier?: number | undefined;
        portName?: string | undefined;
    } & { [K in Exclude<keyof I, keyof CreatePort>]: never; }>(object: I): CreatePort;
};
export declare const CreatePortResponse: {
    encode(message: CreatePortResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreatePortResponse;
    fromJSON(object: any): CreatePortResponse;
    toJSON(message: CreatePortResponse): unknown;
    fromPartial<I extends {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
    } & {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
    } & { [K in Exclude<keyof I, keyof CreatePortResponse>]: never; }>(object: I): CreatePortResponse;
};
export declare const RequestModule: {
    encode(message: RequestModule, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RequestModule;
    fromJSON(object: any): RequestModule;
    toJSON(message: RequestModule): unknown;
    fromPartial<I extends {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
        moduleName?: string | undefined;
    } & {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
        moduleName?: string | undefined;
    } & { [K in Exclude<keyof I, keyof RequestModule>]: never; }>(object: I): RequestModule;
};
export declare const RequestModuleResponse: {
    encode(message: RequestModuleResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RequestModuleResponse;
    fromJSON(object: any): RequestModuleResponse;
    toJSON(message: RequestModuleResponse): unknown;
    fromPartial<I extends {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
        procedures?: {
            procedureId?: number | undefined;
            procedureName?: string | undefined;
        }[] | undefined;
    } & {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
        procedures?: ({
            procedureId?: number | undefined;
            procedureName?: string | undefined;
        }[] & ({
            procedureId?: number | undefined;
            procedureName?: string | undefined;
        } & {
            procedureId?: number | undefined;
            procedureName?: string | undefined;
        } & { [K in Exclude<keyof I["procedures"][number], keyof ModuleProcedure>]: never; })[] & { [K_1 in Exclude<keyof I["procedures"], keyof {
            procedureId?: number | undefined;
            procedureName?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof RequestModuleResponse>]: never; }>(object: I): RequestModuleResponse;
};
export declare const DestroyPort: {
    encode(message: DestroyPort, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DestroyPort;
    fromJSON(object: any): DestroyPort;
    toJSON(message: DestroyPort): unknown;
    fromPartial<I extends {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
    } & {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
    } & { [K in Exclude<keyof I, keyof DestroyPort>]: never; }>(object: I): DestroyPort;
};
export declare const ModuleProcedure: {
    encode(message: ModuleProcedure, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ModuleProcedure;
    fromJSON(object: any): ModuleProcedure;
    toJSON(message: ModuleProcedure): unknown;
    fromPartial<I extends {
        procedureId?: number | undefined;
        procedureName?: string | undefined;
    } & {
        procedureId?: number | undefined;
        procedureName?: string | undefined;
    } & { [K in Exclude<keyof I, keyof ModuleProcedure>]: never; }>(object: I): ModuleProcedure;
};
export declare const Request: {
    encode(message: Request, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Request;
    fromJSON(object: any): Request;
    toJSON(message: Request): unknown;
    fromPartial<I extends {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
        procedureId?: number | undefined;
        payload?: Uint8Array | undefined;
    } & {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
        procedureId?: number | undefined;
        payload?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, keyof Request>]: never; }>(object: I): Request;
};
export declare const RemoteError: {
    encode(message: RemoteError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RemoteError;
    fromJSON(object: any): RemoteError;
    toJSON(message: RemoteError): unknown;
    fromPartial<I extends {
        messageIdentifier?: number | undefined;
        errorCode?: number | undefined;
        errorMessage?: string | undefined;
    } & {
        messageIdentifier?: number | undefined;
        errorCode?: number | undefined;
        errorMessage?: string | undefined;
    } & { [K in Exclude<keyof I, keyof RemoteError>]: never; }>(object: I): RemoteError;
};
export declare const Response: {
    encode(message: Response, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Response;
    fromJSON(object: any): Response;
    toJSON(message: Response): unknown;
    fromPartial<I extends {
        messageIdentifier?: number | undefined;
        payload?: Uint8Array | undefined;
    } & {
        messageIdentifier?: number | undefined;
        payload?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, keyof Response>]: never; }>(object: I): Response;
};
export declare const StreamMessage: {
    encode(message: StreamMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): StreamMessage;
    fromJSON(object: any): StreamMessage;
    toJSON(message: StreamMessage): unknown;
    fromPartial<I extends {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
        sequenceId?: number | undefined;
        payload?: Uint8Array | undefined;
        closed?: boolean | undefined;
        ack?: boolean | undefined;
    } & {
        messageIdentifier?: number | undefined;
        portId?: number | undefined;
        sequenceId?: number | undefined;
        payload?: Uint8Array | undefined;
        closed?: boolean | undefined;
        ack?: boolean | undefined;
    } & { [K in Exclude<keyof I, keyof StreamMessage>]: never; }>(object: I): StreamMessage;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=index.d.ts.map