"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageNumberHandler = void 0;
const minimal_1 = require("protobufjs/minimal");
const helpers_1 = require("./protocol/helpers");
const protocol_1 = require("./protocol");
let globalMessageNumber = 0;
function messageNumberHandler(transport) {
    const oneTimeCallbacks = new Map();
    const listeners = new Map();
    transport.on("message", (message) => {
        const reader = minimal_1.Reader.create(message);
        const header = protocol_1.RpcMessageHeader.decode(reader);
        const [_, messageNumber] = (0, helpers_1.parseMessageIdentifier)(header.messageIdentifier);
        if (messageNumber > 0) {
            const fut = oneTimeCallbacks.get(messageNumber);
            if (fut) {
                reader.pos = 0;
                fut(reader);
                oneTimeCallbacks.delete(messageNumber);
            }
            const handler = listeners.get(messageNumber);
            if (handler) {
                reader.pos = 0;
                handler(reader);
            }
        }
    });
    return {
        transport,
        addListener(messageId, handler) {
            if (listeners.has(messageId))
                throw new Error("There is already a handler for messageId " + messageId);
            listeners.set(messageId, handler);
        },
        removeListener(messageId) {
            if (!listeners.has(messageId))
                throw new Error("A handler is missing for messageId " + messageId);
            listeners.delete(messageId);
        },
        async request(cb) {
            const messageNumber = ++globalMessageNumber;
            if (globalMessageNumber > 0x01000000)
                globalMessageNumber = 0;
            return new Promise((resolve) => {
                oneTimeCallbacks.set(messageNumber, resolve);
                const bb = new minimal_1.Writer();
                cb(bb, messageNumber);
                transport.sendMessage(bb.finish());
            });
        },
    };
}
exports.messageNumberHandler = messageNumberHandler;
//# sourceMappingURL=message-number-handler.js.map