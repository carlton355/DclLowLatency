"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LandUtils = void 0;
/**
 * @public
 */
var LandUtils;
(function (LandUtils) {
    // TODO: use BigNumber.js
    function B(number) {
        return BigInt(number);
    }
    function requireBounds(x, y) {
        if (!(B(-1000000) < B(x) && B(x) < B(1000000) && B(-1000000) < B(y) && B(y) < B(1000000)))
            throw new Error(`The coordinates ${x.toString(16)},${y.toString(16)} should be inside bounds`);
    }
    //
    // LAND Getters
    //
    const clearLow = B("0xffffffffffffffffffffffffffffffff00000000000000000000000000000000");
    const clearHigh = B("0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff");
    const factor = B("0x100000000000000000000000000000000");
    /**
     * @public
     */
    function encodeTokenId(x, y) {
        requireBounds(x, y);
        return ((B(x) * factor) & clearLow) | (B(y) & clearHigh);
    }
    LandUtils.encodeTokenId = encodeTokenId;
    /**
     * @public
     */
    function decodeTokenId(value) {
        return _decodeTokenId(B(value));
    }
    LandUtils.decodeTokenId = decodeTokenId;
    function _unsafeDecodeTokenId(value) {
        return {
            x: expandNegative128BitCast((value & clearLow) >> B(128)),
            y: expandNegative128BitCast(value & clearHigh),
        };
    }
    function _decodeTokenId(value) {
        const { x, y } = _unsafeDecodeTokenId(value);
        requireBounds(x, y);
        return { x, y };
    }
    function expandNegative128BitCast(value) {
        if ((value & B("0x80000000000000000000000000000000" /* 1 << 127 */)) != B(0)) {
            return B(-((clearLow - value) & clearHigh));
        }
        return B(value);
    }
    /**
     * Converts a string position "-1,5" to \{ x: -1, y: 5 \}
     * @public
     */
    function parseParcelPosition(position) {
        const [x, y] = position
            .trim()
            .split(/\s*,\s*/)
            .map(($) => parseInt($, 10));
        return { x, y };
    }
    LandUtils.parseParcelPosition = parseParcelPosition;
})(LandUtils = exports.LandUtils || (exports.LandUtils = {}));
//# sourceMappingURL=land-utils.js.map