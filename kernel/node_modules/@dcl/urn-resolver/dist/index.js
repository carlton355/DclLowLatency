"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveUrlFromUrn = exports.parseUrn = exports.resolveContentUrl = exports.LandUtils = void 0;
const resolvers_1 = require("./resolvers");
__exportStar(require("./types"), exports);
var land_utils_1 = require("./land-utils");
Object.defineProperty(exports, "LandUtils", { enumerable: true, get: function () { return land_utils_1.LandUtils; } });
const content_url_resolver_1 = require("./content-url-resolver");
Object.defineProperty(exports, "resolveContentUrl", { enumerable: true, get: function () { return content_url_resolver_1.resolveContentUrl; } });
/**
 * Function that parses an URN and returns a DecentralandAssetIdentifier record or null.
 * @public
 */
async function parseUrn(urn) {
    const url = new URL(urn);
    if (url.protocol == "urn:")
        return (0, resolvers_1.internalResolver)(urn);
    if (url.protocol == "dcl:")
        return (await (0, resolvers_1.resolveLegacyDclUrl)(url)) || null;
    return null;
}
exports.parseUrn = parseUrn;
/**
 * Returns a resolved (and mutable) content-url for the immutable URN.
 * @public
 */
async function resolveUrlFromUrn(urn, options) {
    const parsedUrn = await parseUrn(urn);
    if (parsedUrn) {
        return (0, content_url_resolver_1.resolveContentUrl)(parsedUrn, options);
    }
    return null;
}
exports.resolveUrlFromUrn = resolveUrlFromUrn;
//# sourceMappingURL=index.js.map