import { RpcClientPort } from '@dcl/rpc/dist/types';
export declare type RPCSendableMessage = {
    jsonrpc: '2.0';
    id: number;
    method: string;
    params: any[];
};
export interface MessageDict {
    [key: string]: string;
}
export declare namespace EthereumControllerServiceClient {
    function create<Context extends {}>(clientPort: RpcClientPort): import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
        readonly name: "EthereumControllerService";
        readonly fullName: "decentraland.kernel.apis.EthereumControllerService";
        readonly methods: {
            readonly requirePayment: {
                readonly name: "RequirePayment";
                readonly requestType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").RequirePaymentRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").RequirePaymentRequest;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").RequirePaymentRequest;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").RequirePaymentRequest): unknown;
                    fromPartial<I extends {
                        toAddress?: string | undefined;
                        amount?: number | undefined;
                        currency?: string | undefined;
                    } & {
                        toAddress?: string | undefined;
                        amount?: number | undefined;
                        currency?: string | undefined;
                    } & { [K in Exclude<keyof I, keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").RequirePaymentRequest>]: never; }>(object: I): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").RequirePaymentRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").RequirePaymentResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").RequirePaymentResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").RequirePaymentResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").RequirePaymentResponse): unknown;
                    fromPartial<I_1 extends {
                        jsonAnyResponse?: string | undefined;
                    } & {
                        jsonAnyResponse?: string | undefined;
                    } & { [K_1 in Exclude<keyof I_1, "jsonAnyResponse">]: never; }>(object: I_1): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").RequirePaymentResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly signMessage: {
                readonly name: "SignMessage";
                readonly requestType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SignMessageRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SignMessageRequest;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SignMessageRequest;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SignMessageRequest): unknown;
                    fromPartial<I_2 extends {
                        message?: {
                            [x: string]: string | undefined;
                        } | undefined;
                    } & {
                        message?: ({
                            [x: string]: string | undefined;
                        } & {
                            [x: string]: string | undefined;
                        } & { [K_2 in Exclude<keyof I_2["message"], string | number>]: never; }) | undefined;
                    } & { [K_3 in Exclude<keyof I_2, "message">]: never; }>(object: I_2): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SignMessageRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SignMessageResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SignMessageResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SignMessageResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SignMessageResponse): unknown;
                    fromPartial<I_3 extends {
                        message?: string | undefined;
                        hexEncodedMessage?: string | undefined;
                        signature?: string | undefined;
                    } & {
                        message?: string | undefined;
                        hexEncodedMessage?: string | undefined;
                        signature?: string | undefined;
                    } & { [K_4 in Exclude<keyof I_3, keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SignMessageResponse>]: never; }>(object: I_3): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SignMessageResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly convertMessageToObject: {
                readonly name: "ConvertMessageToObject";
                readonly requestType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").ConvertMessageToObjectRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").ConvertMessageToObjectRequest;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").ConvertMessageToObjectRequest;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").ConvertMessageToObjectRequest): unknown;
                    fromPartial<I_4 extends {
                        message?: string | undefined;
                    } & {
                        message?: string | undefined;
                    } & { [K_5 in Exclude<keyof I_4, "message">]: never; }>(object: I_4): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").ConvertMessageToObjectRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").ConvertMessageToObjectResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").ConvertMessageToObjectResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").ConvertMessageToObjectResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").ConvertMessageToObjectResponse): unknown;
                    fromPartial<I_5 extends {
                        dict?: {
                            [x: string]: string | undefined;
                        } | undefined;
                    } & {
                        dict?: ({
                            [x: string]: string | undefined;
                        } & {
                            [x: string]: string | undefined;
                        } & { [K_6 in Exclude<keyof I_5["dict"], string | number>]: never; }) | undefined;
                    } & { [K_7 in Exclude<keyof I_5, "dict">]: never; }>(object: I_5): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").ConvertMessageToObjectResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly sendAsync: {
                readonly name: "SendAsync";
                readonly requestType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SendAsyncRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SendAsyncRequest;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SendAsyncRequest;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SendAsyncRequest): unknown;
                    fromPartial<I_6 extends {
                        id?: number | undefined;
                        method?: string | undefined;
                        jsonParams?: string | undefined;
                    } & {
                        id?: number | undefined;
                        method?: string | undefined;
                        jsonParams?: string | undefined;
                    } & { [K_8 in Exclude<keyof I_6, keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SendAsyncRequest>]: never; }>(object: I_6): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SendAsyncRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SendAsyncResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SendAsyncResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SendAsyncResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SendAsyncResponse): unknown;
                    fromPartial<I_7 extends {
                        jsonAnyResponse?: string | undefined;
                    } & {
                        jsonAnyResponse?: string | undefined;
                    } & { [K_9 in Exclude<keyof I_7, "jsonAnyResponse">]: never; }>(object: I_7): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").SendAsyncResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly getUserAccount: {
                readonly name: "GetUserAccount";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").GetUserAccountRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").GetUserAccountRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").GetUserAccountRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").GetUserAccountRequest): unknown;
                    fromPartial<I_8 extends {} & {} & { [K_10 in Exclude<keyof I_8, never>]: never; }>(_: I_8): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").GetUserAccountRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").GetUserAccountResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").GetUserAccountResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").GetUserAccountResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").GetUserAccountResponse): unknown;
                    fromPartial<I_9 extends {
                        address?: string | undefined;
                    } & {
                        address?: string | undefined;
                    } & { [K_11 in Exclude<keyof I_9, "address">]: never; }>(object: I_9): import("@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen").GetUserAccountResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
        };
    }>, Context>;
    function createLegacy<Context extends {}>(clientPort: RpcClientPort): {
        /**
         * Requires a generic payment in ETH or ERC20.
         * @param  {string} [toAddress] - NFT asset id.
         * @param  {number} [amount] - Exact amount of the order.
         * @param  {string} [currency] - ETH or ERC20 supported token symbol
         */
        requirePayment(toAddress: string, amount: number, currency: string): Promise<any>;
        /**
         * Takes a dictionary, converts it to string with correct format and signs it.
         * @param  {messageToSign} [MessageDict] - Message in an object format.
         * @return {object} - Promise of message and signature in an object.
         */
        signMessage(message: MessageDict): Promise<{
            message: string;
            hexEncodedMessage: string;
            signature: string;
        }>;
        /**
         * Takes a message string, parses it and converts to object.
         * @param  {message} [string] - Message in a string format.
         * @return {object} - Promise of message as a MessageDict.
         * @internal
         */
        convertMessageToObject(message: string): Promise<MessageDict>;
        /**
         * Used to build a Ethereum provider
         */
        sendAsync(message: RPCSendableMessage): Promise<any>;
        /**
         * Returns the user's public key (address)
         */
        getUserAccount(): Promise<string>;
    };
}
