import { RpcClientPort } from '@dcl/rpc/dist/types';
import type { Snapshots } from '@dcl/schemas/dist/platform/profile/avatar';
/** THIS TYPE IS APPEND ONLY BECAUSE IT IS USED FOR THE SDK Apis */
export declare type UserData = {
    displayName: string;
    publicKey: string | null;
    hasConnectedWeb3: boolean;
    userId: string;
    version: number;
    avatar: AvatarForUserData;
};
export declare type AvatarForUserData = {
    bodyShape: string;
    skinColor: string;
    hairColor: string;
    eyeColor: string;
    wearables: string[];
    emotes?: {
        slot: number;
        urn: string;
    }[];
    snapshots: Snapshots;
};
export declare namespace UserIdentityServiceClient {
    function create<Context extends {}>(clientPort: RpcClientPort): import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
        readonly name: "UserIdentityService";
        readonly fullName: "decentraland.kernel.apis.UserIdentityService";
        readonly methods: {
            readonly getUserPublicKey: {
                readonly name: "GetUserPublicKey";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserPublicKeyRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserPublicKeyRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserPublicKeyRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserPublicKeyRequest): unknown;
                    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserPublicKeyRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserPublicKeyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserPublicKeyResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserPublicKeyResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserPublicKeyResponse): unknown;
                    fromPartial<I_1 extends {
                        address?: string | undefined;
                    } & {
                        address?: string | undefined;
                    } & { [K_1 in Exclude<keyof I_1, "address">]: never; }>(object: I_1): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserPublicKeyResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly getUserData: {
                readonly name: "GetUserData";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserDataRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserDataRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserDataRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserDataRequest): unknown;
                    fromPartial<I_2 extends {} & {} & { [K_2 in Exclude<keyof I_2, never>]: never; }>(_: I_2): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserDataRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserDataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserDataResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserDataResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserDataResponse): unknown;
                    fromPartial<I_3 extends {
                        data?: {
                            displayName?: string | undefined;
                            publicKey?: string | undefined;
                            hasConnectedWeb3?: boolean | undefined;
                            userId?: string | undefined;
                            version?: number | undefined;
                            avatar?: {
                                bodyShape?: string | undefined;
                                skinColor?: string | undefined;
                                hairColor?: string | undefined;
                                eyeColor?: string | undefined;
                                wearables?: string[] | undefined;
                                snapshots?: {
                                    face256?: string | undefined;
                                    body?: string | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    } & {
                        data?: ({
                            displayName?: string | undefined;
                            publicKey?: string | undefined;
                            hasConnectedWeb3?: boolean | undefined;
                            userId?: string | undefined;
                            version?: number | undefined;
                            avatar?: {
                                bodyShape?: string | undefined;
                                skinColor?: string | undefined;
                                hairColor?: string | undefined;
                                eyeColor?: string | undefined;
                                wearables?: string[] | undefined;
                                snapshots?: {
                                    face256?: string | undefined;
                                    body?: string | undefined;
                                } | undefined;
                            } | undefined;
                        } & {
                            displayName?: string | undefined;
                            publicKey?: string | undefined;
                            hasConnectedWeb3?: boolean | undefined;
                            userId?: string | undefined;
                            version?: number | undefined;
                            avatar?: ({
                                bodyShape?: string | undefined;
                                skinColor?: string | undefined;
                                hairColor?: string | undefined;
                                eyeColor?: string | undefined;
                                wearables?: string[] | undefined;
                                snapshots?: {
                                    face256?: string | undefined;
                                    body?: string | undefined;
                                } | undefined;
                            } & {
                                bodyShape?: string | undefined;
                                skinColor?: string | undefined;
                                hairColor?: string | undefined;
                                eyeColor?: string | undefined;
                                wearables?: (string[] & string[] & { [K_3 in Exclude<keyof I_3["data"]["avatar"]["wearables"], keyof string[]>]: never; }) | undefined;
                                snapshots?: ({
                                    face256?: string | undefined;
                                    body?: string | undefined;
                                } & {
                                    face256?: string | undefined;
                                    body?: string | undefined;
                                } & { [K_4 in Exclude<keyof I_3["data"]["avatar"]["snapshots"], keyof import("@dcl/protocol/out-ts/decentraland/common/sdk/user_data.gen").Snapshots>]: never; }) | undefined;
                            } & { [K_5 in Exclude<keyof I_3["data"]["avatar"], keyof import("@dcl/protocol/out-ts/decentraland/common/sdk/user_data.gen").AvatarForUserData>]: never; }) | undefined;
                        } & { [K_6 in Exclude<keyof I_3["data"], keyof import("@dcl/protocol/out-ts/decentraland/common/sdk/user_data.gen").UserData>]: never; }) | undefined;
                    } & { [K_7 in Exclude<keyof I_3, "data">]: never; }>(object: I_3): import("@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen").GetUserDataResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
        };
    }>, Context>;
    function createLegacy<Context extends {}>(clientPort: RpcClientPort): {
        getUserPublicKey(): Promise<string | null>;
        getUserData(): Promise<UserData | null>;
    };
}
