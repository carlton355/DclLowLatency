"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortableExperienceServiceClient = void 0;
const codegen = __importStar(require("@dcl/rpc/dist/codegen"));
const portable_experiences_gen_1 = require("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen");
var PortableExperienceServiceClient;
(function (PortableExperienceServiceClient) {
    function create(clientPort) {
        return codegen.loadService(clientPort, portable_experiences_gen_1.PortableExperiencesServiceDefinition);
    }
    PortableExperienceServiceClient.create = create;
    function createLegacy(clientPort) {
        const originalService = codegen.loadService(clientPort, portable_experiences_gen_1.PortableExperiencesServiceDefinition);
        return {
            ...originalService,
            /**
             * Starts a portable experience.
             * @param  {SpawnPortableExperienceParameters} [pid] - Information to identify the PE
             *
             * Returns the handle of the portable experience.
             */
            async spawn(pid) {
                return await originalService.spawn({ pid });
            },
            /**
             * Stops a portable experience. Only the executor that spawned the portable experience has permission to kill it.
             * @param  {string} [pid] - The portable experience process id
             *
             * Returns true if was able to kill the portable experience, false if not.
             */
            async kill(pid) {
                return (await originalService.kill({ pid })).status;
            },
            /**
             * Stops a portable experience from the current running portable scene.
             *
             * Returns true if was able to kill the portable experience, false if not.
             */
            async exit() {
                return (await originalService.exit({})).status;
            },
            /**
             *
             * Returns current portable experiences loaded with ids and parentCid
             */
            async getPortableExperiencesLoaded() {
                return {
                    portableExperiences: (await originalService.getPortableExperiencesLoaded({})).loaded
                };
            }
        };
    }
    PortableExperienceServiceClient.createLegacy = createLegacy;
})(PortableExperienceServiceClient = exports.PortableExperienceServiceClient || (exports.PortableExperienceServiceClient = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9ydGFibGVFeHBlcmllbmNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93b3JrZXIvY2xpZW50L1BvcnRhYmxlRXhwZXJpZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrREFBZ0Q7QUFFaEQscUhBQTZIO0FBVzdILElBQWlCLCtCQUErQixDQXdEL0M7QUF4REQsV0FBaUIsK0JBQStCO0lBQzlDLFNBQWdCLE1BQU0sQ0FBcUIsVUFBeUI7UUFDbEUsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUN4QixVQUFVLEVBQ1YsK0RBQW9DLENBQ3JDLENBQUE7SUFDSCxDQUFDO0lBTGUsc0NBQU0sU0FLckIsQ0FBQTtJQUNELFNBQWdCLFlBQVksQ0FBcUIsVUFBeUI7UUFDeEUsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FDekMsVUFBVSxFQUNWLCtEQUFvQyxDQUNyQyxDQUFBO1FBRUQsT0FBTztZQUNMLEdBQUcsZUFBZTtZQUVsQjs7Ozs7ZUFLRztZQUNILEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBMEI7Z0JBQ3BDLE9BQU8sTUFBTSxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtZQUM3QyxDQUFDO1lBRUQ7Ozs7O2VBS0c7WUFDSCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQTBCO2dCQUNuQyxPQUFPLENBQUMsTUFBTSxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtZQUNyRCxDQUFDO1lBRUQ7Ozs7ZUFJRztZQUNILEtBQUssQ0FBQyxJQUFJO2dCQUNSLE9BQU8sQ0FBQyxNQUFNLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7WUFDaEQsQ0FBQztZQUVEOzs7ZUFHRztZQUNILEtBQUssQ0FBQyw0QkFBNEI7Z0JBQ2hDLE9BQU87b0JBQ0wsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLGVBQWUsQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU07aUJBQ3JGLENBQUE7WUFDSCxDQUFDO1NBQ0YsQ0FBQTtJQUNILENBQUM7SUFoRGUsNENBQVksZUFnRDNCLENBQUE7QUFDSCxDQUFDLEVBeERnQiwrQkFBK0IsR0FBL0IsdUNBQStCLEtBQS9CLHVDQUErQixRQXdEL0MifQ==