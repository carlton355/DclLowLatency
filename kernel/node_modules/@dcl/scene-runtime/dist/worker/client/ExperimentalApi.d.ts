import { RpcClientPort } from '@dcl/rpc/dist/types';
export declare function createExperimentalApiServiceClient<Context extends {}>(clientPort: RpcClientPort): import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
    readonly name: "ExperimentalApiService";
    readonly fullName: "decentraland.kernel.apis.ExperimentalApiService";
    readonly methods: {
        readonly sendToRenderer: {
            readonly name: "SendToRenderer";
            readonly requestType: {
                encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").SendToRendererRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").SendToRendererRequest;
                fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").SendToRendererRequest;
                toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").SendToRendererRequest): unknown;
                fromPartial<I extends {
                    data?: Uint8Array | undefined;
                } & {
                    data?: Uint8Array | undefined;
                } & { [K in Exclude<keyof I, "data">]: never; }>(object: I): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").SendToRendererRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").SendToResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").SendToResponse;
                fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").SendToResponse;
                toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").SendToResponse): unknown;
                fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").SendToResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly messageFromRenderer: {
            readonly name: "MessageFromRenderer";
            readonly requestType: {
                encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").MessageFromRendererRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").MessageFromRendererRequest;
                fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").MessageFromRendererRequest;
                toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").MessageFromRendererRequest): unknown;
                fromPartial<I_2 extends {} & {} & { [K_2 in Exclude<keyof I_2, never>]: never; }>(_: I_2): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").MessageFromRendererRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").MessageFromRendererResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").MessageFromRendererResponse;
                fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").MessageFromRendererResponse;
                toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").MessageFromRendererResponse): unknown;
                fromPartial<I_3 extends {
                    data?: Uint8Array[] | undefined;
                } & {
                    data?: (Uint8Array[] & Uint8Array[] & { [K_3 in Exclude<keyof I_3["data"], keyof Uint8Array[]>]: never; }) | undefined;
                } & { [K_4 in Exclude<keyof I_3, "data">]: never; }>(object: I_3): import("@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen").MessageFromRendererResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
}>, Context>;
