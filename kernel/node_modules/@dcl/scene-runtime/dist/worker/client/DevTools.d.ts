import { RpcClientPort } from '@dcl/rpc/dist/types';
export declare function createDevToolsServiceClient<Context extends {}>(clientPort: RpcClientPort): import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
    readonly name: "DevToolsService";
    readonly fullName: "decentraland.kernel.apis.DevToolsService";
    readonly methods: {
        readonly event: {
            readonly name: "Event";
            readonly requestType: {
                encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen").DevToolsBody, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen").DevToolsBody;
                fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen").DevToolsBody;
                toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen").DevToolsBody): unknown;
                fromPartial<I extends {
                    type?: string | undefined;
                    jsonPayload?: string | undefined;
                } & {
                    type?: string | undefined;
                    jsonPayload?: string | undefined;
                } & { [K in Exclude<keyof I, keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen").DevToolsBody>]: never; }>(object: I): import("@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen").DevToolsBody;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen").EventResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen").EventResponse;
                fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen").EventResponse;
                toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen").EventResponse): unknown;
                fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): import("@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen").EventResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
}>, Context>;
