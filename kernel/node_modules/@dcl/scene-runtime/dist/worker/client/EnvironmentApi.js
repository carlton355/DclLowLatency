"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentApiServiceClient = void 0;
const codegen = __importStar(require("@dcl/rpc/dist/codegen"));
const environment_api_gen_1 = require("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen");
var EnvironmentApiServiceClient;
(function (EnvironmentApiServiceClient) {
    function create(clientPort) {
        return codegen.loadService(clientPort, environment_api_gen_1.EnvironmentApiServiceDefinition);
    }
    EnvironmentApiServiceClient.create = create;
    function createLegacy(clientPort) {
        const originalService = codegen.loadService(clientPort, environment_api_gen_1.EnvironmentApiServiceDefinition);
        return {
            ...originalService,
            async getBootstrapData() {
                const res = await originalService.getBootstrapData({});
                const sceneMetadata = JSON.parse(res.entity?.metadataJson || '{}');
                return {
                    sceneId: res.id,
                    name: sceneMetadata.display?.title || 'Unnamed',
                    main: sceneMetadata.main,
                    baseUrl: res.baseUrl,
                    mappings: res.entity?.content || [],
                    useFPSThrottling: res.useFPSThrottling,
                    data: sceneMetadata
                };
            },
            /**
             * Returns if the feature flag unsafe-request is on
             */
            async areUnsafeRequestAllowed() {
                return (await originalService.areUnsafeRequestAllowed({})).status;
            },
            /**
             * Returns the current connected realm
             */
            async getCurrentRealm() {
                const res = await originalService.getCurrentRealm({});
                return res.currentRealm;
            },
            /**
             * Returns whether the scene is running in preview mode or not
             */
            async isPreviewMode() {
                const res = await originalService.isPreviewMode({});
                return res.isPreview;
            },
            /**
             * Returns explorer configuration and environment information
             */
            async getExplorerConfiguration() {
                return await originalService.getExplorerConfiguration({});
            },
            /**
             * Returns what platform is running the scene
             */
            async getPlatform() {
                return (await originalService.getPlatform({})).platform;
            },
            /**
             * Returns Decentraland's time
             */
            async getDecentralandTime() {
                return await originalService.getDecentralandTime({});
            }
        };
    }
    EnvironmentApiServiceClient.createLegacy = createLegacy;
})(EnvironmentApiServiceClient = exports.EnvironmentApiServiceClient || (exports.EnvironmentApiServiceClient = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW52aXJvbm1lbnRBcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ya2VyL2NsaWVudC9FbnZpcm9ubWVudEFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtEQUFnRDtBQUloRCwyR0FBbUg7QUErQm5ILElBQWlCLDJCQUEyQixDQXdFM0M7QUF4RUQsV0FBaUIsMkJBQTJCO0lBQzFDLFNBQWdCLE1BQU0sQ0FBcUIsVUFBeUI7UUFDbEUsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUEyQyxVQUFVLEVBQUUscURBQStCLENBQUMsQ0FBQTtJQUNuSCxDQUFDO0lBRmUsa0NBQU0sU0FFckIsQ0FBQTtJQUVELFNBQWdCLFlBQVksQ0FBcUIsVUFBeUI7UUFDeEUsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FDekMsVUFBVSxFQUNWLHFEQUErQixDQUNoQyxDQUFBO1FBQ0QsT0FBTztZQUNMLEdBQUcsZUFBZTtZQUVsQixLQUFLLENBQUMsZ0JBQWdCO2dCQUNwQixNQUFNLEdBQUcsR0FBRyxNQUFNLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtnQkFDdEQsTUFBTSxhQUFhLEdBQVUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFlBQVksSUFBSSxJQUFJLENBQUMsQ0FBQTtnQkFDekUsT0FBTztvQkFDTCxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUU7b0JBQ2YsSUFBSSxFQUFFLGFBQWEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJLFNBQVM7b0JBQy9DLElBQUksRUFBRSxhQUFhLENBQUMsSUFBSTtvQkFDeEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO29CQUNwQixRQUFRLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLElBQUksRUFBRTtvQkFDbkMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLGdCQUFnQjtvQkFDdEMsSUFBSSxFQUFFLGFBQWE7aUJBQ3BCLENBQUE7WUFDSCxDQUFDO1lBRUQ7O2VBRUc7WUFDSCxLQUFLLENBQUMsdUJBQXVCO2dCQUMzQixPQUFPLENBQUMsTUFBTSxlQUFlLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7WUFDbkUsQ0FBQztZQUVEOztlQUVHO1lBQ0gsS0FBSyxDQUFDLGVBQWU7Z0JBQ25CLE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBZSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtnQkFDckQsT0FBTyxHQUFHLENBQUMsWUFBWSxDQUFBO1lBQ3pCLENBQUM7WUFFRDs7ZUFFRztZQUNILEtBQUssQ0FBQyxhQUFhO2dCQUNqQixNQUFNLEdBQUcsR0FBRyxNQUFNLGVBQWUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7Z0JBQ25ELE9BQU8sR0FBRyxDQUFDLFNBQVMsQ0FBQTtZQUN0QixDQUFDO1lBRUQ7O2VBRUc7WUFDSCxLQUFLLENBQUMsd0JBQXdCO2dCQUM1QixPQUFPLE1BQU0sZUFBZSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQzNELENBQUM7WUFFRDs7ZUFFRztZQUNILEtBQUssQ0FBQyxXQUFXO2dCQUNmLE9BQU8sQ0FBQyxNQUFNLGVBQWUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFvQixDQUFBO1lBQ3JFLENBQUM7WUFFRDs7ZUFFRztZQUNILEtBQUssQ0FBQyxtQkFBbUI7Z0JBQ3ZCLE9BQU8sTUFBTSxlQUFlLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDdEQsQ0FBQztTQUNGLENBQUE7SUFDSCxDQUFDO0lBbEVlLHdDQUFZLGVBa0UzQixDQUFBO0FBQ0gsQ0FBQyxFQXhFZ0IsMkJBQTJCLEdBQTNCLG1DQUEyQixLQUEzQixtQ0FBMkIsUUF3RTNDIn0=