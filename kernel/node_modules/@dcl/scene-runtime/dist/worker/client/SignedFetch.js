"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignedFetchServiceClient = void 0;
const codegen = __importStar(require("@dcl/rpc/dist/codegen"));
const signed_fetch_gen_1 = require("@dcl/protocol/out-ts/decentraland/kernel/apis/signed_fetch.gen");
var SignedFetchServiceClient;
(function (SignedFetchServiceClient) {
    function create(clientPort) {
        return codegen.loadService(clientPort, signed_fetch_gen_1.SignedFetchServiceDefinition);
    }
    SignedFetchServiceClient.create = create;
    function createLegacy(clientPort) {
        const originalService = codegen.loadService(clientPort, signed_fetch_gen_1.SignedFetchServiceDefinition);
        return {
            ...originalService,
            async signedFetch(url, originalInit) {
                let init = undefined;
                if (originalInit) {
                    init = { headers: {} };
                    if (originalInit.headers && typeof originalInit.headers === 'object') {
                        init.headers = originalInit.headers;
                    }
                    if (originalInit.body && typeof originalInit.body === 'string') {
                        init.body = originalInit.body;
                    }
                    if (originalInit.method && typeof originalInit.method === 'string') {
                        init.method = originalInit.method;
                    }
                }
                const responseBodyType = originalInit?.responseBodyType || 'text';
                const result = await originalService.signedFetch({ url, init });
                return {
                    ok: result.ok,
                    status: result.status,
                    statusText: result.statusText,
                    headers: result.headers,
                    json: responseBodyType === 'json' ? JSON.parse(result.body) : undefined,
                    text: responseBodyType === 'text' ? result.body : undefined
                };
            }
        };
    }
    SignedFetchServiceClient.createLegacy = createLegacy;
})(SignedFetchServiceClient = exports.SignedFetchServiceClient || (exports.SignedFetchServiceClient = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbmVkRmV0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ya2VyL2NsaWVudC9TaWduZWRGZXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtEQUFnRDtBQUVoRCxxR0FBNEg7QUFlNUgsSUFBaUIsd0JBQXdCLENBeUN4QztBQXpDRCxXQUFpQix3QkFBd0I7SUFDdkMsU0FBZ0IsTUFBTSxDQUFxQixVQUF5QjtRQUNsRSxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQXdDLFVBQVUsRUFBRSwrQ0FBNEIsQ0FBQyxDQUFBO0lBQzdHLENBQUM7SUFGZSwrQkFBTSxTQUVyQixDQUFBO0lBRUQsU0FBZ0IsWUFBWSxDQUFxQixVQUF5QjtRQUN4RSxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUN6QyxVQUFVLEVBQ1YsK0NBQTRCLENBQzdCLENBQUE7UUFFRCxPQUFPO1lBQ0wsR0FBRyxlQUFlO1lBQ2xCLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBVyxFQUFFLFlBQW9DO2dCQUNqRSxJQUFJLElBQUksR0FBOEIsU0FBUyxDQUFBO2dCQUMvQyxJQUFJLFlBQVksRUFBRTtvQkFDaEIsSUFBSSxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFBO29CQUN0QixJQUFJLFlBQVksQ0FBQyxPQUFPLElBQUksT0FBTyxZQUFZLENBQUMsT0FBTyxLQUFLLFFBQVEsRUFBRTt3QkFDcEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBaUMsQ0FBQTtxQkFDOUQ7b0JBQ0QsSUFBSSxZQUFZLENBQUMsSUFBSSxJQUFJLE9BQU8sWUFBWSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7d0JBQzlELElBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQTtxQkFDOUI7b0JBQ0QsSUFBSSxZQUFZLENBQUMsTUFBTSxJQUFJLE9BQU8sWUFBWSxDQUFDLE1BQU0sS0FBSyxRQUFRLEVBQUU7d0JBQ2xFLElBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQTtxQkFDbEM7aUJBQ0Y7Z0JBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxZQUFZLEVBQUUsZ0JBQWdCLElBQUksTUFBTSxDQUFBO2dCQUNqRSxNQUFNLE1BQU0sR0FBRyxNQUFNLGVBQWUsQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtnQkFFL0QsT0FBTztvQkFDTCxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUU7b0JBQ2IsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO29CQUNyQixVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVU7b0JBQzdCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTztvQkFDdkIsSUFBSSxFQUFFLGdCQUFnQixLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7b0JBQ3ZFLElBQUksRUFBRSxnQkFBZ0IsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVM7aUJBQzVELENBQUE7WUFDSCxDQUFDO1NBQ0YsQ0FBQTtJQUNILENBQUM7SUFuQ2UscUNBQVksZUFtQzNCLENBQUE7QUFDSCxDQUFDLEVBekNnQix3QkFBd0IsR0FBeEIsZ0NBQXdCLEtBQXhCLGdDQUF3QixRQXlDeEMifQ==