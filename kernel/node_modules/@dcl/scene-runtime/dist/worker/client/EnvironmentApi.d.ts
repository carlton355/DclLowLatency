import { RpcClientPort } from '@dcl/rpc/dist/types';
import type { Scene } from '@dcl/schemas/dist/platform/scene/index';
import type { ContentMapping } from '@dcl/schemas/dist/misc/content-mapping';
export declare type Realm = {
    domain: string;
    /** @deprecated use room instead */
    layer: string;
    room: string;
    serverName: string;
    displayName: string;
};
export declare type ExplorerConfiguration = {
    clientUri: string;
    configurations: Record<string, string | number | boolean>;
};
export declare const enum Platform {
    DESKTOP = "desktop",
    BROWSER = "browser"
}
export declare type BootstrapData = {
    sceneId: string;
    name: string;
    main: string;
    baseUrl: string;
    mappings: ContentMapping[];
    useFPSThrottling: boolean;
    data: Scene;
};
export declare namespace EnvironmentApiServiceClient {
    function create<Context extends {}>(clientPort: RpcClientPort): import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
        readonly name: "EnvironmentApiService";
        readonly fullName: "decentraland.kernel.apis.EnvironmentApiService";
        readonly methods: {
            readonly getBootstrapData: {
                readonly name: "GetBootstrapData";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetBootstrapDataRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetBootstrapDataRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetBootstrapDataRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetBootstrapDataRequest): unknown;
                    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetBootstrapDataRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").BootstrapDataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").BootstrapDataResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").BootstrapDataResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").BootstrapDataResponse): unknown;
                    fromPartial<I_1 extends {
                        id?: string | undefined;
                        baseUrl?: string | undefined;
                        entity?: {
                            content?: {
                                file?: string | undefined;
                                hash?: string | undefined;
                            }[] | undefined;
                            metadataJson?: string | undefined;
                        } | undefined;
                        useFPSThrottling?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        baseUrl?: string | undefined;
                        entity?: ({
                            content?: {
                                file?: string | undefined;
                                hash?: string | undefined;
                            }[] | undefined;
                            metadataJson?: string | undefined;
                        } & {
                            content?: ({
                                file?: string | undefined;
                                hash?: string | undefined;
                            }[] & ({
                                file?: string | undefined;
                                hash?: string | undefined;
                            } & {
                                file?: string | undefined;
                                hash?: string | undefined;
                            } & { [K_1 in Exclude<keyof I_1["entity"]["content"][number], keyof import("@dcl/protocol/out-ts/decentraland/common/content_mapping.gen").ContentMapping>]: never; })[] & { [K_2 in Exclude<keyof I_1["entity"]["content"], keyof {
                                file?: string | undefined;
                                hash?: string | undefined;
                            }[]>]: never; }) | undefined;
                            metadataJson?: string | undefined;
                        } & { [K_3 in Exclude<keyof I_1["entity"], keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").MinimalRunnableEntity>]: never; }) | undefined;
                        useFPSThrottling?: boolean | undefined;
                    } & { [K_4 in Exclude<keyof I_1, keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").BootstrapDataResponse>]: never; }>(object: I_1): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").BootstrapDataResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly isPreviewMode: {
                readonly name: "IsPreviewMode";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").IsPreviewModeRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").IsPreviewModeRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").IsPreviewModeRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").IsPreviewModeRequest): unknown;
                    fromPartial<I_2 extends {} & {} & { [K_5 in Exclude<keyof I_2, never>]: never; }>(_: I_2): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").IsPreviewModeRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").PreviewModeResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").PreviewModeResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").PreviewModeResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").PreviewModeResponse): unknown;
                    fromPartial<I_3 extends {
                        isPreview?: boolean | undefined;
                    } & {
                        isPreview?: boolean | undefined;
                    } & { [K_6 in Exclude<keyof I_3, "isPreview">]: never; }>(object: I_3): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").PreviewModeResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly getPlatform: {
                readonly name: "GetPlatform";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetPlatformRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetPlatformRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetPlatformRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetPlatformRequest): unknown;
                    fromPartial<I_4 extends {} & {} & { [K_7 in Exclude<keyof I_4, never>]: never; }>(_: I_4): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetPlatformRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetPlatformResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetPlatformResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetPlatformResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetPlatformResponse): unknown;
                    fromPartial<I_5 extends {
                        platform?: string | undefined;
                    } & {
                        platform?: string | undefined;
                    } & { [K_8 in Exclude<keyof I_5, "platform">]: never; }>(object: I_5): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetPlatformResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly areUnsafeRequestAllowed: {
                readonly name: "AreUnsafeRequestAllowed";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").AreUnsafeRequestAllowedRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").AreUnsafeRequestAllowedRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").AreUnsafeRequestAllowedRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").AreUnsafeRequestAllowedRequest): unknown;
                    fromPartial<I_6 extends {} & {} & { [K_9 in Exclude<keyof I_6, never>]: never; }>(_: I_6): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").AreUnsafeRequestAllowedRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").AreUnsafeRequestAllowedResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").AreUnsafeRequestAllowedResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").AreUnsafeRequestAllowedResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").AreUnsafeRequestAllowedResponse): unknown;
                    fromPartial<I_7 extends {
                        status?: boolean | undefined;
                    } & {
                        status?: boolean | undefined;
                    } & { [K_10 in Exclude<keyof I_7, "status">]: never; }>(object: I_7): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").AreUnsafeRequestAllowedResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly getCurrentRealm: {
                readonly name: "GetCurrentRealm";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetCurrentRealmRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetCurrentRealmRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetCurrentRealmRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetCurrentRealmRequest): unknown;
                    fromPartial<I_8 extends {} & {} & { [K_11 in Exclude<keyof I_8, never>]: never; }>(_: I_8): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetCurrentRealmRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetCurrentRealmResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetCurrentRealmResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetCurrentRealmResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetCurrentRealmResponse): unknown;
                    fromPartial<I_9 extends {
                        currentRealm?: {
                            domain?: string | undefined;
                            layer?: string | undefined;
                            room?: string | undefined;
                            serverName?: string | undefined;
                            displayName?: string | undefined;
                            protocol?: string | undefined;
                        } | undefined;
                    } & {
                        currentRealm?: ({
                            domain?: string | undefined;
                            layer?: string | undefined;
                            room?: string | undefined;
                            serverName?: string | undefined;
                            displayName?: string | undefined;
                            protocol?: string | undefined;
                        } & {
                            domain?: string | undefined;
                            layer?: string | undefined;
                            room?: string | undefined;
                            serverName?: string | undefined;
                            displayName?: string | undefined;
                            protocol?: string | undefined;
                        } & { [K_12 in Exclude<keyof I_9["currentRealm"], keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").EnvironmentRealm>]: never; }) | undefined;
                    } & { [K_13 in Exclude<keyof I_9, "currentRealm">]: never; }>(object: I_9): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetCurrentRealmResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly getExplorerConfiguration: {
                readonly name: "GetExplorerConfiguration";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetExplorerConfigurationRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetExplorerConfigurationRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetExplorerConfigurationRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetExplorerConfigurationRequest): unknown;
                    fromPartial<I_10 extends {} & {} & { [K_14 in Exclude<keyof I_10, never>]: never; }>(_: I_10): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetExplorerConfigurationRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetExplorerConfigurationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetExplorerConfigurationResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetExplorerConfigurationResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetExplorerConfigurationResponse): unknown;
                    fromPartial<I_11 extends {
                        clientUri?: string | undefined;
                        configurations?: {
                            [x: string]: string | undefined;
                        } | undefined;
                    } & {
                        clientUri?: string | undefined;
                        configurations?: ({
                            [x: string]: string | undefined;
                        } & {
                            [x: string]: string | undefined;
                        } & { [K_15 in Exclude<keyof I_11["configurations"], string | number>]: never; }) | undefined;
                    } & { [K_16 in Exclude<keyof I_11, keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetExplorerConfigurationResponse>]: never; }>(object: I_11): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetExplorerConfigurationResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly getDecentralandTime: {
                readonly name: "GetDecentralandTime";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetDecentralandTimeRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetDecentralandTimeRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetDecentralandTimeRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetDecentralandTimeRequest): unknown;
                    fromPartial<I_12 extends {} & {} & { [K_17 in Exclude<keyof I_12, never>]: never; }>(_: I_12): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetDecentralandTimeRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetDecentralandTimeResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetDecentralandTimeResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetDecentralandTimeResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetDecentralandTimeResponse): unknown;
                    fromPartial<I_13 extends {
                        seconds?: number | undefined;
                    } & {
                        seconds?: number | undefined;
                    } & { [K_18 in Exclude<keyof I_13, "seconds">]: never; }>(object: I_13): import("@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen").GetDecentralandTimeResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
        };
    }>, Context>;
    function createLegacy<Context extends {}>(clientPort: RpcClientPort): {
        getBootstrapData(): Promise<BootstrapData>;
        /**
         * Returns if the feature flag unsafe-request is on
         */
        areUnsafeRequestAllowed(): Promise<boolean>;
        /**
         * Returns the current connected realm
         */
        getCurrentRealm(): Promise<Realm | undefined>;
        /**
         * Returns whether the scene is running in preview mode or not
         */
        isPreviewMode(): Promise<boolean>;
        /**
         * Returns explorer configuration and environment information
         */
        getExplorerConfiguration(): Promise<ExplorerConfiguration>;
        /**
         * Returns what platform is running the scene
         */
        getPlatform(): Promise<Platform>;
        /**
         * Returns Decentraland's time
         */
        getDecentralandTime(): Promise<{
            seconds: number;
        }>;
    };
}
