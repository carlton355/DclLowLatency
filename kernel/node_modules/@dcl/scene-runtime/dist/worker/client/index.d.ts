import { CommunicationsControllerServiceClient } from './CommunicationsController';
import { createDevToolsServiceClient } from './DevTools';
import { createEngineApiServiceClient } from './EngineApi';
import { EnvironmentApiServiceClient } from './EnvironmentApi';
import { EthereumControllerServiceClient } from './EthereumController';
import { createExperimentalApiServiceClient } from './ExperimentalApi';
import { ParcelIdentityServiceClient } from './ParcelIdentity';
import { createPermissionsServiceClient } from './Permissions';
import { PlayersServiceClient } from './Players';
import { PortableExperienceServiceClient } from './PortableExperiences';
import { RestrictedActionsServiceClient } from './RestrictedActions';
import { SignedFetchServiceClient } from './SignedFetch';
import { createSocialControllerServiceClient } from './SocialController';
import { UserActionModuleServiceClient } from './UserActionModule';
import { UserIdentityServiceClient } from './UserIdentity';
import { createLegacyWeb3Provider } from './Web3Provider';
export declare const LoadableApis: {
    DevTools: typeof createDevToolsServiceClient;
    EngineApi: typeof createEngineApiServiceClient;
    ExperimentalApi: typeof createExperimentalApiServiceClient;
    Permissions: typeof createPermissionsServiceClient;
    SignedFetch: typeof SignedFetchServiceClient.create;
    CommunicationsController: typeof CommunicationsControllerServiceClient.create;
    EnvironmentApi: typeof EnvironmentApiServiceClient.create;
    EthereumController: typeof EthereumControllerServiceClient.create;
    ParcelIdentity: typeof ParcelIdentityServiceClient.create;
    Players: typeof PlayersServiceClient.create;
    PortableExperience: typeof PortableExperienceServiceClient.create;
    RestrictedActions: typeof RestrictedActionsServiceClient.create;
    UserActionModule: typeof UserActionModuleServiceClient.create;
    UserIdentity: typeof UserIdentityServiceClient.create;
    LegacySignedFetch: typeof SignedFetchServiceClient.createLegacy;
    LegacyCommunicationsController: typeof CommunicationsControllerServiceClient.createLegacy;
    LegacyEnvironmentAPI: typeof EnvironmentApiServiceClient.createLegacy;
    LegacyEthereumController: typeof EthereumControllerServiceClient.createLegacy;
    LegacyParcelIdentity: typeof ParcelIdentityServiceClient.createLegacy;
    LegacyPlayers: typeof PlayersServiceClient.createLegacy;
    LegacyPortableExperience: typeof PortableExperienceServiceClient.createLegacy;
    LegacyRestrictedActions: typeof RestrictedActionsServiceClient.createLegacy;
    LegacyRestrictedActionModule: typeof RestrictedActionsServiceClient.createLegacy;
    LegacyUserActionModule: typeof UserActionModuleServiceClient.createLegacy;
    LegacyIdentity: typeof UserIdentityServiceClient.createLegacy;
    "Legacyweb3-provider": typeof createLegacyWeb3Provider;
    LegacySocialController: typeof createSocialControllerServiceClient;
};
export declare type ILoadedModules<T> = {
    [K in keyof T]?: T[K] extends (...args: any[]) => any ? Awaited<ReturnType<T[K]>> : never;
};
export declare type LoadedModules = ILoadedModules<typeof LoadableApis>;
