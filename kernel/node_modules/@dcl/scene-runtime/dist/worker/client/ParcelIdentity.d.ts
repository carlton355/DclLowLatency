import { RpcClientPort } from '@dcl/rpc/dist/types';
import type { Scene } from '@dcl/schemas/dist/platform/scene/index';
import type { ContentMapping } from '@dcl/schemas/dist/misc/content-mapping';
export declare type MappingsResponse = {
    parcel_id: string;
    root_cid: string;
    contents: Array<ContentMapping>;
};
export interface ILand {
    /**
     * sceneId: Now it is either an internal identifier or the rootCID.
     * In the future will change to the sceneCID
     */
    sceneId: string;
    sceneJsonData: Scene;
    baseUrl: string;
    baseUrlBundles: string;
    mappingsResponse: MappingsResponse;
}
export declare namespace ParcelIdentityServiceClient {
    function create<Context extends {}>(clientPort: RpcClientPort): import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
        readonly name: "ParcelIdentityService";
        readonly fullName: "decentraland.kernel.apis.ParcelIdentityService";
        readonly methods: {
            readonly getParcel: {
                readonly name: "GetParcel";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetParcelRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetParcelRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetParcelRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetParcelRequest): unknown;
                    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetParcelRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetParcelResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetParcelResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetParcelResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetParcelResponse): unknown;
                    fromPartial<I_1 extends {
                        land?: {
                            sceneId?: string | undefined;
                            sceneJsonData?: string | undefined;
                            baseUrl?: string | undefined;
                            baseUrlBundles?: string | undefined;
                            mappingsResponse?: {
                                parcelId?: string | undefined;
                                rootCid?: string | undefined;
                                contents?: {
                                    file?: string | undefined;
                                    hash?: string | undefined;
                                }[] | undefined;
                            } | undefined;
                        } | undefined;
                        cid?: string | undefined;
                    } & {
                        land?: ({
                            sceneId?: string | undefined;
                            sceneJsonData?: string | undefined;
                            baseUrl?: string | undefined;
                            baseUrlBundles?: string | undefined;
                            mappingsResponse?: {
                                parcelId?: string | undefined;
                                rootCid?: string | undefined;
                                contents?: {
                                    file?: string | undefined;
                                    hash?: string | undefined;
                                }[] | undefined;
                            } | undefined;
                        } & {
                            sceneId?: string | undefined;
                            sceneJsonData?: string | undefined;
                            baseUrl?: string | undefined;
                            baseUrlBundles?: string | undefined;
                            mappingsResponse?: ({
                                parcelId?: string | undefined;
                                rootCid?: string | undefined;
                                contents?: {
                                    file?: string | undefined;
                                    hash?: string | undefined;
                                }[] | undefined;
                            } & {
                                parcelId?: string | undefined;
                                rootCid?: string | undefined;
                                contents?: ({
                                    file?: string | undefined;
                                    hash?: string | undefined;
                                }[] & ({
                                    file?: string | undefined;
                                    hash?: string | undefined;
                                } & {
                                    file?: string | undefined;
                                    hash?: string | undefined;
                                } & { [K_1 in Exclude<keyof I_1["land"]["mappingsResponse"]["contents"][number], keyof import("@dcl/protocol/out-ts/decentraland/common/content_mapping.gen").ContentMapping>]: never; })[] & { [K_2 in Exclude<keyof I_1["land"]["mappingsResponse"]["contents"], keyof {
                                    file?: string | undefined;
                                    hash?: string | undefined;
                                }[]>]: never; }) | undefined;
                            } & { [K_3 in Exclude<keyof I_1["land"]["mappingsResponse"], keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").MappingsResponse>]: never; }) | undefined;
                        } & { [K_4 in Exclude<keyof I_1["land"], keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").Land>]: never; }) | undefined;
                        cid?: string | undefined;
                    } & { [K_5 in Exclude<keyof I_1, keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetParcelResponse>]: never; }>(object: I_1): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetParcelResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly getSceneId: {
                readonly name: "GetSceneId";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetSceneIdRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetSceneIdRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetSceneIdRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetSceneIdRequest): unknown;
                    fromPartial<I_2 extends {} & {} & { [K_6 in Exclude<keyof I_2, never>]: never; }>(_: I_2): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetSceneIdRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetSceneIdResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetSceneIdResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetSceneIdResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetSceneIdResponse): unknown;
                    fromPartial<I_3 extends {
                        sceneId?: string | undefined;
                    } & {
                        sceneId?: string | undefined;
                    } & { [K_7 in Exclude<keyof I_3, "sceneId">]: never; }>(object: I_3): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetSceneIdResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly getIsEmpty: {
                readonly name: "GetIsEmpty";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyRequest): unknown;
                    fromPartial<I_4 extends {} & {} & { [K_8 in Exclude<keyof I_4, never>]: never; }>(_: I_4): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyResponse): unknown;
                    fromPartial<I_5 extends {
                        isEmpty?: boolean | undefined;
                    } & {
                        isEmpty?: boolean | undefined;
                    } & { [K_9 in Exclude<keyof I_5, "isEmpty">]: never; }>(object: I_5): import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
        };
    }>, Context>;
    function createLegacy<Context extends {}>(clientPort: RpcClientPort): {
        /**
         * Returns the coordinates and the definition of a parcel
         */
        getParcel(): Promise<{
            land: ILand;
            cid: string;
        }>;
        /**
         * Returns the scene id
         */
        getSceneId(): Promise<string>;
        getIsEmpty: import("@dcl/rpc/dist/codegen-types").UnaryClientMethod<import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyRequest, import("@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen").GetIsEmptyResponse, Context>;
    };
}
