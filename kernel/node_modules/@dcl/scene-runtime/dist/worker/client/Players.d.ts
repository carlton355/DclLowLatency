import { RpcClientPort } from '@dcl/rpc/dist/types';
import { UserData } from './UserIdentity';
export declare namespace PlayersServiceClient {
    function create<Context extends {}>(clientPort: RpcClientPort): import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
        readonly name: "PlayersService";
        readonly fullName: "decentraland.kernel.apis.PlayersService";
        readonly methods: {
            readonly getPlayerData: {
                readonly name: "GetPlayerData";
                readonly requestType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetPlayerDataRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetPlayerDataRequest;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetPlayerDataRequest;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetPlayerDataRequest): unknown;
                    fromPartial<I extends {
                        userId?: string | undefined;
                    } & {
                        userId?: string | undefined;
                    } & { [K in Exclude<keyof I, "userId">]: never; }>(object: I): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetPlayerDataRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayersGetUserDataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayersGetUserDataResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayersGetUserDataResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayersGetUserDataResponse): unknown;
                    fromPartial<I_1 extends {
                        data?: {
                            displayName?: string | undefined;
                            publicKey?: string | undefined;
                            hasConnectedWeb3?: boolean | undefined;
                            userId?: string | undefined;
                            version?: number | undefined;
                            avatar?: {
                                bodyShape?: string | undefined;
                                skinColor?: string | undefined;
                                hairColor?: string | undefined;
                                eyeColor?: string | undefined;
                                wearables?: string[] | undefined;
                                snapshots?: {
                                    face256?: string | undefined;
                                    body?: string | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    } & {
                        data?: ({
                            displayName?: string | undefined;
                            publicKey?: string | undefined;
                            hasConnectedWeb3?: boolean | undefined;
                            userId?: string | undefined;
                            version?: number | undefined;
                            avatar?: {
                                bodyShape?: string | undefined;
                                skinColor?: string | undefined;
                                hairColor?: string | undefined;
                                eyeColor?: string | undefined;
                                wearables?: string[] | undefined;
                                snapshots?: {
                                    face256?: string | undefined;
                                    body?: string | undefined;
                                } | undefined;
                            } | undefined;
                        } & {
                            displayName?: string | undefined;
                            publicKey?: string | undefined;
                            hasConnectedWeb3?: boolean | undefined;
                            userId?: string | undefined;
                            version?: number | undefined;
                            avatar?: ({
                                bodyShape?: string | undefined;
                                skinColor?: string | undefined;
                                hairColor?: string | undefined;
                                eyeColor?: string | undefined;
                                wearables?: string[] | undefined;
                                snapshots?: {
                                    face256?: string | undefined;
                                    body?: string | undefined;
                                } | undefined;
                            } & {
                                bodyShape?: string | undefined;
                                skinColor?: string | undefined;
                                hairColor?: string | undefined;
                                eyeColor?: string | undefined;
                                wearables?: (string[] & string[] & { [K_1 in Exclude<keyof I_1["data"]["avatar"]["wearables"], keyof string[]>]: never; }) | undefined;
                                snapshots?: ({
                                    face256?: string | undefined;
                                    body?: string | undefined;
                                } & {
                                    face256?: string | undefined;
                                    body?: string | undefined;
                                } & { [K_2 in Exclude<keyof I_1["data"]["avatar"]["snapshots"], keyof import("@dcl/protocol/out-ts/decentraland/common/sdk/user_data.gen").Snapshots>]: never; }) | undefined;
                            } & { [K_3 in Exclude<keyof I_1["data"]["avatar"], keyof import("@dcl/protocol/out-ts/decentraland/common/sdk/user_data.gen").AvatarForUserData>]: never; }) | undefined;
                        } & { [K_4 in Exclude<keyof I_1["data"], keyof import("@dcl/protocol/out-ts/decentraland/common/sdk/user_data.gen").UserData>]: never; }) | undefined;
                    } & { [K_5 in Exclude<keyof I_1, "data">]: never; }>(object: I_1): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayersGetUserDataResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly getPlayersInScene: {
                readonly name: "GetPlayersInScene";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetPlayersInSceneRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetPlayersInSceneRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetPlayersInSceneRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetPlayersInSceneRequest): unknown;
                    fromPartial<I_2 extends {} & {} & { [K_6 in Exclude<keyof I_2, never>]: never; }>(_: I_2): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetPlayersInSceneRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayerListResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayerListResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayerListResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayerListResponse): unknown;
                    fromPartial<I_3 extends {
                        players?: {
                            userId?: string | undefined;
                        }[] | undefined;
                    } & {
                        players?: ({
                            userId?: string | undefined;
                        }[] & ({
                            userId?: string | undefined;
                        } & {
                            userId?: string | undefined;
                        } & { [K_7 in Exclude<keyof I_3["players"][number], "userId">]: never; })[] & { [K_8 in Exclude<keyof I_3["players"], keyof {
                            userId?: string | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_9 in Exclude<keyof I_3, "players">]: never; }>(object: I_3): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayerListResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly getConnectedPlayers: {
                readonly name: "GetConnectedPlayers";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetConnectedPlayersRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetConnectedPlayersRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetConnectedPlayersRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetConnectedPlayersRequest): unknown;
                    fromPartial<I_4 extends {} & {} & { [K_10 in Exclude<keyof I_4, never>]: never; }>(_: I_4): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").GetConnectedPlayersRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayerListResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayerListResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayerListResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayerListResponse): unknown;
                    fromPartial<I_3 extends {
                        players?: {
                            userId?: string | undefined;
                        }[] | undefined;
                    } & {
                        players?: ({
                            userId?: string | undefined;
                        }[] & ({
                            userId?: string | undefined;
                        } & {
                            userId?: string | undefined;
                        } & { [K_7 in Exclude<keyof I_3["players"][number], "userId">]: never; })[] & { [K_8 in Exclude<keyof I_3["players"], keyof {
                            userId?: string | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_9 in Exclude<keyof I_3, "players">]: never; }>(object: I_3): import("@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen").PlayerListResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
        };
    }>, Context>;
    function createLegacy<Context extends {}>(clientPort: RpcClientPort): {
        /**
         * Return the players's data
         */
        getPlayerData(opt: {
            userId: string;
        }): Promise<UserData | null>;
        /**
         * Return array of connected players
         */
        getConnectedPlayers(): Promise<{
            userId: string;
        }[]>;
        /**
         * Return array of players inside the scene
         */
        getPlayersInScene(): Promise<{
            userId: string;
        }[]>;
    };
}
