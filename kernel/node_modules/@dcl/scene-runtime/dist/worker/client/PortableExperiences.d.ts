import { RpcClientPort } from '@dcl/rpc/dist/types';
declare type PortableExperienceUrn = string;
declare type PortableExperienceHandle = {
    pid: PortableExperienceUrn;
    parentCid: string;
};
declare type PortableExperienceLoaded = {
    portableExperiences: PortableExperienceHandle[];
};
export declare namespace PortableExperienceServiceClient {
    function create<Context extends {}>(clientPort: RpcClientPort): import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
        readonly name: "PortableExperiencesService";
        readonly fullName: "decentraland.kernel.apis.PortableExperiencesService";
        readonly methods: {
            readonly spawn: {
                readonly name: "Spawn";
                readonly requestType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnRequest;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnRequest;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnRequest): unknown;
                    fromPartial<I extends {
                        pid?: string | undefined;
                    } & {
                        pid?: string | undefined;
                    } & { [K in Exclude<keyof I, "pid">]: never; }>(object: I): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnResponse): unknown;
                    fromPartial<I_1 extends {
                        pid?: string | undefined;
                        parentCid?: string | undefined;
                    } & {
                        pid?: string | undefined;
                        parentCid?: string | undefined;
                    } & { [K_1 in Exclude<keyof I_1, keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnResponse>]: never; }>(object: I_1): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly kill: {
                readonly name: "Kill";
                readonly requestType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").KillRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").KillRequest;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").KillRequest;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").KillRequest): unknown;
                    fromPartial<I_2 extends {
                        pid?: string | undefined;
                    } & {
                        pid?: string | undefined;
                    } & { [K_2 in Exclude<keyof I_2, "pid">]: never; }>(object: I_2): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").KillRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").KillResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").KillResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").KillResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").KillResponse): unknown;
                    fromPartial<I_3 extends {
                        status?: boolean | undefined;
                    } & {
                        status?: boolean | undefined;
                    } & { [K_3 in Exclude<keyof I_3, "status">]: never; }>(object: I_3): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").KillResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly exit: {
                readonly name: "Exit";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").ExitRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").ExitRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").ExitRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").ExitRequest): unknown;
                    fromPartial<I_4 extends {} & {} & { [K_4 in Exclude<keyof I_4, never>]: never; }>(_: I_4): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").ExitRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").ExitResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").ExitResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").ExitResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").ExitResponse): unknown;
                    fromPartial<I_5 extends {
                        status?: boolean | undefined;
                    } & {
                        status?: boolean | undefined;
                    } & { [K_5 in Exclude<keyof I_5, "status">]: never; }>(object: I_5): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").ExitResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly getPortableExperiencesLoaded: {
                readonly name: "GetPortableExperiencesLoaded";
                readonly requestType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").GetPortableExperiencesLoadedRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").GetPortableExperiencesLoadedRequest;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").GetPortableExperiencesLoadedRequest;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").GetPortableExperiencesLoadedRequest): unknown;
                    fromPartial<I_6 extends {} & {} & { [K_6 in Exclude<keyof I_6, never>]: never; }>(_: I_6): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").GetPortableExperiencesLoadedRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").GetPortableExperiencesLoadedResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").GetPortableExperiencesLoadedResponse;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").GetPortableExperiencesLoadedResponse;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").GetPortableExperiencesLoadedResponse): unknown;
                    fromPartial<I_7 extends {
                        loaded?: {
                            pid?: string | undefined;
                            parentCid?: string | undefined;
                        }[] | undefined;
                    } & {
                        loaded?: ({
                            pid?: string | undefined;
                            parentCid?: string | undefined;
                        }[] & ({
                            pid?: string | undefined;
                            parentCid?: string | undefined;
                        } & {
                            pid?: string | undefined;
                            parentCid?: string | undefined;
                        } & { [K_7 in Exclude<keyof I_7["loaded"][number], keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").SpawnResponse>]: never; })[] & { [K_8 in Exclude<keyof I_7["loaded"], keyof {
                            pid?: string | undefined;
                            parentCid?: string | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_9 in Exclude<keyof I_7, "loaded">]: never; }>(object: I_7): import("@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen").GetPortableExperiencesLoadedResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
        };
    }>, Context>;
    function createLegacy<Context extends {}>(clientPort: RpcClientPort): {
        /**
         * Starts a portable experience.
         * @param  {SpawnPortableExperienceParameters} [pid] - Information to identify the PE
         *
         * Returns the handle of the portable experience.
         */
        spawn(pid: PortableExperienceUrn): Promise<PortableExperienceHandle>;
        /**
         * Stops a portable experience. Only the executor that spawned the portable experience has permission to kill it.
         * @param  {string} [pid] - The portable experience process id
         *
         * Returns true if was able to kill the portable experience, false if not.
         */
        kill(pid: PortableExperienceUrn): Promise<boolean>;
        /**
         * Stops a portable experience from the current running portable scene.
         *
         * Returns true if was able to kill the portable experience, false if not.
         */
        exit(): Promise<boolean>;
        /**
         *
         * Returns current portable experiences loaded with ids and parentCid
         */
        getPortableExperiencesLoaded(): Promise<PortableExperienceLoaded>;
    };
}
export {};
