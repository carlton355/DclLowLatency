import { RpcClientPort } from '@dcl/rpc/dist/types';
export declare namespace CommunicationsControllerServiceClient {
    function create<Context extends {}>(clientPort: RpcClientPort): import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
        readonly name: "CommunicationsControllerService";
        readonly fullName: "decentraland.kernel.apis.CommunicationsControllerService";
        readonly methods: {
            readonly send: {
                readonly name: "Send";
                readonly requestType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/communications_controller.gen").RealSendRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/communications_controller.gen").RealSendRequest;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/communications_controller.gen").RealSendRequest;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/communications_controller.gen").RealSendRequest): unknown;
                    fromPartial<I extends {
                        message?: string | undefined;
                    } & {
                        message?: string | undefined;
                    } & { [K in Exclude<keyof I, "message">]: never; }>(object: I): import("@dcl/protocol/out-ts/decentraland/kernel/apis/communications_controller.gen").RealSendRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/communications_controller.gen").RealSendResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/communications_controller.gen").RealSendResponse;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/communications_controller.gen").RealSendResponse;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/communications_controller.gen").RealSendResponse): unknown;
                    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): import("@dcl/protocol/out-ts/decentraland/kernel/apis/communications_controller.gen").RealSendResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
        };
    }>, Context>;
    function createLegacy<Context extends {}>(clientPort: RpcClientPort): {
        send(message: string): Promise<void>;
    };
}
