import { RpcClientPort } from '@dcl/rpc/dist/types';
export declare type PositionType = {
    x: number;
    y: number;
    z: number;
};
export declare namespace RestrictedActionsServiceClient {
    function create<Context extends {}>(clientPort: RpcClientPort): import("@dcl/rpc/dist/codegen-types").RawClient<import("@dcl/rpc/dist/codegen-types").FromTsProtoServiceDefinition<{
        readonly name: "RestrictedActionsService";
        readonly fullName: "decentraland.kernel.apis.RestrictedActionsService";
        readonly methods: {
            readonly movePlayerTo: {
                readonly name: "MovePlayerTo";
                readonly requestType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").MovePlayerToRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").MovePlayerToRequest;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").MovePlayerToRequest;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").MovePlayerToRequest): unknown;
                    fromPartial<I extends {
                        newRelativePosition?: {
                            x?: number | undefined;
                            y?: number | undefined;
                            z?: number | undefined;
                        } | undefined;
                        cameraTarget?: {
                            x?: number | undefined;
                            y?: number | undefined;
                            z?: number | undefined;
                        } | undefined;
                    } & {
                        newRelativePosition?: ({
                            x?: number | undefined;
                            y?: number | undefined;
                            z?: number | undefined;
                        } & {
                            x?: number | undefined;
                            y?: number | undefined;
                            z?: number | undefined;
                        } & { [K in Exclude<keyof I["newRelativePosition"], keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").Vector3>]: never; }) | undefined;
                        cameraTarget?: ({
                            x?: number | undefined;
                            y?: number | undefined;
                            z?: number | undefined;
                        } & {
                            x?: number | undefined;
                            y?: number | undefined;
                            z?: number | undefined;
                        } & { [K_1 in Exclude<keyof I["cameraTarget"], keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").Vector3>]: never; }) | undefined;
                    } & { [K_2 in Exclude<keyof I, keyof import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").MovePlayerToRequest>]: never; }>(object: I): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").MovePlayerToRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").MovePlayerToResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").MovePlayerToResponse;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").MovePlayerToResponse;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").MovePlayerToResponse): unknown;
                    fromPartial<I_1 extends {} & {} & { [K_3 in Exclude<keyof I_1, never>]: never; }>(_: I_1): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").MovePlayerToResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
            readonly triggerEmote: {
                readonly name: "TriggerEmote";
                readonly requestType: {
                    encode(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").TriggerEmoteRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").TriggerEmoteRequest;
                    fromJSON(object: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").TriggerEmoteRequest;
                    toJSON(message: import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").TriggerEmoteRequest): unknown;
                    fromPartial<I_2 extends {
                        predefinedEmote?: string | undefined;
                    } & {
                        predefinedEmote?: string | undefined;
                    } & { [K_4 in Exclude<keyof I_2, "predefinedEmote">]: never; }>(object: I_2): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").TriggerEmoteRequest;
                };
                readonly requestStream: false;
                readonly responseType: {
                    encode(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").TriggerEmoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number | undefined): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").TriggerEmoteResponse;
                    fromJSON(_: any): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").TriggerEmoteResponse;
                    toJSON(_: import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").TriggerEmoteResponse): unknown;
                    fromPartial<I_3 extends {} & {} & { [K_5 in Exclude<keyof I_3, never>]: never; }>(_: I_3): import("@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen").TriggerEmoteResponse;
                };
                readonly responseStream: false;
                readonly options: {};
            };
        };
    }>, Context>;
    function createLegacy<Context extends {}>(clientPort: RpcClientPort): {
        /**
         * move player to a position inside the scene
         *
         * @param position PositionType
         * @param cameraTarget PositionType
         */
        movePlayerTo(newPosition: PositionType, cameraTarget?: PositionType): Promise<void>;
        /**
         * trigger an emote on the current player
         *
         * @param emote the emote to perform
         */
        triggerEmote(emote: {
            predefined: string;
        }): Promise<void>;
    };
}
