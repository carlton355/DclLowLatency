export interface WebSocketClassOptions {
    canUseWebsocket: boolean;
    previewMode: boolean;
    log(...a: any[]): void;
}
export declare function createWebSocket({ canUseWebsocket, previewMode, log }: WebSocketClassOptions): {
    new (url: string | URL, protocols?: string | string[]): {
        new (): EventTarget;
        binaryType: BinaryType;
        readonly bufferedAmount: number;
        readonly extensions: string;
        onclose: ((this: WebSocket, ev: CloseEvent) => any) | null;
        onerror: ((this: WebSocket, ev: Event) => any) | null;
        onmessage: ((this: WebSocket, ev: MessageEvent<any>) => any) | null;
        onopen: ((this: WebSocket, ev: Event) => any) | null;
        readonly protocol: string;
        readonly readyState: number;
        readonly url: string;
        close(code?: number | undefined, reason?: string | undefined): void;
        send(data: string | Blob | ArrayBufferView | ArrayBufferLike): void;
        readonly CLOSED: number;
        readonly CLOSING: number;
        readonly CONNECTING: number;
        readonly OPEN: number;
        addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
        removeEventListener<K_1 extends keyof WebSocketEventMap>(type: K_1, listener: (this: WebSocket, ev: WebSocketEventMap[K_1]) => any, options?: boolean | EventListenerOptions | undefined): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
        dispatchEvent(event: Event): boolean;
        prototype: EventTarget;
    };
    readonly CLOSED: number;
    readonly CLOSING: number;
    readonly CONNECTING: number;
    readonly OPEN: number;
};
