"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runIvm = void 0;
const vm2_1 = __importDefault(require("vm2"));
const fp_future_1 = __importDefault(require("fp-future"));
const undici_1 = require("undici");
const ws_1 = __importDefault(require("ws"));
// @ts-ingnore
const shell = require("raw-loader!./artifacts/cli.scene.system.js");
async function runIvm(source, filename, transport) {
    const vm = new vm2_1.default.VM({ eval: true });
    const codeDidRun = (0, fp_future_1.default)();
    vm.setGlobal("runCode", async function (_ignoredSource) {
        try {
            console.log("> server run: " + filename);
            vm.run(source, "file://" + filename);
            codeDidRun.resolve();
        }
        catch (e) {
            console.error("Error running " + filename);
            codeDidRun.reject(e);
        }
    });
    vm.setGlobal("postMessage", function (message) {
        transport.sendMessage(message);
    });
    vm.setGlobal("__env__error", function (error) {
        console.error(error);
    });
    vm.setGlobal("__env__log", function (...args) {
        console.log(...args);
    });
    vm.run(`
    let __messageEventListeners = []
    let __errorEventListeners = []
    let __onUpdateFunctions = []
    global.__env__onTick = function(handler) {
      __onUpdateFunctions.push(handler)
    }
    global.__tick = function(dt) {
      for (let handle of __onUpdateFunctions) {
        handle(dt)
      }
    }
    global.self = global;
    global.onmessage = null;
    global.onerror = null;
    global.__handleMessage = function(event) {
      if (global.onmessage) {
        global.onmessage(event)
      }
      for (let handle of __messageEventListeners) {
        handle(event)
      }
    }
    global.__handleError = function(event) {
      if (global.onerror) {
        global.onerror(event)
      }
      for (let handle of __errorEventListeners) {
        handle(event)
      }
    }
    global.addEventListener = function(event, handler) {
      if (event == 'message'){
        __messageEventListeners.push(handler)
      } else if (event == 'error'){
        __errorEventListeners.push(handler)
      } else {
        throw new Error('Event type "' + event + '" is not supported')
      }
    }
`, "file://env.js");
    vm.setGlobal("setTimeout", (callback, delay, ...args) => {
        return setTimeout(callback(...args), delay);
    });
    vm.setGlobal("fetch", (url, opts) => {
        return (0, undici_1.fetch)(url, opts);
    });
    const location = {
        href: "http://127.0.0.1:8000/",
        ancestorOrigins: {},
        origin: "http://127.0.0.1:8000",
        protocol: "http:",
        host: "127.0.0.1:8000",
        hostname: "127.0.0.1",
        port: "8000",
        pathname: "/",
        search: "",
        hash: "",
    };
    vm.setGlobal("location", location);
    vm.setGlobal("WebSocket", ws_1.default);
    vm.setGlobal("btoa", (txt) => Buffer.from(txt, "binary").toString("base64"));
    vm.setGlobal("atob", (txt) => Buffer.from(txt, "base64").toString("binary"));
    transport.on("message", (data) => {
        try {
            vm.getGlobal("__handleMessage")({ data });
        }
        catch (e) {
            console.error("onMessage error", e);
        }
    });
    transport.on("error", (e) => {
        console.error("error", e);
        vm.getGlobal("__handleError")({ error: e });
    });
    transport.on("connect", () => {
        console.log("Transport connected");
    });
    vm.run(shell, "shell.js");
    codeDidRun.then(() => {
        let start = Date.now();
        setInterval(() => {
            const x = Date.now();
            const dt = x - start;
            start = x;
            let time = dt / 1000;
            vm.getGlobal("__tick")(time);
        }, 1000 / 30);
    });
    return [codeDidRun];
}
exports.runIvm = runIvm;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidm0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaGFybmVzcy92bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw4Q0FBcUI7QUFDckIsMERBQThCO0FBQzlCLG1DQUE4QjtBQUM5Qiw0Q0FBbUI7QUFHbkIsY0FBYztBQUNkLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFBO0FBRTVELEtBQUssVUFBVSxNQUFNLENBQUMsTUFBYyxFQUFFLFFBQWdCLEVBQUUsU0FBb0I7SUFDakYsTUFBTSxFQUFFLEdBQUcsSUFBSSxhQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFFckMsTUFBTSxVQUFVLEdBQUcsSUFBQSxtQkFBTSxHQUFRLENBQUE7SUFFakMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxXQUFXLGNBQXNCO1FBQzVELElBQUk7WUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxDQUFBO1lBQ3hDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsR0FBRyxRQUFRLENBQUMsQ0FBQTtZQUNwQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUE7U0FDckI7UUFBQyxPQUFPLENBQU0sRUFBRTtZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLENBQUE7WUFDMUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNyQjtJQUNILENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsVUFBVSxPQUFtQjtRQUN2RCxTQUFTLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2hDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsVUFBVSxLQUFZO1FBQ2pELE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdEIsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxVQUFVLEdBQUcsSUFBVztRQUNqRCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDdEIsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsR0FBRyxDQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBd0NILEVBQ0csZUFBZSxDQUNoQixDQUFBO0lBRUQsRUFBRSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxRQUFhLEVBQUUsS0FBYSxFQUFFLEdBQUcsSUFBVyxFQUFFLEVBQUU7UUFDMUUsT0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDN0MsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsRUFBRTtRQUMvQyxPQUFPLElBQUEsY0FBSyxFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUN6QixDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sUUFBUSxHQUFHO1FBQ2YsSUFBSSxFQUFFLHdCQUF3QjtRQUM5QixlQUFlLEVBQUUsRUFBRTtRQUNuQixNQUFNLEVBQUUsdUJBQXVCO1FBQy9CLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsUUFBUSxFQUFFLFdBQVc7UUFDckIsSUFBSSxFQUFFLE1BQU07UUFDWixRQUFRLEVBQUUsR0FBRztRQUNiLE1BQU0sRUFBRSxFQUFFO1FBQ1YsSUFBSSxFQUFFLEVBQUU7S0FDVCxDQUFBO0lBRUQsRUFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFFbEMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsWUFBRSxDQUFDLENBQUE7SUFFN0IsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO0lBQ3BGLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUVwRixTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQy9CLElBQUk7WUFDRixFQUFFLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO1NBQzFDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFBO1NBQ3BDO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFRixTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQzFCLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3pCLEVBQUUsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM3QyxDQUFDLENBQUMsQ0FBQTtJQUVGLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtRQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUE7SUFDcEMsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUV6QixVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNuQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7UUFFdEIsV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUNmLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUNwQixNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFBO1lBQ3BCLEtBQUssR0FBRyxDQUFDLENBQUE7WUFFVCxJQUFJLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFBO1lBRXBCLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUIsQ0FBQyxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQTtJQUNmLENBQUMsQ0FBQyxDQUFBO0lBRUYsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ3JCLENBQUM7QUF2SUQsd0JBdUlDIn0=