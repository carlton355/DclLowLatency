#!/usr/bin/env node
"use strict";
/// <reference types="node" />
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vm_1 = require("./vm");
const fs_1 = require("fs");
const path_1 = require("path");
const inspector = __importStar(require("inspector"));
const mitt_1 = __importDefault(require("mitt"));
function exit(err) {
    if (err) {
        console.error(err);
    }
    inspector.close();
    process.exit(err ? 1 : 0);
}
function IPCTransport(process) {
    const events = (0, mitt_1.default)();
    process.on("disconnect", () => events.emit("close", {}));
    process.on("message", (message) => {
        console.dir(message);
        if (message instanceof Uint8Array) {
            events.emit("message", message);
        }
        else {
            throw new Error(`IPCTransport: Received unknown type of message, expecting Uint8Array`);
        }
    });
    const api = {
        ...events,
        sendMessage(message) {
            if (message instanceof ArrayBuffer || message instanceof Uint8Array) {
                if (process.send)
                    process.send(message);
            }
            else {
                throw new Error(`WebWorkerTransport: Received unknown type of message, expecting Uint8Array`);
            }
        },
        close() {
            if ("exit" in process) {
                process.exit(0);
            }
            else {
                process.kill();
            }
        },
    };
    return api;
}
async function run() {
    if (!process.send) {
        throw new Error("Impossible to start application, no IPC pipe was set");
    }
    if (!inspector.url())
        inspector.open();
    const inspectorSession = new inspector.Session();
    inspectorSession.connect();
    const scene = JSON.parse((0, fs_1.readFileSync)("scene.json").toString());
    // resolve absolute path, it is necessary to resolve the sourceMaps
    const sceneJsonFile = (0, path_1.resolve)(scene.main);
    const sceneJsonContent = (0, fs_1.readFileSync)(sceneJsonFile).toString();
    console.log(`> will load file: ${sceneJsonFile}`);
    const transport = IPCTransport(process);
    const [runtime] = await (0, vm_1.runIvm)(sceneJsonContent, sceneJsonFile, transport);
    console.log("> awaiting scene to run");
    await runtime;
    console.log("> exiting2");
}
process.setUncaughtExceptionCaptureCallback(exit);
// handle kill
process.on("SIGTERM", () => exit());
// handle ctrl-c
process.on("SIGINT", () => exit());
run().catch(exit);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1ydW50aW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hhcm5lc3Mvbm9kZS1ydW50aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsOEJBQThCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSTlCLDZCQUE2QjtBQUM3QiwyQkFBaUM7QUFDakMsK0JBQThCO0FBQzlCLHFEQUFzQztBQUV0QyxnREFBdUI7QUFFdkIsU0FBUyxJQUFJLENBQUMsR0FBVztJQUN2QixJQUFJLEdBQUcsRUFBRTtRQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7S0FDbkI7SUFDRCxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDM0IsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLE9BQXNDO0lBQzFELE1BQU0sTUFBTSxHQUFHLElBQUEsY0FBSSxHQUFtQixDQUFBO0lBRXRDLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFFeEQsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3BCLElBQUksT0FBTyxZQUFZLFVBQVUsRUFBRTtZQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQTtTQUNoQzthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFBO1NBQ3hGO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFRixNQUFNLEdBQUcsR0FBYztRQUNyQixHQUFHLE1BQU07UUFDVCxXQUFXLENBQUMsT0FBTztZQUNqQixJQUFJLE9BQU8sWUFBWSxXQUFXLElBQUksT0FBTyxZQUFZLFVBQVUsRUFBRTtnQkFDbkUsSUFBSSxPQUFPLENBQUMsSUFBSTtvQkFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO2FBQ3hDO2lCQUFNO2dCQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsNEVBQTRFLENBQUMsQ0FBQTthQUM5RjtRQUNILENBQUM7UUFDRCxLQUFLO1lBQ0gsSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO2dCQUNyQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ2hCO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTthQUNmO1FBQ0gsQ0FBQztLQUNGLENBQUE7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUM7QUFFRCxLQUFLLFVBQVUsR0FBRztJQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtRQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLHNEQUFzRCxDQUFDLENBQUE7S0FDeEU7SUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUV0QyxNQUFNLGdCQUFnQixHQUFHLElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBRWhELGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFBO0lBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBQSxpQkFBWSxFQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFFL0QsbUVBQW1FO0lBQ25FLE1BQU0sYUFBYSxHQUFHLElBQUEsY0FBTyxFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN6QyxNQUFNLGdCQUFnQixHQUFHLElBQUEsaUJBQVksRUFBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUUvRCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixhQUFhLEVBQUUsQ0FBQyxDQUFBO0lBRWpELE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUV2QyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxJQUFBLFdBQU0sRUFBQyxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFFMUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO0lBRXRDLE1BQU0sT0FBTyxDQUFBO0lBRWIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUMzQixDQUFDO0FBRUQsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBRWpELGNBQWM7QUFDZCxPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBRW5DLGdCQUFnQjtBQUNoQixPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBRWxDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQSJ9