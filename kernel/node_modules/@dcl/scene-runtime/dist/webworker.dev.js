(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = {exports: {}}).exports, mod), mod.exports;
  };
  var __reExport = (target, module2, desc) => {
    if (module2 && typeof module2 === "object" || typeof module2 === "function") {
      for (let key of __getOwnPropNames(module2))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module2) => {
    return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
  };

  // src/worker/web-worker-inject.js
  var init_web_worker_inject = __esm({
    "src/worker/web-worker-inject.js"() {
      globalThis.WebAssembly.Instance = function() {
        throw new Error("Wasm is not allowed in scene runtimes");
      };
      globalThis.WebAssembly.Module = function() {
        throw new Error("Wasm is not allowed in scene runtimes");
      };
    }
  });

  // node_modules/@dcl/rpc/dist/types.js
  var require_types = __commonJS({
    "node_modules/@dcl/rpc/dist/types.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
    }
  });

  // node_modules/mitt/dist/mitt.js
  var require_mitt = __commonJS({
    "node_modules/mitt/dist/mitt.js"(exports2, module2) {
      init_web_worker_inject();
      module2.exports = function(n) {
        return {all: n = n || new Map(), on: function(e, t) {
          var i = n.get(e);
          i ? i.push(t) : n.set(e, [t]);
        }, off: function(e, t) {
          var i = n.get(e);
          i && (t ? i.splice(i.indexOf(t) >>> 0, 1) : n.set(e, []));
        }, emit: function(e, t) {
          var i = n.get(e);
          i && i.slice().map(function(n2) {
            n2(t);
          }), (i = n.get("*")) && i.slice().map(function(n2) {
            n2(e, t);
          });
        }};
      };
    }
  });

  // node_modules/@protobufjs/aspromise/index.js
  var require_aspromise = __commonJS({
    "node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = asPromise;
      function asPromise(fn, ctx) {
        var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
        while (index < arguments.length)
          params[offset++] = arguments[index++];
        return new Promise(function executor(resolve, reject) {
          params[offset] = function callback(err) {
            if (pending) {
              pending = false;
              if (err)
                reject(err);
              else {
                var params2 = new Array(arguments.length - 1), offset2 = 0;
                while (offset2 < params2.length)
                  params2[offset2++] = arguments[offset2];
                resolve.apply(null, params2);
              }
            }
          };
          try {
            fn.apply(ctx || null, params);
          } catch (err) {
            if (pending) {
              pending = false;
              reject(err);
            }
          }
        });
      }
    }
  });

  // node_modules/@protobufjs/base64/index.js
  var require_base64 = __commonJS({
    "node_modules/@protobufjs/base64/index.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      var base64 = exports2;
      base64.length = function length(string) {
        var p = string.length;
        if (!p)
          return 0;
        var n = 0;
        while (--p % 4 > 1 && string.charAt(p) === "=")
          ++n;
        return Math.ceil(string.length * 3) / 4 - n;
      };
      var b64 = new Array(64);
      var s64 = new Array(123);
      for (var i = 0; i < 64; )
        s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
      base64.encode = function encode(buffer, start, end) {
        var parts = null, chunk = [];
        var i2 = 0, j = 0, t;
        while (start < end) {
          var b = buffer[start++];
          switch (j) {
            case 0:
              chunk[i2++] = b64[b >> 2];
              t = (b & 3) << 4;
              j = 1;
              break;
            case 1:
              chunk[i2++] = b64[t | b >> 4];
              t = (b & 15) << 2;
              j = 2;
              break;
            case 2:
              chunk[i2++] = b64[t | b >> 6];
              chunk[i2++] = b64[b & 63];
              j = 0;
              break;
          }
          if (i2 > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i2 = 0;
          }
        }
        if (j) {
          chunk[i2++] = b64[t];
          chunk[i2++] = 61;
          if (j === 1)
            chunk[i2++] = 61;
        }
        if (parts) {
          if (i2)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
          return parts.join("");
        }
        return String.fromCharCode.apply(String, chunk.slice(0, i2));
      };
      var invalidEncoding = "invalid encoding";
      base64.decode = function decode(string, buffer, offset) {
        var start = offset;
        var j = 0, t;
        for (var i2 = 0; i2 < string.length; ) {
          var c = string.charCodeAt(i2++);
          if (c === 61 && j > 1)
            break;
          if ((c = s64[c]) === void 0)
            throw Error(invalidEncoding);
          switch (j) {
            case 0:
              t = c;
              j = 1;
              break;
            case 1:
              buffer[offset++] = t << 2 | (c & 48) >> 4;
              t = c;
              j = 2;
              break;
            case 2:
              buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
              t = c;
              j = 3;
              break;
            case 3:
              buffer[offset++] = (t & 3) << 6 | c;
              j = 0;
              break;
          }
        }
        if (j === 1)
          throw Error(invalidEncoding);
        return offset - start;
      };
      base64.test = function test(string) {
        return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
      };
    }
  });

  // node_modules/@protobufjs/eventemitter/index.js
  var require_eventemitter = __commonJS({
    "node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = EventEmitter;
      function EventEmitter() {
        this._listeners = {};
      }
      EventEmitter.prototype.on = function on(evt, fn, ctx) {
        (this._listeners[evt] || (this._listeners[evt] = [])).push({
          fn,
          ctx: ctx || this
        });
        return this;
      };
      EventEmitter.prototype.off = function off(evt, fn) {
        if (evt === void 0)
          this._listeners = {};
        else {
          if (fn === void 0)
            this._listeners[evt] = [];
          else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length; )
              if (listeners[i].fn === fn)
                listeners.splice(i, 1);
              else
                ++i;
          }
        }
        return this;
      };
      EventEmitter.prototype.emit = function emit(evt) {
        var listeners = this._listeners[evt];
        if (listeners) {
          var args = [], i = 1;
          for (; i < arguments.length; )
            args.push(arguments[i++]);
          for (i = 0; i < listeners.length; )
            listeners[i].fn.apply(listeners[i++].ctx, args);
        }
        return this;
      };
    }
  });

  // node_modules/@protobufjs/float/index.js
  var require_float = __commonJS({
    "node_modules/@protobufjs/float/index.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = factory(factory);
      function factory(exports3) {
        if (typeof Float32Array !== "undefined")
          (function() {
            var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
            function writeFloat_f32_cpy(val, buf, pos) {
              f32[0] = val;
              buf[pos] = f8b[0];
              buf[pos + 1] = f8b[1];
              buf[pos + 2] = f8b[2];
              buf[pos + 3] = f8b[3];
            }
            function writeFloat_f32_rev(val, buf, pos) {
              f32[0] = val;
              buf[pos] = f8b[3];
              buf[pos + 1] = f8b[2];
              buf[pos + 2] = f8b[1];
              buf[pos + 3] = f8b[0];
            }
            exports3.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
            exports3.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
            function readFloat_f32_cpy(buf, pos) {
              f8b[0] = buf[pos];
              f8b[1] = buf[pos + 1];
              f8b[2] = buf[pos + 2];
              f8b[3] = buf[pos + 3];
              return f32[0];
            }
            function readFloat_f32_rev(buf, pos) {
              f8b[3] = buf[pos];
              f8b[2] = buf[pos + 1];
              f8b[1] = buf[pos + 2];
              f8b[0] = buf[pos + 3];
              return f32[0];
            }
            exports3.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
            exports3.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
          })();
        else
          (function() {
            function writeFloat_ieee754(writeUint, val, buf, pos) {
              var sign = val < 0 ? 1 : 0;
              if (sign)
                val = -val;
              if (val === 0)
                writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos);
              else if (isNaN(val))
                writeUint(2143289344, buf, pos);
              else if (val > 34028234663852886e22)
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
              else if (val < 11754943508222875e-54)
                writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
              else {
                var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
              }
            }
            exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
            exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
            function readFloat_ieee754(readUint, buf, pos) {
              var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
              return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
            }
            exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
            exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
          })();
        if (typeof Float64Array !== "undefined")
          (function() {
            var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
            function writeDouble_f64_cpy(val, buf, pos) {
              f64[0] = val;
              buf[pos] = f8b[0];
              buf[pos + 1] = f8b[1];
              buf[pos + 2] = f8b[2];
              buf[pos + 3] = f8b[3];
              buf[pos + 4] = f8b[4];
              buf[pos + 5] = f8b[5];
              buf[pos + 6] = f8b[6];
              buf[pos + 7] = f8b[7];
            }
            function writeDouble_f64_rev(val, buf, pos) {
              f64[0] = val;
              buf[pos] = f8b[7];
              buf[pos + 1] = f8b[6];
              buf[pos + 2] = f8b[5];
              buf[pos + 3] = f8b[4];
              buf[pos + 4] = f8b[3];
              buf[pos + 5] = f8b[2];
              buf[pos + 6] = f8b[1];
              buf[pos + 7] = f8b[0];
            }
            exports3.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
            exports3.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
            function readDouble_f64_cpy(buf, pos) {
              f8b[0] = buf[pos];
              f8b[1] = buf[pos + 1];
              f8b[2] = buf[pos + 2];
              f8b[3] = buf[pos + 3];
              f8b[4] = buf[pos + 4];
              f8b[5] = buf[pos + 5];
              f8b[6] = buf[pos + 6];
              f8b[7] = buf[pos + 7];
              return f64[0];
            }
            function readDouble_f64_rev(buf, pos) {
              f8b[7] = buf[pos];
              f8b[6] = buf[pos + 1];
              f8b[5] = buf[pos + 2];
              f8b[4] = buf[pos + 3];
              f8b[3] = buf[pos + 4];
              f8b[2] = buf[pos + 5];
              f8b[1] = buf[pos + 6];
              f8b[0] = buf[pos + 7];
              return f64[0];
            }
            exports3.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
            exports3.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
          })();
        else
          (function() {
            function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
              var sign = val < 0 ? 1 : 0;
              if (sign)
                val = -val;
              if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos + off1);
              } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
              } else if (val > 17976931348623157e292) {
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
              } else {
                var mantissa;
                if (val < 22250738585072014e-324) {
                  mantissa = val / 5e-324;
                  writeUint(mantissa >>> 0, buf, pos + off0);
                  writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                  var exponent = Math.floor(Math.log(val) / Math.LN2);
                  if (exponent === 1024)
                    exponent = 1023;
                  mantissa = val * Math.pow(2, -exponent);
                  writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                  writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
              }
            }
            exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
            exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
            function readDouble_ieee754(readUint, off0, off1, buf, pos) {
              var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
              var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
              return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
            }
            exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
            exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
          })();
        return exports3;
      }
      function writeUintLE(val, buf, pos) {
        buf[pos] = val & 255;
        buf[pos + 1] = val >>> 8 & 255;
        buf[pos + 2] = val >>> 16 & 255;
        buf[pos + 3] = val >>> 24;
      }
      function writeUintBE(val, buf, pos) {
        buf[pos] = val >>> 24;
        buf[pos + 1] = val >>> 16 & 255;
        buf[pos + 2] = val >>> 8 & 255;
        buf[pos + 3] = val & 255;
      }
      function readUintLE(buf, pos) {
        return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
      }
      function readUintBE(buf, pos) {
        return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
      }
    }
  });

  // node_modules/@protobufjs/inquire/index.js
  var require_inquire = __commonJS({
    "node_modules/@protobufjs/inquire/index.js"(exports, module) {
      init_web_worker_inject();
      "use strict";
      module.exports = inquire;
      function inquire(moduleName) {
        try {
          var mod = eval("quire".replace(/^/, "re"))(moduleName);
          if (mod && (mod.length || Object.keys(mod).length))
            return mod;
        } catch (e) {
        }
        return null;
      }
    }
  });

  // node_modules/@protobufjs/utf8/index.js
  var require_utf8 = __commonJS({
    "node_modules/@protobufjs/utf8/index.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      var utf8 = exports2;
      utf8.length = function utf8_length(string) {
        var len = 0, c = 0;
        for (var i = 0; i < string.length; ++i) {
          c = string.charCodeAt(i);
          if (c < 128)
            len += 1;
          else if (c < 2048)
            len += 2;
          else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
            ++i;
            len += 4;
          } else
            len += 3;
        }
        return len;
      };
      utf8.read = function utf8_read(buffer, start, end) {
        var len = end - start;
        if (len < 1)
          return "";
        var parts = null, chunk = [], i = 0, t;
        while (start < end) {
          t = buffer[start++];
          if (t < 128)
            chunk[i++] = t;
          else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
          else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
            chunk[i++] = 55296 + (t >> 10);
            chunk[i++] = 56320 + (t & 1023);
          } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
          if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
          }
        }
        if (parts) {
          if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
          return parts.join("");
        }
        return String.fromCharCode.apply(String, chunk.slice(0, i));
      };
      utf8.write = function utf8_write(string, buffer, offset) {
        var start = offset, c1, c2;
        for (var i = 0; i < string.length; ++i) {
          c1 = string.charCodeAt(i);
          if (c1 < 128) {
            buffer[offset++] = c1;
          } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6 | 192;
            buffer[offset++] = c1 & 63 | 128;
          } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
            c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
            ++i;
            buffer[offset++] = c1 >> 18 | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
          } else {
            buffer[offset++] = c1 >> 12 | 224;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
          }
        }
        return offset - start;
      };
    }
  });

  // node_modules/@protobufjs/pool/index.js
  var require_pool = __commonJS({
    "node_modules/@protobufjs/pool/index.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = pool;
      function pool(alloc, slice, size) {
        var SIZE = size || 8192;
        var MAX = SIZE >>> 1;
        var slab = null;
        var offset = SIZE;
        return function pool_alloc(size2) {
          if (size2 < 1 || size2 > MAX)
            return alloc(size2);
          if (offset + size2 > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
          }
          var buf = slice.call(slab, offset, offset += size2);
          if (offset & 7)
            offset = (offset | 7) + 1;
          return buf;
        };
      }
    }
  });

  // node_modules/protobufjs/src/util/longbits.js
  var require_longbits = __commonJS({
    "node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = LongBits;
      var util = require_minimal();
      function LongBits(lo, hi) {
        this.lo = lo >>> 0;
        this.hi = hi >>> 0;
      }
      var zero = LongBits.zero = new LongBits(0, 0);
      zero.toNumber = function() {
        return 0;
      };
      zero.zzEncode = zero.zzDecode = function() {
        return this;
      };
      zero.length = function() {
        return 1;
      };
      var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
      LongBits.fromNumber = function fromNumber(value) {
        if (value === 0)
          return zero;
        var sign = value < 0;
        if (sign)
          value = -value;
        var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
        if (sign) {
          hi = ~hi >>> 0;
          lo = ~lo >>> 0;
          if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
              hi = 0;
          }
        }
        return new LongBits(lo, hi);
      };
      LongBits.from = function from(value) {
        if (typeof value === "number")
          return LongBits.fromNumber(value);
        if (util.isString(value)) {
          if (util.Long)
            value = util.Long.fromString(value);
          else
            return LongBits.fromNumber(parseInt(value, 10));
        }
        return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
      };
      LongBits.prototype.toNumber = function toNumber(unsigned) {
        if (!unsigned && this.hi >>> 31) {
          var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
          if (!lo)
            hi = hi + 1 >>> 0;
          return -(lo + hi * 4294967296);
        }
        return this.lo + this.hi * 4294967296;
      };
      LongBits.prototype.toLong = function toLong(unsigned) {
        return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : {low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned)};
      };
      var charCodeAt = String.prototype.charCodeAt;
      LongBits.fromHash = function fromHash(hash) {
        if (hash === zeroHash)
          return zero;
        return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);
      };
      LongBits.prototype.toHash = function toHash() {
        return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
      };
      LongBits.prototype.zzEncode = function zzEncode() {
        var mask = this.hi >> 31;
        this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
        this.lo = (this.lo << 1 ^ mask) >>> 0;
        return this;
      };
      LongBits.prototype.zzDecode = function zzDecode() {
        var mask = -(this.lo & 1);
        this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
        this.hi = (this.hi >>> 1 ^ mask) >>> 0;
        return this;
      };
      LongBits.prototype.length = function length() {
        var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
        return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
      };
    }
  });

  // node_modules/protobufjs/src/util/minimal.js
  var require_minimal = __commonJS({
    "node_modules/protobufjs/src/util/minimal.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      var util = exports2;
      util.asPromise = require_aspromise();
      util.base64 = require_base64();
      util.EventEmitter = require_eventemitter();
      util.float = require_float();
      util.inquire = require_inquire();
      util.utf8 = require_utf8();
      util.pool = require_pool();
      util.LongBits = require_longbits();
      util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
      util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
      util.emptyArray = Object.freeze ? Object.freeze([]) : [];
      util.emptyObject = Object.freeze ? Object.freeze({}) : {};
      util.isInteger = Number.isInteger || function isInteger(value) {
        return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
      };
      util.isString = function isString(value) {
        return typeof value === "string" || value instanceof String;
      };
      util.isObject = function isObject4(value) {
        return value && typeof value === "object";
      };
      util.isset = util.isSet = function isSet19(obj, prop) {
        var value = obj[prop];
        if (value != null && obj.hasOwnProperty(prop))
          return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
        return false;
      };
      util.Buffer = function() {
        try {
          var Buffer2 = util.inquire("buffer").Buffer;
          return Buffer2.prototype.utf8Write ? Buffer2 : null;
        } catch (e) {
          return null;
        }
      }();
      util._Buffer_from = null;
      util._Buffer_allocUnsafe = null;
      util.newBuffer = function newBuffer(sizeOrArray) {
        return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
      };
      util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      util.Long = util.global.dcodeIO && util.global.dcodeIO.Long || util.global.Long || util.inquire("long");
      util.key2Re = /^true|false|0|1$/;
      util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
      util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
      util.longToHash = function longToHash(value) {
        return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
      };
      util.longFromHash = function longFromHash(hash, unsigned) {
        var bits = util.LongBits.fromHash(hash);
        if (util.Long)
          return util.Long.fromBits(bits.lo, bits.hi, unsigned);
        return bits.toNumber(Boolean(unsigned));
      };
      function merge(dst, src, ifNotSet) {
        for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
          if (dst[keys[i]] === void 0 || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
        return dst;
      }
      util.merge = merge;
      util.lcFirst = function lcFirst(str) {
        return str.charAt(0).toLowerCase() + str.substring(1);
      };
      function newError(name) {
        function CustomError(message, properties) {
          if (!(this instanceof CustomError))
            return new CustomError(message, properties);
          Object.defineProperty(this, "message", {get: function() {
            return message;
          }});
          if (Error.captureStackTrace)
            Error.captureStackTrace(this, CustomError);
          else
            Object.defineProperty(this, "stack", {value: new Error().stack || ""});
          if (properties)
            merge(this, properties);
        }
        (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
        Object.defineProperty(CustomError.prototype, "name", {get: function() {
          return name;
        }});
        CustomError.prototype.toString = function toString() {
          return this.name + ": " + this.message;
        };
        return CustomError;
      }
      util.newError = newError;
      util.ProtocolError = newError("ProtocolError");
      util.oneOfGetter = function getOneOf(fieldNames) {
        var fieldMap = {};
        for (var i = 0; i < fieldNames.length; ++i)
          fieldMap[fieldNames[i]] = 1;
        return function() {
          for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
            if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
              return keys[i2];
        };
      };
      util.oneOfSetter = function setOneOf(fieldNames) {
        return function(name) {
          for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
              delete this[fieldNames[i]];
        };
      };
      util.toJSONOptions = {
        longs: String,
        enums: String,
        bytes: String,
        json: true
      };
      util._configure = function() {
        var Buffer2 = util.Buffer;
        if (!Buffer2) {
          util._Buffer_from = util._Buffer_allocUnsafe = null;
          return;
        }
        util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || function Buffer_from(value, encoding) {
          return new Buffer2(value, encoding);
        };
        util._Buffer_allocUnsafe = Buffer2.allocUnsafe || function Buffer_allocUnsafe(size) {
          return new Buffer2(size);
        };
      };
    }
  });

  // node_modules/protobufjs/src/writer.js
  var require_writer = __commonJS({
    "node_modules/protobufjs/src/writer.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = Writer;
      var util = require_minimal();
      var BufferWriter;
      var LongBits = util.LongBits;
      var base64 = util.base64;
      var utf8 = util.utf8;
      function Op(fn, len, val) {
        this.fn = fn;
        this.len = len;
        this.next = void 0;
        this.val = val;
      }
      function noop() {
      }
      function State(writer) {
        this.head = writer.head;
        this.tail = writer.tail;
        this.len = writer.len;
        this.next = writer.states;
      }
      function Writer() {
        this.len = 0;
        this.head = new Op(noop, 0, 0);
        this.tail = this.head;
        this.states = null;
      }
      var create = function create2() {
        return util.Buffer ? function create_buffer_setup() {
          return (Writer.create = function create_buffer() {
            return new BufferWriter();
          })();
        } : function create_array() {
          return new Writer();
        };
      };
      Writer.create = create();
      Writer.alloc = function alloc(size) {
        return new util.Array(size);
      };
      if (util.Array !== Array)
        Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
      Writer.prototype._push = function push(fn, len, val) {
        this.tail = this.tail.next = new Op(fn, len, val);
        this.len += len;
        return this;
      };
      function writeByte(val, buf, pos) {
        buf[pos] = val & 255;
      }
      function writeVarint32(val, buf, pos) {
        while (val > 127) {
          buf[pos++] = val & 127 | 128;
          val >>>= 7;
        }
        buf[pos] = val;
      }
      function VarintOp(len, val) {
        this.len = len;
        this.next = void 0;
        this.val = val;
      }
      VarintOp.prototype = Object.create(Op.prototype);
      VarintOp.prototype.fn = writeVarint32;
      Writer.prototype.uint32 = function write_uint32(value) {
        this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;
        return this;
      };
      Writer.prototype.int32 = function write_int32(value) {
        return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
      };
      Writer.prototype.sint32 = function write_sint32(value) {
        return this.uint32((value << 1 ^ value >> 31) >>> 0);
      };
      function writeVarint64(val, buf, pos) {
        while (val.hi) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
          val.hi >>>= 7;
        }
        while (val.lo > 127) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = val.lo >>> 7;
        }
        buf[pos++] = val.lo;
      }
      Writer.prototype.uint64 = function write_uint64(value) {
        var bits = LongBits.from(value);
        return this._push(writeVarint64, bits.length(), bits);
      };
      Writer.prototype.int64 = Writer.prototype.uint64;
      Writer.prototype.sint64 = function write_sint64(value) {
        var bits = LongBits.from(value).zzEncode();
        return this._push(writeVarint64, bits.length(), bits);
      };
      Writer.prototype.bool = function write_bool(value) {
        return this._push(writeByte, 1, value ? 1 : 0);
      };
      function writeFixed32(val, buf, pos) {
        buf[pos] = val & 255;
        buf[pos + 1] = val >>> 8 & 255;
        buf[pos + 2] = val >>> 16 & 255;
        buf[pos + 3] = val >>> 24;
      }
      Writer.prototype.fixed32 = function write_fixed32(value) {
        return this._push(writeFixed32, 4, value >>> 0);
      };
      Writer.prototype.sfixed32 = Writer.prototype.fixed32;
      Writer.prototype.fixed64 = function write_fixed64(value) {
        var bits = LongBits.from(value);
        return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
      };
      Writer.prototype.sfixed64 = Writer.prototype.fixed64;
      Writer.prototype.float = function write_float(value) {
        return this._push(util.float.writeFloatLE, 4, value);
      };
      Writer.prototype.double = function write_double(value) {
        return this._push(util.float.writeDoubleLE, 8, value);
      };
      var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
          buf[pos + i] = val[i];
      };
      Writer.prototype.bytes = function write_bytes(value) {
        var len = value.length >>> 0;
        if (!len)
          return this._push(writeByte, 1, 0);
        if (util.isString(value)) {
          var buf = Writer.alloc(len = base64.length(value));
          base64.decode(value, buf, 0);
          value = buf;
        }
        return this.uint32(len)._push(writeBytes, len, value);
      };
      Writer.prototype.string = function write_string(value) {
        var len = utf8.length(value);
        return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
      };
      Writer.prototype.fork = function fork() {
        this.states = new State(this);
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
        return this;
      };
      Writer.prototype.reset = function reset() {
        if (this.states) {
          this.head = this.states.head;
          this.tail = this.states.tail;
          this.len = this.states.len;
          this.states = this.states.next;
        } else {
          this.head = this.tail = new Op(noop, 0, 0);
          this.len = 0;
        }
        return this;
      };
      Writer.prototype.ldelim = function ldelim() {
        var head = this.head, tail = this.tail, len = this.len;
        this.reset().uint32(len);
        if (len) {
          this.tail.next = head.next;
          this.tail = tail;
          this.len += len;
        }
        return this;
      };
      Writer.prototype.finish = function finish() {
        var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
        while (head) {
          head.fn(head.val, buf, pos);
          pos += head.len;
          head = head.next;
        }
        return buf;
      };
      Writer._configure = function(BufferWriter_) {
        BufferWriter = BufferWriter_;
        Writer.create = create();
        BufferWriter._configure();
      };
    }
  });

  // node_modules/protobufjs/src/writer_buffer.js
  var require_writer_buffer = __commonJS({
    "node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = BufferWriter;
      var Writer = require_writer();
      (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
      var util = require_minimal();
      function BufferWriter() {
        Writer.call(this);
      }
      BufferWriter._configure = function() {
        BufferWriter.alloc = util._Buffer_allocUnsafe;
        BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
          buf.set(val, pos);
        } : function writeBytesBuffer_copy(val, buf, pos) {
          if (val.copy)
            val.copy(buf, pos, 0, val.length);
          else
            for (var i = 0; i < val.length; )
              buf[pos++] = val[i++];
        };
      };
      BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
        if (util.isString(value))
          value = util._Buffer_from(value, "base64");
        var len = value.length >>> 0;
        this.uint32(len);
        if (len)
          this._push(BufferWriter.writeBytesBuffer, len, value);
        return this;
      };
      function writeStringBuffer(val, buf, pos) {
        if (val.length < 40)
          util.utf8.write(val, buf, pos);
        else if (buf.utf8Write)
          buf.utf8Write(val, pos);
        else
          buf.write(val, pos);
      }
      BufferWriter.prototype.string = function write_string_buffer(value) {
        var len = util.Buffer.byteLength(value);
        this.uint32(len);
        if (len)
          this._push(writeStringBuffer, len, value);
        return this;
      };
      BufferWriter._configure();
    }
  });

  // node_modules/protobufjs/src/reader.js
  var require_reader = __commonJS({
    "node_modules/protobufjs/src/reader.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = Reader;
      var util = require_minimal();
      var BufferReader;
      var LongBits = util.LongBits;
      var utf8 = util.utf8;
      function indexOutOfRange(reader, writeLength) {
        return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
      }
      function Reader(buffer) {
        this.buf = buffer;
        this.pos = 0;
        this.len = buffer.length;
      }
      var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
          return new Reader(buffer);
        throw Error("illegal buffer");
      } : function create_array2(buffer) {
        if (Array.isArray(buffer))
          return new Reader(buffer);
        throw Error("illegal buffer");
      };
      var create = function create2() {
        return util.Buffer ? function create_buffer_setup(buffer) {
          return (Reader.create = function create_buffer(buffer2) {
            return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
          })(buffer);
        } : create_array;
      };
      Reader.create = create();
      Reader.prototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;
      Reader.prototype.uint32 = function read_uint32_setup() {
        var value = 4294967295;
        return function read_uint32() {
          value = (this.buf[this.pos] & 127) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
          }
          return value;
        };
      }();
      Reader.prototype.int32 = function read_int32() {
        return this.uint32() | 0;
      };
      Reader.prototype.sint32 = function read_sint32() {
        var value = this.uint32();
        return value >>> 1 ^ -(value & 1) | 0;
      };
      function readLongVarint() {
        var bits = new LongBits(0, 0);
        var i = 0;
        if (this.len - this.pos > 4) {
          for (; i < 4; ++i) {
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
          i = 0;
        } else {
          for (; i < 3; ++i) {
            if (this.pos >= this.len)
              throw indexOutOfRange(this);
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
          bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
          return bits;
        }
        if (this.len - this.pos > 4) {
          for (; i < 5; ++i) {
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
        } else {
          for (; i < 5; ++i) {
            if (this.pos >= this.len)
              throw indexOutOfRange(this);
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
        }
        throw Error("invalid varint encoding");
      }
      Reader.prototype.bool = function read_bool() {
        return this.uint32() !== 0;
      };
      function readFixed32_end(buf, end) {
        return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
      }
      Reader.prototype.fixed32 = function read_fixed32() {
        if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);
        return readFixed32_end(this.buf, this.pos += 4);
      };
      Reader.prototype.sfixed32 = function read_sfixed32() {
        if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);
        return readFixed32_end(this.buf, this.pos += 4) | 0;
      };
      function readFixed64() {
        if (this.pos + 8 > this.len)
          throw indexOutOfRange(this, 8);
        return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
      }
      Reader.prototype.float = function read_float() {
        if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);
        var value = util.float.readFloatLE(this.buf, this.pos);
        this.pos += 4;
        return value;
      };
      Reader.prototype.double = function read_double() {
        if (this.pos + 8 > this.len)
          throw indexOutOfRange(this, 4);
        var value = util.float.readDoubleLE(this.buf, this.pos);
        this.pos += 8;
        return value;
      };
      Reader.prototype.bytes = function read_bytes() {
        var length = this.uint32(), start = this.pos, end = this.pos + length;
        if (end > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
        if (Array.isArray(this.buf))
          return this.buf.slice(start, end);
        return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
      };
      Reader.prototype.string = function read_string() {
        var bytes = this.bytes();
        return utf8.read(bytes, 0, bytes.length);
      };
      Reader.prototype.skip = function skip(length) {
        if (typeof length === "number") {
          if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
          this.pos += length;
        } else {
          do {
            if (this.pos >= this.len)
              throw indexOutOfRange(this);
          } while (this.buf[this.pos++] & 128);
        }
        return this;
      };
      Reader.prototype.skipType = function(wireType) {
        switch (wireType) {
          case 0:
            this.skip();
            break;
          case 1:
            this.skip(8);
            break;
          case 2:
            this.skip(this.uint32());
            break;
          case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
              this.skipType(wireType);
            }
            break;
          case 5:
            this.skip(4);
            break;
          default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
        }
        return this;
      };
      Reader._configure = function(BufferReader_) {
        BufferReader = BufferReader_;
        Reader.create = create();
        BufferReader._configure();
        var fn = util.Long ? "toLong" : "toNumber";
        util.merge(Reader.prototype, {
          int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
          },
          uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
          },
          sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
          },
          fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
          },
          sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
          }
        });
      };
    }
  });

  // node_modules/protobufjs/src/reader_buffer.js
  var require_reader_buffer = __commonJS({
    "node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = BufferReader;
      var Reader = require_reader();
      (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
      var util = require_minimal();
      function BufferReader(buffer) {
        Reader.call(this, buffer);
      }
      BufferReader._configure = function() {
        if (util.Buffer)
          BufferReader.prototype._slice = util.Buffer.prototype.slice;
      };
      BufferReader.prototype.string = function read_string_buffer() {
        var len = this.uint32();
        return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
      };
      BufferReader._configure();
    }
  });

  // node_modules/protobufjs/src/rpc/service.js
  var require_service = __commonJS({
    "node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = Service;
      var util = require_minimal();
      (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
      function Service(rpcImpl, requestDelimited, responseDelimited) {
        if (typeof rpcImpl !== "function")
          throw TypeError("rpcImpl must be a function");
        util.EventEmitter.call(this);
        this.rpcImpl = rpcImpl;
        this.requestDelimited = Boolean(requestDelimited);
        this.responseDelimited = Boolean(responseDelimited);
      }
      Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
        if (!request)
          throw TypeError("request must be specified");
        var self2 = this;
        if (!callback)
          return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
        if (!self2.rpcImpl) {
          setTimeout(function() {
            callback(Error("already ended"));
          }, 0);
          return void 0;
        }
        try {
          return self2.rpcImpl(method, requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {
            if (err) {
              self2.emit("error", err, method);
              return callback(err);
            }
            if (response === null) {
              self2.end(true);
              return void 0;
            }
            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err2) {
                self2.emit("error", err2, method);
                return callback(err2);
              }
            }
            self2.emit("data", response, method);
            return callback(null, response);
          });
        } catch (err) {
          self2.emit("error", err, method);
          setTimeout(function() {
            callback(err);
          }, 0);
          return void 0;
        }
      };
      Service.prototype.end = function end(endedByRPC) {
        if (this.rpcImpl) {
          if (!endedByRPC)
            this.rpcImpl(null, null, null);
          this.rpcImpl = null;
          this.emit("end").off();
        }
        return this;
      };
    }
  });

  // node_modules/protobufjs/src/rpc.js
  var require_rpc = __commonJS({
    "node_modules/protobufjs/src/rpc.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      var rpc = exports2;
      rpc.Service = require_service();
    }
  });

  // node_modules/protobufjs/src/roots.js
  var require_roots = __commonJS({
    "node_modules/protobufjs/src/roots.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = {};
    }
  });

  // node_modules/protobufjs/src/index-minimal.js
  var require_index_minimal = __commonJS({
    "node_modules/protobufjs/src/index-minimal.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      var protobuf = exports2;
      protobuf.build = "minimal";
      protobuf.Writer = require_writer();
      protobuf.BufferWriter = require_writer_buffer();
      protobuf.Reader = require_reader();
      protobuf.BufferReader = require_reader_buffer();
      protobuf.util = require_minimal();
      protobuf.rpc = require_rpc();
      protobuf.roots = require_roots();
      protobuf.configure = configure;
      function configure() {
        protobuf.util._configure();
        protobuf.Writer._configure(protobuf.BufferWriter);
        protobuf.Reader._configure(protobuf.BufferReader);
      }
      configure();
    }
  });

  // node_modules/protobufjs/minimal.js
  var require_minimal2 = __commonJS({
    "node_modules/protobufjs/minimal.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = require_index_minimal();
    }
  });

  // node_modules/@dcl/rpc/dist/protocol/index.js
  var require_protocol = __commonJS({
    "node_modules/@dcl/rpc/dist/protocol/index.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      var __importDefault = exports2 && exports2.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : {"default": mod};
      };
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.StreamMessage = exports2.Response = exports2.RemoteError = exports2.Request = exports2.ModuleProcedure = exports2.DestroyPort = exports2.RequestModuleResponse = exports2.RequestModule = exports2.CreatePortResponse = exports2.CreatePort = exports2.RpcMessageHeader = exports2.rpcMessageTypesToJSON = exports2.rpcMessageTypesFromJSON = exports2.RpcMessageTypes = exports2.protobufPackage = void 0;
      var minimal_1 = __importDefault(require_minimal2());
      exports2.protobufPackage = "";
      var RpcMessageTypes;
      (function(RpcMessageTypes2) {
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_EMPTY"] = 0] = "RpcMessageTypes_EMPTY";
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_REQUEST"] = 1] = "RpcMessageTypes_REQUEST";
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_RESPONSE"] = 2] = "RpcMessageTypes_RESPONSE";
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_STREAM_MESSAGE"] = 3] = "RpcMessageTypes_STREAM_MESSAGE";
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_STREAM_ACK"] = 4] = "RpcMessageTypes_STREAM_ACK";
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_CREATE_PORT"] = 5] = "RpcMessageTypes_CREATE_PORT";
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_CREATE_PORT_RESPONSE"] = 6] = "RpcMessageTypes_CREATE_PORT_RESPONSE";
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_REQUEST_MODULE"] = 7] = "RpcMessageTypes_REQUEST_MODULE";
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_REQUEST_MODULE_RESPONSE"] = 8] = "RpcMessageTypes_REQUEST_MODULE_RESPONSE";
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_REMOTE_ERROR_RESPONSE"] = 9] = "RpcMessageTypes_REMOTE_ERROR_RESPONSE";
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_DESTROY_PORT"] = 10] = "RpcMessageTypes_DESTROY_PORT";
        RpcMessageTypes2[RpcMessageTypes2["RpcMessageTypes_SERVER_READY"] = 11] = "RpcMessageTypes_SERVER_READY";
        RpcMessageTypes2[RpcMessageTypes2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
      })(RpcMessageTypes = exports2.RpcMessageTypes || (exports2.RpcMessageTypes = {}));
      function rpcMessageTypesFromJSON(object) {
        switch (object) {
          case 0:
          case "RpcMessageTypes_EMPTY":
            return RpcMessageTypes.RpcMessageTypes_EMPTY;
          case 1:
          case "RpcMessageTypes_REQUEST":
            return RpcMessageTypes.RpcMessageTypes_REQUEST;
          case 2:
          case "RpcMessageTypes_RESPONSE":
            return RpcMessageTypes.RpcMessageTypes_RESPONSE;
          case 3:
          case "RpcMessageTypes_STREAM_MESSAGE":
            return RpcMessageTypes.RpcMessageTypes_STREAM_MESSAGE;
          case 4:
          case "RpcMessageTypes_STREAM_ACK":
            return RpcMessageTypes.RpcMessageTypes_STREAM_ACK;
          case 5:
          case "RpcMessageTypes_CREATE_PORT":
            return RpcMessageTypes.RpcMessageTypes_CREATE_PORT;
          case 6:
          case "RpcMessageTypes_CREATE_PORT_RESPONSE":
            return RpcMessageTypes.RpcMessageTypes_CREATE_PORT_RESPONSE;
          case 7:
          case "RpcMessageTypes_REQUEST_MODULE":
            return RpcMessageTypes.RpcMessageTypes_REQUEST_MODULE;
          case 8:
          case "RpcMessageTypes_REQUEST_MODULE_RESPONSE":
            return RpcMessageTypes.RpcMessageTypes_REQUEST_MODULE_RESPONSE;
          case 9:
          case "RpcMessageTypes_REMOTE_ERROR_RESPONSE":
            return RpcMessageTypes.RpcMessageTypes_REMOTE_ERROR_RESPONSE;
          case 10:
          case "RpcMessageTypes_DESTROY_PORT":
            return RpcMessageTypes.RpcMessageTypes_DESTROY_PORT;
          case 11:
          case "RpcMessageTypes_SERVER_READY":
            return RpcMessageTypes.RpcMessageTypes_SERVER_READY;
          case -1:
          case "UNRECOGNIZED":
          default:
            return RpcMessageTypes.UNRECOGNIZED;
        }
      }
      exports2.rpcMessageTypesFromJSON = rpcMessageTypesFromJSON;
      function rpcMessageTypesToJSON(object) {
        switch (object) {
          case RpcMessageTypes.RpcMessageTypes_EMPTY:
            return "RpcMessageTypes_EMPTY";
          case RpcMessageTypes.RpcMessageTypes_REQUEST:
            return "RpcMessageTypes_REQUEST";
          case RpcMessageTypes.RpcMessageTypes_RESPONSE:
            return "RpcMessageTypes_RESPONSE";
          case RpcMessageTypes.RpcMessageTypes_STREAM_MESSAGE:
            return "RpcMessageTypes_STREAM_MESSAGE";
          case RpcMessageTypes.RpcMessageTypes_STREAM_ACK:
            return "RpcMessageTypes_STREAM_ACK";
          case RpcMessageTypes.RpcMessageTypes_CREATE_PORT:
            return "RpcMessageTypes_CREATE_PORT";
          case RpcMessageTypes.RpcMessageTypes_CREATE_PORT_RESPONSE:
            return "RpcMessageTypes_CREATE_PORT_RESPONSE";
          case RpcMessageTypes.RpcMessageTypes_REQUEST_MODULE:
            return "RpcMessageTypes_REQUEST_MODULE";
          case RpcMessageTypes.RpcMessageTypes_REQUEST_MODULE_RESPONSE:
            return "RpcMessageTypes_REQUEST_MODULE_RESPONSE";
          case RpcMessageTypes.RpcMessageTypes_REMOTE_ERROR_RESPONSE:
            return "RpcMessageTypes_REMOTE_ERROR_RESPONSE";
          case RpcMessageTypes.RpcMessageTypes_DESTROY_PORT:
            return "RpcMessageTypes_DESTROY_PORT";
          case RpcMessageTypes.RpcMessageTypes_SERVER_READY:
            return "RpcMessageTypes_SERVER_READY";
          case RpcMessageTypes.UNRECOGNIZED:
          default:
            return "UNRECOGNIZED";
        }
      }
      exports2.rpcMessageTypesToJSON = rpcMessageTypesToJSON;
      function createBaseRpcMessageHeader() {
        return {messageIdentifier: 0};
      }
      exports2.RpcMessageHeader = {
        encode(message, writer = minimal_1.default.Writer.create()) {
          if (message.messageIdentifier !== 0) {
            writer.uint32(13).fixed32(message.messageIdentifier);
          }
          return writer;
        },
        decode(input, length) {
          const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
          let end = length === void 0 ? reader.len : reader.pos + length;
          const message = createBaseRpcMessageHeader();
          while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.messageIdentifier = reader.fixed32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        },
        fromJSON(object) {
          return {messageIdentifier: isSet19(object.messageIdentifier) ? Number(object.messageIdentifier) : 0};
        },
        toJSON(message) {
          const obj = {};
          message.messageIdentifier !== void 0 && (obj.messageIdentifier = Math.round(message.messageIdentifier));
          return obj;
        },
        fromPartial(object) {
          var _a;
          const message = createBaseRpcMessageHeader();
          message.messageIdentifier = (_a = object.messageIdentifier) !== null && _a !== void 0 ? _a : 0;
          return message;
        }
      };
      function createBaseCreatePort() {
        return {messageIdentifier: 0, portName: ""};
      }
      exports2.CreatePort = {
        encode(message, writer = minimal_1.default.Writer.create()) {
          if (message.messageIdentifier !== 0) {
            writer.uint32(13).fixed32(message.messageIdentifier);
          }
          if (message.portName !== "") {
            writer.uint32(34).string(message.portName);
          }
          return writer;
        },
        decode(input, length) {
          const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
          let end = length === void 0 ? reader.len : reader.pos + length;
          const message = createBaseCreatePort();
          while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.messageIdentifier = reader.fixed32();
                break;
              case 4:
                message.portName = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        },
        fromJSON(object) {
          return {
            messageIdentifier: isSet19(object.messageIdentifier) ? Number(object.messageIdentifier) : 0,
            portName: isSet19(object.portName) ? String(object.portName) : ""
          };
        },
        toJSON(message) {
          const obj = {};
          message.messageIdentifier !== void 0 && (obj.messageIdentifier = Math.round(message.messageIdentifier));
          message.portName !== void 0 && (obj.portName = message.portName);
          return obj;
        },
        fromPartial(object) {
          var _a, _b;
          const message = createBaseCreatePort();
          message.messageIdentifier = (_a = object.messageIdentifier) !== null && _a !== void 0 ? _a : 0;
          message.portName = (_b = object.portName) !== null && _b !== void 0 ? _b : "";
          return message;
        }
      };
      function createBaseCreatePortResponse() {
        return {messageIdentifier: 0, portId: 0};
      }
      exports2.CreatePortResponse = {
        encode(message, writer = minimal_1.default.Writer.create()) {
          if (message.messageIdentifier !== 0) {
            writer.uint32(13).fixed32(message.messageIdentifier);
          }
          if (message.portId !== 0) {
            writer.uint32(21).fixed32(message.portId);
          }
          return writer;
        },
        decode(input, length) {
          const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
          let end = length === void 0 ? reader.len : reader.pos + length;
          const message = createBaseCreatePortResponse();
          while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.messageIdentifier = reader.fixed32();
                break;
              case 2:
                message.portId = reader.fixed32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        },
        fromJSON(object) {
          return {
            messageIdentifier: isSet19(object.messageIdentifier) ? Number(object.messageIdentifier) : 0,
            portId: isSet19(object.portId) ? Number(object.portId) : 0
          };
        },
        toJSON(message) {
          const obj = {};
          message.messageIdentifier !== void 0 && (obj.messageIdentifier = Math.round(message.messageIdentifier));
          message.portId !== void 0 && (obj.portId = Math.round(message.portId));
          return obj;
        },
        fromPartial(object) {
          var _a, _b;
          const message = createBaseCreatePortResponse();
          message.messageIdentifier = (_a = object.messageIdentifier) !== null && _a !== void 0 ? _a : 0;
          message.portId = (_b = object.portId) !== null && _b !== void 0 ? _b : 0;
          return message;
        }
      };
      function createBaseRequestModule() {
        return {messageIdentifier: 0, portId: 0, moduleName: ""};
      }
      exports2.RequestModule = {
        encode(message, writer = minimal_1.default.Writer.create()) {
          if (message.messageIdentifier !== 0) {
            writer.uint32(13).fixed32(message.messageIdentifier);
          }
          if (message.portId !== 0) {
            writer.uint32(21).fixed32(message.portId);
          }
          if (message.moduleName !== "") {
            writer.uint32(34).string(message.moduleName);
          }
          return writer;
        },
        decode(input, length) {
          const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
          let end = length === void 0 ? reader.len : reader.pos + length;
          const message = createBaseRequestModule();
          while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.messageIdentifier = reader.fixed32();
                break;
              case 2:
                message.portId = reader.fixed32();
                break;
              case 4:
                message.moduleName = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        },
        fromJSON(object) {
          return {
            messageIdentifier: isSet19(object.messageIdentifier) ? Number(object.messageIdentifier) : 0,
            portId: isSet19(object.portId) ? Number(object.portId) : 0,
            moduleName: isSet19(object.moduleName) ? String(object.moduleName) : ""
          };
        },
        toJSON(message) {
          const obj = {};
          message.messageIdentifier !== void 0 && (obj.messageIdentifier = Math.round(message.messageIdentifier));
          message.portId !== void 0 && (obj.portId = Math.round(message.portId));
          message.moduleName !== void 0 && (obj.moduleName = message.moduleName);
          return obj;
        },
        fromPartial(object) {
          var _a, _b, _c;
          const message = createBaseRequestModule();
          message.messageIdentifier = (_a = object.messageIdentifier) !== null && _a !== void 0 ? _a : 0;
          message.portId = (_b = object.portId) !== null && _b !== void 0 ? _b : 0;
          message.moduleName = (_c = object.moduleName) !== null && _c !== void 0 ? _c : "";
          return message;
        }
      };
      function createBaseRequestModuleResponse() {
        return {messageIdentifier: 0, portId: 0, procedures: []};
      }
      exports2.RequestModuleResponse = {
        encode(message, writer = minimal_1.default.Writer.create()) {
          if (message.messageIdentifier !== 0) {
            writer.uint32(13).fixed32(message.messageIdentifier);
          }
          if (message.portId !== 0) {
            writer.uint32(21).fixed32(message.portId);
          }
          for (const v of message.procedures) {
            exports2.ModuleProcedure.encode(v, writer.uint32(42).fork()).ldelim();
          }
          return writer;
        },
        decode(input, length) {
          const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
          let end = length === void 0 ? reader.len : reader.pos + length;
          const message = createBaseRequestModuleResponse();
          while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.messageIdentifier = reader.fixed32();
                break;
              case 2:
                message.portId = reader.fixed32();
                break;
              case 5:
                message.procedures.push(exports2.ModuleProcedure.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        },
        fromJSON(object) {
          return {
            messageIdentifier: isSet19(object.messageIdentifier) ? Number(object.messageIdentifier) : 0,
            portId: isSet19(object.portId) ? Number(object.portId) : 0,
            procedures: Array.isArray(object === null || object === void 0 ? void 0 : object.procedures) ? object.procedures.map((e) => exports2.ModuleProcedure.fromJSON(e)) : []
          };
        },
        toJSON(message) {
          const obj = {};
          message.messageIdentifier !== void 0 && (obj.messageIdentifier = Math.round(message.messageIdentifier));
          message.portId !== void 0 && (obj.portId = Math.round(message.portId));
          if (message.procedures) {
            obj.procedures = message.procedures.map((e) => e ? exports2.ModuleProcedure.toJSON(e) : void 0);
          } else {
            obj.procedures = [];
          }
          return obj;
        },
        fromPartial(object) {
          var _a, _b, _c;
          const message = createBaseRequestModuleResponse();
          message.messageIdentifier = (_a = object.messageIdentifier) !== null && _a !== void 0 ? _a : 0;
          message.portId = (_b = object.portId) !== null && _b !== void 0 ? _b : 0;
          message.procedures = ((_c = object.procedures) === null || _c === void 0 ? void 0 : _c.map((e) => exports2.ModuleProcedure.fromPartial(e))) || [];
          return message;
        }
      };
      function createBaseDestroyPort() {
        return {messageIdentifier: 0, portId: 0};
      }
      exports2.DestroyPort = {
        encode(message, writer = minimal_1.default.Writer.create()) {
          if (message.messageIdentifier !== 0) {
            writer.uint32(13).fixed32(message.messageIdentifier);
          }
          if (message.portId !== 0) {
            writer.uint32(21).fixed32(message.portId);
          }
          return writer;
        },
        decode(input, length) {
          const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
          let end = length === void 0 ? reader.len : reader.pos + length;
          const message = createBaseDestroyPort();
          while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.messageIdentifier = reader.fixed32();
                break;
              case 2:
                message.portId = reader.fixed32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        },
        fromJSON(object) {
          return {
            messageIdentifier: isSet19(object.messageIdentifier) ? Number(object.messageIdentifier) : 0,
            portId: isSet19(object.portId) ? Number(object.portId) : 0
          };
        },
        toJSON(message) {
          const obj = {};
          message.messageIdentifier !== void 0 && (obj.messageIdentifier = Math.round(message.messageIdentifier));
          message.portId !== void 0 && (obj.portId = Math.round(message.portId));
          return obj;
        },
        fromPartial(object) {
          var _a, _b;
          const message = createBaseDestroyPort();
          message.messageIdentifier = (_a = object.messageIdentifier) !== null && _a !== void 0 ? _a : 0;
          message.portId = (_b = object.portId) !== null && _b !== void 0 ? _b : 0;
          return message;
        }
      };
      function createBaseModuleProcedure() {
        return {procedureId: 0, procedureName: ""};
      }
      exports2.ModuleProcedure = {
        encode(message, writer = minimal_1.default.Writer.create()) {
          if (message.procedureId !== 0) {
            writer.uint32(13).fixed32(message.procedureId);
          }
          if (message.procedureName !== "") {
            writer.uint32(18).string(message.procedureName);
          }
          return writer;
        },
        decode(input, length) {
          const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
          let end = length === void 0 ? reader.len : reader.pos + length;
          const message = createBaseModuleProcedure();
          while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.procedureId = reader.fixed32();
                break;
              case 2:
                message.procedureName = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        },
        fromJSON(object) {
          return {
            procedureId: isSet19(object.procedureId) ? Number(object.procedureId) : 0,
            procedureName: isSet19(object.procedureName) ? String(object.procedureName) : ""
          };
        },
        toJSON(message) {
          const obj = {};
          message.procedureId !== void 0 && (obj.procedureId = Math.round(message.procedureId));
          message.procedureName !== void 0 && (obj.procedureName = message.procedureName);
          return obj;
        },
        fromPartial(object) {
          var _a, _b;
          const message = createBaseModuleProcedure();
          message.procedureId = (_a = object.procedureId) !== null && _a !== void 0 ? _a : 0;
          message.procedureName = (_b = object.procedureName) !== null && _b !== void 0 ? _b : "";
          return message;
        }
      };
      function createBaseRequest() {
        return {messageIdentifier: 0, portId: 0, procedureId: 0, clientStream: 0, payload: new Uint8Array()};
      }
      exports2.Request = {
        encode(message, writer = minimal_1.default.Writer.create()) {
          if (message.messageIdentifier !== 0) {
            writer.uint32(13).fixed32(message.messageIdentifier);
          }
          if (message.portId !== 0) {
            writer.uint32(21).fixed32(message.portId);
          }
          if (message.procedureId !== 0) {
            writer.uint32(37).fixed32(message.procedureId);
          }
          if (message.clientStream !== 0) {
            writer.uint32(45).fixed32(message.clientStream);
          }
          if (message.payload.length !== 0) {
            writer.uint32(50).bytes(message.payload);
          }
          return writer;
        },
        decode(input, length) {
          const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
          let end = length === void 0 ? reader.len : reader.pos + length;
          const message = createBaseRequest();
          while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.messageIdentifier = reader.fixed32();
                break;
              case 2:
                message.portId = reader.fixed32();
                break;
              case 4:
                message.procedureId = reader.fixed32();
                break;
              case 5:
                message.clientStream = reader.fixed32();
                break;
              case 6:
                message.payload = reader.bytes();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        },
        fromJSON(object) {
          return {
            messageIdentifier: isSet19(object.messageIdentifier) ? Number(object.messageIdentifier) : 0,
            portId: isSet19(object.portId) ? Number(object.portId) : 0,
            procedureId: isSet19(object.procedureId) ? Number(object.procedureId) : 0,
            clientStream: isSet19(object.clientStream) ? Number(object.clientStream) : 0,
            payload: isSet19(object.payload) ? bytesFromBase642(object.payload) : new Uint8Array()
          };
        },
        toJSON(message) {
          const obj = {};
          message.messageIdentifier !== void 0 && (obj.messageIdentifier = Math.round(message.messageIdentifier));
          message.portId !== void 0 && (obj.portId = Math.round(message.portId));
          message.procedureId !== void 0 && (obj.procedureId = Math.round(message.procedureId));
          message.clientStream !== void 0 && (obj.clientStream = Math.round(message.clientStream));
          message.payload !== void 0 && (obj.payload = base64FromBytes2(message.payload !== void 0 ? message.payload : new Uint8Array()));
          return obj;
        },
        fromPartial(object) {
          var _a, _b, _c, _d, _e;
          const message = createBaseRequest();
          message.messageIdentifier = (_a = object.messageIdentifier) !== null && _a !== void 0 ? _a : 0;
          message.portId = (_b = object.portId) !== null && _b !== void 0 ? _b : 0;
          message.procedureId = (_c = object.procedureId) !== null && _c !== void 0 ? _c : 0;
          message.clientStream = (_d = object.clientStream) !== null && _d !== void 0 ? _d : 0;
          message.payload = (_e = object.payload) !== null && _e !== void 0 ? _e : new Uint8Array();
          return message;
        }
      };
      function createBaseRemoteError() {
        return {messageIdentifier: 0, errorCode: 0, errorMessage: ""};
      }
      exports2.RemoteError = {
        encode(message, writer = minimal_1.default.Writer.create()) {
          if (message.messageIdentifier !== 0) {
            writer.uint32(13).fixed32(message.messageIdentifier);
          }
          if (message.errorCode !== 0) {
            writer.uint32(21).fixed32(message.errorCode);
          }
          if (message.errorMessage !== "") {
            writer.uint32(26).string(message.errorMessage);
          }
          return writer;
        },
        decode(input, length) {
          const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
          let end = length === void 0 ? reader.len : reader.pos + length;
          const message = createBaseRemoteError();
          while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.messageIdentifier = reader.fixed32();
                break;
              case 2:
                message.errorCode = reader.fixed32();
                break;
              case 3:
                message.errorMessage = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        },
        fromJSON(object) {
          return {
            messageIdentifier: isSet19(object.messageIdentifier) ? Number(object.messageIdentifier) : 0,
            errorCode: isSet19(object.errorCode) ? Number(object.errorCode) : 0,
            errorMessage: isSet19(object.errorMessage) ? String(object.errorMessage) : ""
          };
        },
        toJSON(message) {
          const obj = {};
          message.messageIdentifier !== void 0 && (obj.messageIdentifier = Math.round(message.messageIdentifier));
          message.errorCode !== void 0 && (obj.errorCode = Math.round(message.errorCode));
          message.errorMessage !== void 0 && (obj.errorMessage = message.errorMessage);
          return obj;
        },
        fromPartial(object) {
          var _a, _b, _c;
          const message = createBaseRemoteError();
          message.messageIdentifier = (_a = object.messageIdentifier) !== null && _a !== void 0 ? _a : 0;
          message.errorCode = (_b = object.errorCode) !== null && _b !== void 0 ? _b : 0;
          message.errorMessage = (_c = object.errorMessage) !== null && _c !== void 0 ? _c : "";
          return message;
        }
      };
      function createBaseResponse() {
        return {messageIdentifier: 0, payload: new Uint8Array()};
      }
      exports2.Response = {
        encode(message, writer = minimal_1.default.Writer.create()) {
          if (message.messageIdentifier !== 0) {
            writer.uint32(13).fixed32(message.messageIdentifier);
          }
          if (message.payload.length !== 0) {
            writer.uint32(50).bytes(message.payload);
          }
          return writer;
        },
        decode(input, length) {
          const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
          let end = length === void 0 ? reader.len : reader.pos + length;
          const message = createBaseResponse();
          while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.messageIdentifier = reader.fixed32();
                break;
              case 6:
                message.payload = reader.bytes();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        },
        fromJSON(object) {
          return {
            messageIdentifier: isSet19(object.messageIdentifier) ? Number(object.messageIdentifier) : 0,
            payload: isSet19(object.payload) ? bytesFromBase642(object.payload) : new Uint8Array()
          };
        },
        toJSON(message) {
          const obj = {};
          message.messageIdentifier !== void 0 && (obj.messageIdentifier = Math.round(message.messageIdentifier));
          message.payload !== void 0 && (obj.payload = base64FromBytes2(message.payload !== void 0 ? message.payload : new Uint8Array()));
          return obj;
        },
        fromPartial(object) {
          var _a, _b;
          const message = createBaseResponse();
          message.messageIdentifier = (_a = object.messageIdentifier) !== null && _a !== void 0 ? _a : 0;
          message.payload = (_b = object.payload) !== null && _b !== void 0 ? _b : new Uint8Array();
          return message;
        }
      };
      function createBaseStreamMessage() {
        return {messageIdentifier: 0, portId: 0, sequenceId: 0, payload: new Uint8Array(), closed: false, ack: false};
      }
      exports2.StreamMessage = {
        encode(message, writer = minimal_1.default.Writer.create()) {
          if (message.messageIdentifier !== 0) {
            writer.uint32(13).fixed32(message.messageIdentifier);
          }
          if (message.portId !== 0) {
            writer.uint32(21).fixed32(message.portId);
          }
          if (message.sequenceId !== 0) {
            writer.uint32(37).fixed32(message.sequenceId);
          }
          if (message.payload.length !== 0) {
            writer.uint32(50).bytes(message.payload);
          }
          if (message.closed === true) {
            writer.uint32(56).bool(message.closed);
          }
          if (message.ack === true) {
            writer.uint32(64).bool(message.ack);
          }
          return writer;
        },
        decode(input, length) {
          const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
          let end = length === void 0 ? reader.len : reader.pos + length;
          const message = createBaseStreamMessage();
          while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.messageIdentifier = reader.fixed32();
                break;
              case 2:
                message.portId = reader.fixed32();
                break;
              case 4:
                message.sequenceId = reader.fixed32();
                break;
              case 6:
                message.payload = reader.bytes();
                break;
              case 7:
                message.closed = reader.bool();
                break;
              case 8:
                message.ack = reader.bool();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        },
        fromJSON(object) {
          return {
            messageIdentifier: isSet19(object.messageIdentifier) ? Number(object.messageIdentifier) : 0,
            portId: isSet19(object.portId) ? Number(object.portId) : 0,
            sequenceId: isSet19(object.sequenceId) ? Number(object.sequenceId) : 0,
            payload: isSet19(object.payload) ? bytesFromBase642(object.payload) : new Uint8Array(),
            closed: isSet19(object.closed) ? Boolean(object.closed) : false,
            ack: isSet19(object.ack) ? Boolean(object.ack) : false
          };
        },
        toJSON(message) {
          const obj = {};
          message.messageIdentifier !== void 0 && (obj.messageIdentifier = Math.round(message.messageIdentifier));
          message.portId !== void 0 && (obj.portId = Math.round(message.portId));
          message.sequenceId !== void 0 && (obj.sequenceId = Math.round(message.sequenceId));
          message.payload !== void 0 && (obj.payload = base64FromBytes2(message.payload !== void 0 ? message.payload : new Uint8Array()));
          message.closed !== void 0 && (obj.closed = message.closed);
          message.ack !== void 0 && (obj.ack = message.ack);
          return obj;
        },
        fromPartial(object) {
          var _a, _b, _c, _d, _e, _f;
          const message = createBaseStreamMessage();
          message.messageIdentifier = (_a = object.messageIdentifier) !== null && _a !== void 0 ? _a : 0;
          message.portId = (_b = object.portId) !== null && _b !== void 0 ? _b : 0;
          message.sequenceId = (_c = object.sequenceId) !== null && _c !== void 0 ? _c : 0;
          message.payload = (_d = object.payload) !== null && _d !== void 0 ? _d : new Uint8Array();
          message.closed = (_e = object.closed) !== null && _e !== void 0 ? _e : false;
          message.ack = (_f = object.ack) !== null && _f !== void 0 ? _f : false;
          return message;
        }
      };
      var globalThis4 = (() => {
        if (typeof globalThis4 !== "undefined") {
          return globalThis4;
        }
        if (typeof self !== "undefined") {
          return self;
        }
        if (typeof window !== "undefined") {
          return window;
        }
        if (typeof global !== "undefined") {
          return global;
        }
        throw "Unable to locate global object";
      })();
      function bytesFromBase642(b64) {
        if (globalThis4.Buffer) {
          return Uint8Array.from(globalThis4.Buffer.from(b64, "base64"));
        } else {
          const bin = globalThis4.atob(b64);
          const arr = new Uint8Array(bin.length);
          for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
          }
          return arr;
        }
      }
      function base64FromBytes2(arr) {
        if (globalThis4.Buffer) {
          return globalThis4.Buffer.from(arr).toString("base64");
        } else {
          const bin = [];
          arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
          });
          return globalThis4.btoa(bin.join(""));
        }
      }
      function isSet19(value) {
        return value !== null && value !== void 0;
      }
    }
  });

  // node_modules/@dcl/rpc/dist/protocol/helpers.js
  var require_helpers = __commonJS({
    "node_modules/@dcl/rpc/dist/protocol/helpers.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.parseProtocolMessage = exports2.calculateMessageIdentifier = exports2.parseMessageIdentifier = exports2.streamAckMessage = exports2.streamMessage = exports2.closeStreamMessage = void 0;
      var minimal_1 = require_minimal2();
      var index_1 = require_protocol();
      var bb = new minimal_1.Writer();
      var EMPTY_U8A = Uint8Array.of();
      function closeStreamMessage(messageNumber, sequenceId, portId) {
        bb.reset();
        index_1.StreamMessage.encode({
          messageIdentifier: calculateMessageIdentifier(index_1.RpcMessageTypes.RpcMessageTypes_STREAM_MESSAGE, messageNumber),
          sequenceId,
          portId,
          ack: false,
          closed: true,
          payload: EMPTY_U8A
        }, bb);
        return bb.finish();
      }
      exports2.closeStreamMessage = closeStreamMessage;
      function streamMessage(messageNumber, sequenceId, portId, payload) {
        bb.reset();
        index_1.StreamMessage.encode({
          messageIdentifier: calculateMessageIdentifier(index_1.RpcMessageTypes.RpcMessageTypes_STREAM_MESSAGE, messageNumber),
          sequenceId,
          portId,
          ack: false,
          closed: false,
          payload
        }, bb);
        return bb.finish();
      }
      exports2.streamMessage = streamMessage;
      function streamAckMessage(messageNumber, sequenceId, portId) {
        bb.reset();
        index_1.StreamMessage.encode({
          messageIdentifier: calculateMessageIdentifier(index_1.RpcMessageTypes.RpcMessageTypes_STREAM_ACK, messageNumber),
          sequenceId,
          portId,
          ack: true,
          closed: false,
          payload: EMPTY_U8A
        }, bb);
        return bb.finish();
      }
      exports2.streamAckMessage = streamAckMessage;
      function parseMessageIdentifier(value) {
        return [value >> 27 & 15, value & 134217727];
      }
      exports2.parseMessageIdentifier = parseMessageIdentifier;
      function calculateMessageIdentifier(messageType, messageNumber) {
        return (messageType & 15) << 27 | messageNumber & 134217727;
      }
      exports2.calculateMessageIdentifier = calculateMessageIdentifier;
      function parseProtocolMessage(reader) {
        const originalPos = reader.pos;
        const [messageType, messageNumber] = parseMessageIdentifier(index_1.RpcMessageHeader.decode(reader).messageIdentifier);
        reader.pos = originalPos;
        switch (messageType) {
          case index_1.RpcMessageTypes.RpcMessageTypes_CREATE_PORT_RESPONSE:
            return [messageType, index_1.CreatePortResponse.decode(reader), messageNumber];
          case index_1.RpcMessageTypes.RpcMessageTypes_RESPONSE:
            return [messageType, index_1.Response.decode(reader), messageNumber];
          case index_1.RpcMessageTypes.RpcMessageTypes_REQUEST_MODULE_RESPONSE:
            return [messageType, index_1.RequestModuleResponse.decode(reader), messageNumber];
          case index_1.RpcMessageTypes.RpcMessageTypes_STREAM_MESSAGE:
            return [messageType, index_1.StreamMessage.decode(reader), messageNumber];
          case index_1.RpcMessageTypes.RpcMessageTypes_SERVER_READY:
            return [messageType, null, messageNumber];
          case index_1.RpcMessageTypes.RpcMessageTypes_REMOTE_ERROR_RESPONSE:
            return [messageType, index_1.RemoteError.decode(reader), messageNumber];
          case index_1.RpcMessageTypes.RpcMessageTypes_REQUEST:
            return [messageType, index_1.Request.decode(reader), messageNumber];
          case index_1.RpcMessageTypes.RpcMessageTypes_CREATE_PORT:
            return [messageType, index_1.CreatePort.decode(reader), messageNumber];
          case index_1.RpcMessageTypes.RpcMessageTypes_STREAM_ACK:
            return [messageType, index_1.StreamMessage.decode(reader), messageNumber];
          case index_1.RpcMessageTypes.RpcMessageTypes_REQUEST_MODULE:
            return [messageType, index_1.RequestModule.decode(reader), messageNumber];
          case index_1.RpcMessageTypes.RpcMessageTypes_DESTROY_PORT:
            return [messageType, index_1.DestroyPort.decode(reader), messageNumber];
        }
        return null;
      }
      exports2.parseProtocolMessage = parseProtocolMessage;
    }
  });

  // node_modules/@dcl/rpc/dist/message-dispatcher.js
  var require_message_dispatcher = __commonJS({
    "node_modules/@dcl/rpc/dist/message-dispatcher.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.messageDispatcher = void 0;
      var minimal_1 = require_minimal2();
      var helpers_1 = require_helpers();
      var protocol_1 = require_protocol();
      function messageDispatcher(transport) {
        const oneTimeCallbacks = new Map();
        const listeners = new Map();
        let globalHandlerFunction;
        transport.on("message", (message) => {
          try {
            const reader = minimal_1.Reader.create(message);
            const parsedMessage = (0, helpers_1.parseProtocolMessage)(reader);
            if (parsedMessage) {
              const [messageType, message2, messageNumber] = parsedMessage;
              if (globalHandlerFunction)
                globalHandlerFunction(messageType, message2, messageNumber);
              if (messageNumber > 0) {
                const fut = oneTimeCallbacks.get(messageNumber);
                try {
                  if (fut) {
                    const [resolve] = fut;
                    reader.pos = 0;
                    resolve({reader, messageType, messageNumber, message: message2});
                    oneTimeCallbacks.delete(messageNumber);
                  }
                  const handler = listeners.get(messageNumber);
                  if (handler) {
                    reader.pos = 0;
                    handler(reader, messageType, messageNumber, message2);
                  }
                  if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_STREAM_ACK || messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_STREAM_MESSAGE) {
                    receiveAck(message2, messageNumber);
                  }
                } catch (err) {
                  transport.emit("error", err);
                }
              }
            } else {
              transport.emit("error", new Error(`Transport received unknown message: ${message}`));
            }
          } catch (err) {
            transport.emit("error", err);
          }
        });
        const ackCallbacks = new Map();
        const bb = new minimal_1.Writer();
        function closeAll() {
          ackCallbacks.forEach(([resolve]) => resolve({closed: true, ack: false}));
          oneTimeCallbacks.forEach(([, reject]) => reject(new Error("RPC Transport closed")));
          ackCallbacks.clear();
        }
        transport.on("close", closeAll);
        transport.on("error", (err) => {
          ackCallbacks.forEach(([, reject]) => reject(err));
          oneTimeCallbacks.forEach(([, reject]) => reject(err));
          ackCallbacks.clear();
        });
        function receiveAck(data, messageNumber) {
          const key = `${messageNumber},${data.sequenceId}`;
          const fut = ackCallbacks.get(key);
          if (fut) {
            ackCallbacks.delete(key);
            fut[0](data);
          }
        }
        return {
          transport,
          setGlobalHandler(handler) {
            globalHandlerFunction = handler;
          },
          addOneTimeListener(messageId) {
            return new Promise((res, rej) => {
              oneTimeCallbacks.set(messageId, [res, rej]);
            });
          },
          addListener(messageId, handler) {
            if (listeners.has(messageId))
              throw new Error("There is already a handler for messageId " + messageId);
            listeners.set(messageId, handler);
          },
          removeListener(messageId) {
            if (!listeners.has(messageId))
              throw new Error("A handler is missing for messageId " + messageId);
            listeners.delete(messageId);
          },
          async sendStreamMessage(data) {
            const [_, messageNumber] = (0, helpers_1.parseMessageIdentifier)(data.messageIdentifier);
            const key = `${messageNumber},${data.sequenceId}`;
            const ret = new Promise(function ackPromise(ret2, rej) {
              ackCallbacks.set(key, [ret2, rej]);
            });
            bb.reset();
            protocol_1.StreamMessage.encode(data, bb);
            transport.sendMessage(bb.finish());
            return ret;
          }
        };
      }
      exports2.messageDispatcher = messageDispatcher;
    }
  });

  // node_modules/@dcl/rpc/dist/push-channel.js
  var require_push_channel = __commonJS({
    "node_modules/@dcl/rpc/dist/push-channel.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.AsyncQueue = exports2.pushableChannel = exports2.linkedList = void 0;
      var Node = class {
        constructor(value, prev) {
          this.value = value;
          this.prev = prev;
          this.next = void 0;
        }
      };
      function linkedList() {
        let head = void 0;
        let tail = void 0;
        function enqueue(value) {
          const node = new Node(value, tail);
          if (tail) {
            tail.next = node;
          }
          if (!head) {
            head = node;
          }
          tail = node;
        }
        function remove(node) {
          if (!node.next) {
            tail = node.prev;
          } else {
            const nextNode = node.next;
            nextNode.prev = node.prev;
          }
          if (!node.prev) {
            head = node.next;
          } else {
            const prevNode = node.prev;
            prevNode.next = node.next;
          }
        }
        function dequeue() {
          const ret = head;
          if (ret) {
            remove(ret);
            delete ret.next;
            delete ret.prev;
            const value = ret.value;
            delete ret.value;
            return value;
          }
          return void 0;
        }
        function isEmpty() {
          return !head;
        }
        return {enqueue, dequeue, isEmpty};
      }
      exports2.linkedList = linkedList;
      function pushableChannel(onIteratorClose) {
        let returnLock = null;
        const queue = linkedList();
        let closed = false;
        let error = null;
        function closeAllPending() {
          if (!queue.isEmpty()) {
            const err = error || new Error("Channel was closed before deliverying the message");
            while (!queue.isEmpty()) {
              const {resolve} = queue.dequeue();
              if (resolve)
                resolve(err);
            }
          }
        }
        function releaseLockIfNeeded() {
          if (returnLock) {
            const originalReturnLock = returnLock;
            returnLock = null;
            originalReturnLock();
          }
        }
        function push(value, resolve) {
          if (closed) {
            resolve(new Error("Channel is closed"));
            return;
          }
          if (error) {
            resolve(error);
            return;
          }
          queue.enqueue({value, resolve});
          releaseLockIfNeeded();
        }
        function failAndClose(errorToThrow) {
          error = errorToThrow;
          close();
          closeAllPending();
        }
        function yieldNextResult() {
          if (error && queue.isEmpty()) {
            throw error;
          }
          if (closed && queue.isEmpty()) {
            return {done: true, value: void 0};
          }
          if (!queue.isEmpty()) {
            const node = queue.dequeue();
            if (node.resolve)
              node.resolve(error || void 0);
            return {
              done: false,
              value: node.value
            };
          }
        }
        function close() {
          if (!closed) {
            closed = true;
            releaseLockIfNeeded();
            onIteratorClose();
          }
        }
        const iterable = {
          async next() {
            while (true) {
              try {
                const result = yieldNextResult();
                if (result) {
                  return result;
                } else {
                  await new Promise((res) => returnLock = res);
                }
              } catch (err) {
                failAndClose(err);
                throw err;
              }
            }
          },
          async return(value) {
            close();
            closeAllPending();
            return {done: true, value};
          },
          async throw(e) {
            if (error) {
              throw error;
            }
            failAndClose(e);
            return {done: true, value: void 0};
          },
          [Symbol.asyncIterator]() {
            return iterable;
          }
        };
        function isClosed() {
          return closed;
        }
        return {iterable, push, close, failAndClose, isClosed, [Symbol.asyncIterator]: () => iterable};
      }
      exports2.pushableChannel = pushableChannel;
      var AsyncQueue = class {
        constructor(requestingNext) {
          this.requestingNext = requestingNext;
          this.values = linkedList();
          this.settlers = linkedList();
          this.closed = false;
          this.error = void 0;
        }
        [Symbol.asyncIterator]() {
          return this;
        }
        enqueue(value) {
          if (this.closed) {
            throw new Error("Channel is closed");
          }
          if (!this.settlers.isEmpty()) {
            if (!this.values.isEmpty()) {
              throw new Error("Illegal internal state");
            }
            const settler = this.settlers.dequeue();
            if (value instanceof Error) {
              settler.reject(value);
            } else {
              settler.resolve({value});
            }
          } else {
            this.values.enqueue({value});
          }
        }
        async next() {
          if (!this.values.isEmpty()) {
            const value = this.values.dequeue();
            return value;
          }
          if (this.error) {
            throw this.error;
          }
          if (this.closed) {
            if (!this.settlers.isEmpty()) {
              throw new Error("Illegal internal state");
            }
            return {done: true, value: void 0};
          }
          return new Promise((resolve, reject) => {
            this.requestingNext(this, "next");
            this.settlers.enqueue({resolve, reject});
          });
        }
        async return(value) {
          this.close(value);
          return {done: true, value};
        }
        async throw(error) {
          this.close(error);
          return {done: true, value: void 0};
        }
        close(error) {
          if (error)
            while (!this.settlers.isEmpty()) {
              this.settlers.dequeue().reject(error);
            }
          else
            while (!this.settlers.isEmpty()) {
              this.settlers.dequeue().resolve({done: true, value: void 0});
            }
          if (error)
            this.error = error;
          if (!this.closed) {
            this.closed = true;
            this.requestingNext(this, "close");
          }
        }
      };
      exports2.AsyncQueue = AsyncQueue;
    }
  });

  // node_modules/@dcl/rpc/dist/stream-protocol.js
  var require_stream_protocol = __commonJS({
    "node_modules/@dcl/rpc/dist/stream-protocol.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.streamFromDispatcher = exports2.sendStreamThroughTransport = void 0;
      var protocol_1 = require_protocol();
      var helpers_1 = require_helpers();
      var push_channel_1 = require_push_channel();
      async function sendStreamThroughTransport(dispatcher, transport, stream, portId, messageNumber) {
        const reusedStreamMessage = protocol_1.StreamMessage.fromJSON({
          closed: false,
          ack: false,
          sequenceId: 0,
          messageIdentifier: (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_STREAM_MESSAGE, messageNumber),
          payload: Uint8Array.of(),
          portId
        });
        let sequenceNumber = 0;
        for await (const elem of stream) {
          sequenceNumber++;
          reusedStreamMessage.sequenceId = sequenceNumber;
          reusedStreamMessage.payload = elem;
          const ret = await dispatcher.sendStreamMessage(reusedStreamMessage);
          if (ret.ack) {
            continue;
          } else if (ret.closed) {
            return;
          }
        }
        transport.sendMessage((0, helpers_1.closeStreamMessage)(messageNumber, sequenceNumber, portId));
      }
      exports2.sendStreamThroughTransport = sendStreamThroughTransport;
      function streamFromDispatcher(dispatcher, portId, messageNumber) {
        let lastReceivedSequenceId = 0;
        let isRemoteClosed = false;
        let wasOpen = false;
        const channel = new push_channel_1.AsyncQueue(sendServerSignals);
        dispatcher.transport.on("close", () => {
          channel.close(new Error("RPC Transport closed"));
        });
        dispatcher.transport.on("error", () => {
          channel.close(new Error("RPC Transport failed"));
        });
        function sendServerSignals(_channel, action) {
          if (action == "close") {
            dispatcher.removeListener(messageNumber);
          }
          if (!isRemoteClosed) {
            if (action == "close") {
              dispatcher.transport.sendMessage((0, helpers_1.closeStreamMessage)(messageNumber, lastReceivedSequenceId, portId));
            } else if (action == "next") {
              wasOpen = true;
              dispatcher.transport.sendMessage((0, helpers_1.streamAckMessage)(messageNumber, lastReceivedSequenceId, portId));
            }
          }
        }
        function processMessage(message) {
          lastReceivedSequenceId = message.sequenceId;
          if (message.closed) {
            isRemoteClosed = true;
            channel.close();
          } else {
            channel.enqueue(message.payload);
          }
        }
        dispatcher.addListener(messageNumber, (reader, messageType, messageNumber2, message) => {
          if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_STREAM_MESSAGE) {
            processMessage(message);
          } else if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_REMOTE_ERROR_RESPONSE) {
            isRemoteClosed = true;
            channel.close(new Error("RemoteError: " + (message.errorMessage || "Unknown remote error")));
          } else {
            channel.close(new Error("RemoteError: Protocol error, unkown message"));
          }
        });
        return {
          generator: channel,
          closeIfNotOpened() {
            if (!wasOpen) {
              channel.close(new Error("ClientStream lost"));
            }
          }
        };
      }
      exports2.streamFromDispatcher = streamFromDispatcher;
    }
  });

  // node_modules/@dcl/rpc/dist/server.js
  var require_server = __commonJS({
    "node_modules/@dcl/rpc/dist/server.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      var __importDefault = exports2 && exports2.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : {"default": mod};
      };
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.createRpcServer = exports2.handleRequest = exports2.sendServerStream = exports2.handleDestroyPort = exports2.handleRequestModule = exports2.handleCreatePort = exports2.createServerPort = void 0;
      var mitt_1 = __importDefault(require_mitt());
      var minimal_1 = require_minimal2();
      var helpers_1 = require_helpers();
      var protocol_1 = require_protocol();
      var message_dispatcher_1 = require_message_dispatcher();
      var stream_protocol_1 = require_stream_protocol();
      var lastPortId = 0;
      var EMPTY_U8A = Uint8Array.from([]);
      var unsafeSyncWriter = new minimal_1.Writer();
      function getServerReadyMessage() {
        unsafeSyncWriter.reset();
        protocol_1.RpcMessageHeader.encode({
          messageIdentifier: (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_SERVER_READY, 0)
        }, unsafeSyncWriter);
        return unsafeSyncWriter.finish();
      }
      var transportStartMessageSerialized = getServerReadyMessage();
      function moduleProcedures(module3) {
        return Array.from(Object.entries(module3)).filter(([name, value]) => typeof value == "function");
      }
      function createServerPort(portId, portName, context) {
        const events = (0, mitt_1.default)();
        const loadedModules = new Map();
        const procedures = new Map();
        const registeredModules = new Map();
        const port = {
          get portId() {
            return portId;
          },
          get portName() {
            return portName;
          },
          ...events,
          registerModule,
          loadModule,
          close,
          callProcedure
        };
        async function close() {
          loadedModules.clear();
          procedures.clear();
          registeredModules.clear();
          events.emit("close", {});
        }
        async function registerModule(moduleName, generator) {
          if (registeredModules.has(moduleName)) {
            throw new Error(`module ${moduleName} is already registered for port ${portName} (${portId}))`);
          }
          registeredModules.set(moduleName, generator);
        }
        async function loadModuleFromGenerator(moduleFuture) {
          const module3 = await moduleFuture;
          const ret = {
            procedures: []
          };
          for (const [procedureName, callable] of moduleProcedures(module3)) {
            const procedureId = procedures.size + 1;
            procedures.set(procedureId, callable);
            ret.procedures.push({
              procedureName,
              callable,
              procedureId
            });
          }
          return ret;
        }
        function loadModule(moduleName) {
          if (loadedModules.has(moduleName)) {
            return loadedModules.get(moduleName);
          }
          const moduleGenerator = registeredModules.get(moduleName);
          if (!moduleGenerator) {
            throw new Error(`Module ${moduleName} is not available for port ${portName} (${portId}))`);
          }
          const moduleFuture = loadModuleFromGenerator(moduleGenerator(port, context));
          loadedModules.set(moduleName, moduleFuture);
          return moduleFuture;
        }
        function callProcedure(procedureId, payload, context2) {
          const procedure = procedures.get(procedureId);
          if (!procedure) {
            throw new Error(`procedureId ${procedureId} is missing in ${portName} (${portId}))`);
          }
          return procedure(payload, context2);
        }
        return port;
      }
      exports2.createServerPort = createServerPort;
      function getPortFromState(portId, transport, state) {
        var _a;
        return (_a = state.portsByTransport.get(transport)) === null || _a === void 0 ? void 0 : _a.get(portId);
      }
      async function handleCreatePort(transport, createPortMessage, messageNumber, options, handler, state, context) {
        lastPortId++;
        const port = createServerPort(lastPortId, createPortMessage.portName, context);
        const byTransport = state.portsByTransport.get(transport) || new Map();
        byTransport.set(port.portId, port);
        state.ports.set(port.portId, port);
        state.portsByTransport.set(transport, byTransport);
        await handler(port, transport, context);
        unsafeSyncWriter.reset();
        protocol_1.CreatePortResponse.encode({
          messageIdentifier: (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_CREATE_PORT_RESPONSE, messageNumber),
          portId: port.portId
        }, unsafeSyncWriter);
        transport.sendMessage(unsafeSyncWriter.finish());
        return port;
      }
      exports2.handleCreatePort = handleCreatePort;
      async function handleRequestModule(transport, requestModule, messageNumber, state) {
        const port = getPortFromState(requestModule.portId, transport, state);
        if (!port) {
          throw new Error(`Cannot find port ${requestModule.portId}`);
        }
        const loadedModule = await port.loadModule(requestModule.moduleName);
        unsafeSyncWriter.reset();
        protocol_1.RequestModuleResponse.encode({
          procedures: loadedModule.procedures,
          messageIdentifier: (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_REQUEST_MODULE_RESPONSE, messageNumber),
          portId: port.portId
        }, unsafeSyncWriter);
        transport.sendMessage(unsafeSyncWriter.finish());
      }
      exports2.handleRequestModule = handleRequestModule;
      async function handleDestroyPort(transport, request, _messageNumber, state) {
        const port = getPortFromState(request.portId, transport, state);
        if (port) {
          port.emit("close", {});
        }
      }
      exports2.handleDestroyPort = handleDestroyPort;
      async function sendServerStream(dispatcher, transport, stream, portId, messageNumber) {
        const reusedStreamMessage = protocol_1.StreamMessage.fromJSON({
          closed: false,
          ack: false,
          sequenceId: 0,
          messageIdentifier: (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_STREAM_MESSAGE, messageNumber),
          payload: EMPTY_U8A,
          portId
        });
        const ret = await dispatcher.sendStreamMessage(reusedStreamMessage);
        if (ret.closed)
          return;
        if (!ret.ack)
          throw new Error("Error in logic, ACK must be true");
        await (0, stream_protocol_1.sendStreamThroughTransport)(dispatcher, transport, stream, portId, messageNumber);
      }
      exports2.sendServerStream = sendServerStream;
      async function handleRequest(request, messageNumber, state, transport, context, dispatcher) {
        const port = getPortFromState(request.portId, transport, state);
        if (!port) {
          unsafeSyncWriter.reset();
          protocol_1.RemoteError.encode({
            messageIdentifier: (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_REMOTE_ERROR_RESPONSE, messageNumber),
            errorCode: 0,
            errorMessage: "invalid portId"
          }, unsafeSyncWriter);
          transport.sendMessage(unsafeSyncWriter.finish());
          return;
        }
        const {clientStream} = request;
        const stream = clientStream ? (0, stream_protocol_1.streamFromDispatcher)(dispatcher, request.portId, request.clientStream) : null;
        const result = request.clientStream ? await port.callProcedure(request.procedureId, stream.generator, context) : await port.callProcedure(request.procedureId, request.payload, context);
        const response = protocol_1.Response.fromJSON({
          messageIdentifier: (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_RESPONSE, messageNumber),
          payload: EMPTY_U8A
        });
        if (result instanceof Uint8Array) {
          response.payload = result;
          unsafeSyncWriter.reset();
          protocol_1.Response.encode(response, unsafeSyncWriter);
          transport.sendMessage(unsafeSyncWriter.finish());
        } else if (result && Symbol.asyncIterator in result) {
          await sendServerStream(dispatcher, transport, result, port.portId, messageNumber);
        } else {
          unsafeSyncWriter.reset();
          protocol_1.Response.encode(response, unsafeSyncWriter);
          transport.sendMessage(unsafeSyncWriter.finish());
        }
        stream === null || stream === void 0 ? void 0 : stream.closeIfNotOpened();
      }
      exports2.handleRequest = handleRequest;
      function createRpcServer(options) {
        const events = (0, mitt_1.default)();
        const state = {
          ports: new Map(),
          portsByTransport: new Map(),
          transports: new Set()
        };
        function removeTransport(transport) {
          const transportPorts = state.portsByTransport.get(transport);
          state.portsByTransport.delete(transport);
          if (transportPorts && transportPorts.size) {
            transportPorts.forEach(($) => $.close());
          }
          if (state.transports.delete(transport)) {
            events.emit("transportClosed", {transport});
          }
        }
        events.on("portClosed", (evt) => {
          const {port, transport} = evt;
          state.ports.delete(port.portId);
          const portsByTransport = state.portsByTransport.get(transport);
          if (portsByTransport) {
            portsByTransport.delete(port.portId);
          }
        });
        function handleTransportError(transport, error) {
          events.emit("transportError", {transport, error});
          transport.close();
          removeTransport(transport);
        }
        let handler;
        async function handleMessage(messageType, parsedMessage, messageNumber, transport, context, dispatcher) {
          if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_REQUEST) {
            await handleRequest(parsedMessage, messageNumber, state, transport, context, dispatcher);
          } else if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_REQUEST_MODULE) {
            await handleRequestModule(transport, parsedMessage, messageNumber, state);
          } else if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_CREATE_PORT) {
            const port = await handleCreatePort(transport, parsedMessage, messageNumber, options, handler, state, context);
            port.on("close", () => events.emit("portClosed", {port, transport}));
          } else if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_DESTROY_PORT) {
            await handleDestroyPort(transport, parsedMessage, messageNumber, state);
          } else if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_STREAM_ACK || messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_STREAM_MESSAGE) {
          } else {
            transport.emit("error", new Error(`Unknown message from client ${JSON.stringify([messageType, parsedMessage, messageNumber])}`));
          }
        }
        return {
          ...events,
          setHandler(_handler) {
            handler = _handler;
          },
          attachTransport(newTransport, context) {
            if (!handler) {
              throw new Error("A handler was not set for this RpcServer");
            }
            state.transports.add(newTransport);
            const dispatcher = (0, message_dispatcher_1.messageDispatcher)(newTransport);
            dispatcher.setGlobalHandler((messageType, message, messageNumber) => {
              handleMessage(messageType, message, messageNumber, newTransport, context, dispatcher).catch((err) => {
                var _a;
                (_a = options.logger) === null || _a === void 0 ? void 0 : _a.error("Error handling remote request", {
                  message: err.message,
                  name: err.name,
                  stack: err.stack
                });
                unsafeSyncWriter.reset();
                protocol_1.RemoteError.encode({
                  messageIdentifier: (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_REMOTE_ERROR_RESPONSE, messageNumber),
                  errorMessage: err.message || "Error processing the request",
                  errorCode: 0
                }, unsafeSyncWriter);
                newTransport.sendMessage(unsafeSyncWriter.finish());
              });
            });
            newTransport.on("close", () => {
              removeTransport(newTransport);
            });
            newTransport.on("error", (error) => {
              var _a;
              (_a = options.logger) === null || _a === void 0 ? void 0 : _a.error("Error in transport", {
                message: error.message,
                name: error.name,
                stack: error.stack
              });
              handleTransportError(newTransport, error);
            });
            newTransport.sendMessage(transportStartMessageSerialized);
          }
        };
      }
      exports2.createRpcServer = createRpcServer;
    }
  });

  // node_modules/@dcl/rpc/dist/client-request-dispatcher.js
  var require_client_request_dispatcher = __commonJS({
    "node_modules/@dcl/rpc/dist/client-request-dispatcher.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.createClientRequestDispatcher = void 0;
      var minimal_1 = require_minimal2();
      var globalMessageNumber = 0;
      function createClientRequestDispatcher(dispatcher) {
        function nextMessageNumber() {
          const messageNumber = ++globalMessageNumber;
          if (globalMessageNumber > 16777216)
            globalMessageNumber = 0;
          return messageNumber;
        }
        return {
          dispatcher,
          async request(cb) {
            const messageNumber = nextMessageNumber();
            const bb = new minimal_1.Writer();
            cb(bb, messageNumber);
            dispatcher.transport.sendMessage(bb.finish());
            const {reader} = await dispatcher.addOneTimeListener(messageNumber);
            return reader;
          },
          nextMessageNumber
        };
      }
      exports2.createClientRequestDispatcher = createClientRequestDispatcher;
    }
  });

  // node_modules/@dcl/rpc/dist/client.js
  var require_client = __commonJS({
    "node_modules/@dcl/rpc/dist/client.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      var __importDefault = exports2 && exports2.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : {"default": mod};
      };
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.createRpcClient = exports2.createPort = void 0;
      var mitt_1 = __importDefault(require_mitt());
      var minimal_1 = require_minimal2();
      var protocol_1 = require_protocol();
      var message_dispatcher_1 = require_message_dispatcher();
      var helpers_1 = require_helpers();
      var client_request_dispatcher_1 = require_client_request_dispatcher();
      var stream_protocol_1 = require_stream_protocol();
      var EMPTY_U8 = new Uint8Array(0);
      function createPort(portId, portName, requestDispatcher) {
        const events = (0, mitt_1.default)();
        let state = "open";
        events.on("close", () => {
          state = "closed";
        });
        return {
          ...events,
          portName,
          portId,
          get state() {
            return state;
          },
          close() {
            const bb = new minimal_1.Writer();
            protocol_1.DestroyPort.encode({
              messageIdentifier: (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_DESTROY_PORT, 0),
              portId
            }, bb);
            requestDispatcher.dispatcher.transport.sendMessage(bb.finish());
            events.emit("close", {});
          },
          async loadModule(moduleName) {
            const ret = await requestDispatcher.request((bb, messageNumber) => {
              protocol_1.RequestModule.encode({
                messageIdentifier: (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_REQUEST_MODULE, messageNumber),
                moduleName,
                portId
              }, bb);
            });
            const parsedMessage = (0, helpers_1.parseProtocolMessage)(ret);
            if (parsedMessage) {
              const [messageType, message] = parsedMessage;
              if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_REQUEST_MODULE_RESPONSE) {
                const ret2 = {};
                for (let procedure of message.procedures) {
                  ret2[procedure.procedureName] = createProcedure(portId, procedure.procedureId, requestDispatcher);
                }
                return ret2;
              } else if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_REMOTE_ERROR_RESPONSE) {
                throwIfRemoteError(message);
              }
            }
            throw new Error("Unknown response received from server.");
          }
        };
      }
      exports2.createPort = createPort;
      function throwIfRemoteError(parsedMessage) {
        throw new Error("RemoteError: " + parsedMessage.errorMessage);
      }
      function createProcedure(portId, procedureId, requestDispatcher) {
        const callProcedurePacket = {
          portId,
          messageIdentifier: 0,
          payload: EMPTY_U8,
          procedureId,
          clientStream: 0
        };
        return async function(data) {
          if (data) {
            if (Symbol.asyncIterator in data) {
              const messageNumber = requestDispatcher.nextMessageNumber();
              callProcedurePacket.clientStream = messageNumber;
              callProcedurePacket.payload = EMPTY_U8;
              requestDispatcher.dispatcher.addOneTimeListener(messageNumber).then(($) => {
                const message = $.message;
                if (message.closed)
                  return;
                if (!message.ack)
                  throw new Error("Error in logic, ACK must be true");
                (0, stream_protocol_1.sendStreamThroughTransport)(requestDispatcher.dispatcher, requestDispatcher.dispatcher.transport, data, portId, messageNumber);
              }).catch((error) => {
                requestDispatcher.dispatcher.transport.emit("error", error);
              });
            } else {
              callProcedurePacket.payload = data;
            }
          } else {
            callProcedurePacket.payload = EMPTY_U8;
          }
          const ret = (0, helpers_1.parseProtocolMessage)(await requestDispatcher.request((bb, messageNumber) => {
            callProcedurePacket.messageIdentifier = (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_REQUEST, messageNumber);
            protocol_1.Request.encode(callProcedurePacket, bb);
          }));
          if (ret) {
            const [messageType, message, messageNumber] = ret;
            if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_RESPONSE) {
              const u8 = message.payload;
              if (u8.length) {
                return u8;
              } else {
                return void 0;
              }
            } else if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_STREAM_MESSAGE) {
              const openStreamMessage = message;
              const {generator} = (0, stream_protocol_1.streamFromDispatcher)(requestDispatcher.dispatcher, openStreamMessage.portId, messageNumber);
              return generator;
            } else if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_REMOTE_ERROR_RESPONSE) {
              throwIfRemoteError(message);
            }
          }
        };
      }
      async function createRpcClient2(transport) {
        const clientPortByName = new Map();
        const dispatcher = (0, message_dispatcher_1.messageDispatcher)(transport);
        const requestDispatcher = (0, client_request_dispatcher_1.createClientRequestDispatcher)(dispatcher);
        async function internalCreatePort(portName) {
          const ret = await requestDispatcher.request((bb, messageNumber) => {
            protocol_1.CreatePort.encode({
              messageIdentifier: (0, helpers_1.calculateMessageIdentifier)(protocol_1.RpcMessageTypes.RpcMessageTypes_CREATE_PORT, messageNumber),
              portName
            }, bb);
          });
          const parsedMessage = (0, helpers_1.parseProtocolMessage)(ret);
          if (parsedMessage) {
            const [messageType, message] = parsedMessage;
            if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_CREATE_PORT_RESPONSE) {
              const portId = message.portId;
              return createPort(portId, portName, requestDispatcher);
            } else if (messageType == protocol_1.RpcMessageTypes.RpcMessageTypes_REMOTE_ERROR_RESPONSE) {
              throwIfRemoteError(message);
            }
          }
          throw new Error("Unknown response received from server.");
        }
        await new Promise((resolve, reject) => {
          transport.on("connect", resolve);
          transport.on("error", reject);
        });
        return {
          async createPort(portName) {
            if (clientPortByName.has(portName)) {
              return clientPortByName.get(portName);
            }
            const portFuture = internalCreatePort(portName);
            clientPortByName.set(portName, portFuture);
            const port = await portFuture;
            transport.on("close", () => {
              port.close();
            });
            port.on("close", () => {
              if (clientPortByName.get(portName) === portFuture) {
                clientPortByName.delete(portName);
              }
            });
            return port;
          }
        };
      }
      exports2.createRpcClient = createRpcClient2;
    }
  });

  // node_modules/@dcl/rpc/dist/index.js
  var require_dist = __commonJS({
    "node_modules/@dcl/rpc/dist/index.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {enumerable: true, get: function() {
            return m[k];
          }};
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
            __createBinding(exports3, m, p);
      };
      Object.defineProperty(exports2, "__esModule", {value: true});
      __exportStar(require_types(), exports2);
      __exportStar(require_server(), exports2);
      __exportStar(require_client(), exports2);
    }
  });

  // node_modules/@dcl/rpc/dist/transports/WebWorker.js
  var require_WebWorker = __commonJS({
    "node_modules/@dcl/rpc/dist/transports/WebWorker.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      var __importDefault = exports2 && exports2.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : {"default": mod};
      };
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.WebWorkerTransport = void 0;
      var mitt_1 = __importDefault(require_mitt());
      function WebWorkerTransport2(worker) {
        const events = (0, mitt_1.default)();
        worker.addEventListener("message", () => events.emit("connect", {}), {once: true});
        worker.addEventListener("error", (err) => {
          if (err.error) {
            events.emit("error", err.error);
          } else if (err.message) {
            events.emit("error", Object.assign(new Error(err.message), {
              colno: err.colno,
              error: err.error,
              filename: err.filename,
              lineno: err.lineno,
              message: err.message
            }));
          }
        });
        worker.addEventListener("message", (message) => {
          if (message.data instanceof ArrayBuffer || message.data instanceof Uint8Array) {
            events.emit("message", message.data);
          } else {
            throw new Error(`WebWorkerTransport: Received unknown type of message, expecting Uint8Array`);
          }
        });
        const api = {
          ...events,
          sendMessage(message) {
            if (message instanceof ArrayBuffer || message instanceof Uint8Array) {
              worker.postMessage(message);
            } else {
              throw new Error(`WebWorkerTransport: Received unknown type of message, expecting Uint8Array`);
            }
          },
          close() {
            if ("terminate" in worker) {
              ;
              worker.terminate();
            } else if ("close" in worker) {
              ;
              worker.close();
            }
            events.emit("close", {});
          }
        };
        return api;
      }
      exports2.WebWorkerTransport = WebWorkerTransport2;
    }
  });

  // node_modules/@dcl/rpc/dist/codegen.js
  var require_codegen = __commonJS({
    "node_modules/@dcl/rpc/dist/codegen.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.registerService = exports2.loadService = exports2.serverProcedureBidirectionalStream = exports2.serverProcedureServerStream = exports2.serverProcedureClientStream = exports2.serverProcedureUnary = exports2.clientProcedureBidirectionalStream = exports2.clientProcedureServerStream = exports2.clientProcedureClientStream = exports2.clientProcedureUnary = void 0;
      var EMPTY_U8ARRAY = new Uint8Array();
      function clientProcedureUnary(port, method) {
        const fn = async (arg) => {
          const remoteModule = await port;
          if (!(method.name in remoteModule))
            throw new Error("Method " + method.name + " not implemented in server port");
          const result = await remoteModule[method.name](method.requestType.encode(arg).finish());
          return method.responseType.decode(result !== null && result !== void 0 ? result : EMPTY_U8ARRAY);
        };
        return fn;
      }
      exports2.clientProcedureUnary = clientProcedureUnary;
      async function* requestToBinaryGenerator(requests, method) {
        for await (const request of requests) {
          const arg = method.requestType.encode(request);
          yield arg.finish();
        }
      }
      function clientProcedureClientStream(port, method) {
        const fn = async (arg) => {
          const remoteModule = await port;
          if (!(method.name in remoteModule))
            throw new Error("Method " + method.name + " not implemented in server port");
          const result = await remoteModule[method.name](requestToBinaryGenerator(arg, method));
          return method.responseType.decode(result !== null && result !== void 0 ? result : EMPTY_U8ARRAY);
        };
        return fn;
      }
      exports2.clientProcedureClientStream = clientProcedureClientStream;
      function clientProcedureServerStream(port, method) {
        const fn = function(arg) {
          let _generator = void 0;
          async function lazyGenerator() {
            const remoteModule = await port;
            if (!(method.name in remoteModule))
              throw new Error("Method " + method.name + " not implemented in server port");
            return (await remoteModule[method.name](method.requestType.encode(arg).finish()))[Symbol.asyncIterator]();
          }
          function getGenerator() {
            if (!_generator) {
              _generator = lazyGenerator();
            }
            return _generator;
          }
          const ret = {
            [Symbol.asyncIterator]: () => ret,
            async next() {
              var _a;
              const iter = await (await getGenerator()).next();
              return {value: method.responseType.decode((_a = iter.value) !== null && _a !== void 0 ? _a : EMPTY_U8ARRAY), done: iter.done};
            },
            async return(value) {
              const iter = await (await getGenerator()).return(value);
              return {value: iter.value ? method.responseType.decode(iter.value) : iter.value, done: iter.done};
            },
            async throw(value) {
              const iter = await (await getGenerator()).throw(value);
              return {value: iter.value ? method.responseType.decode(iter.value) : iter.value, done: iter.done};
            }
          };
          return ret;
        };
        return fn;
      }
      exports2.clientProcedureServerStream = clientProcedureServerStream;
      function clientProcedureBidirectionalStream(port, method) {
        const fn = function(arg) {
          let _generator = void 0;
          async function lazyGenerator() {
            const remoteModule = await port;
            if (!(method.name in remoteModule))
              throw new Error("Method " + method.name + " not implemented in server port");
            return (await remoteModule[method.name](requestToBinaryGenerator(arg, method)))[Symbol.asyncIterator]();
          }
          function getGenerator() {
            if (!_generator) {
              _generator = lazyGenerator();
            }
            return _generator;
          }
          const ret = {
            [Symbol.asyncIterator]: () => ret,
            async next() {
              var _a;
              const iter = await (await getGenerator()).next();
              return {value: method.responseType.decode((_a = iter.value) !== null && _a !== void 0 ? _a : EMPTY_U8ARRAY), done: iter.done};
            },
            async return(value) {
              const iter = await (await getGenerator()).return(value);
              return {value: iter.value ? method.responseType.decode(iter.value) : iter.value, done: iter.done};
            },
            async throw(value) {
              const iter = await (await getGenerator()).throw(value);
              return {value: iter.value ? method.responseType.decode(iter.value) : iter.value, done: iter.done};
            }
          };
          return ret;
        };
        return fn;
      }
      exports2.clientProcedureBidirectionalStream = clientProcedureBidirectionalStream;
      function serverProcedureUnary(fn, method) {
        return async function(argBinary, context) {
          const arg = method.requestType.decode(argBinary);
          const result = await fn(arg, context);
          if (!result)
            throw new Error("Empty or null responses are not allowed. Procedure: " + method.name);
          return method.responseType.encode(result).finish();
        };
      }
      exports2.serverProcedureUnary = serverProcedureUnary;
      async function* binaryToRequestGenerator(argBinaryGenerator, method) {
        for await (const argBinary of argBinaryGenerator) {
          const arg = method.requestType.decode(argBinary);
          yield arg;
        }
      }
      function serverProcedureClientStream(fn, method) {
        return async function(argBinaryGenerator, context) {
          const result = await fn(binaryToRequestGenerator(argBinaryGenerator, method), context);
          if (!result)
            throw new Error("Empty or null responses are not allowed. Procedure: " + method.name);
          return method.responseType.encode(result).finish();
        };
      }
      exports2.serverProcedureClientStream = serverProcedureClientStream;
      function serverProcedureServerStream(fn, method) {
        return function(argBinary, context) {
          let _generator = void 0;
          const arg = method.requestType.decode(argBinary);
          async function lazyGenerator() {
            const result = await fn(arg, context);
            if (!result)
              throw new Error("Empty or null responses are not allowed. Procedure: " + method.name);
            return result[Symbol.asyncIterator]();
          }
          function getGenerator() {
            if (!_generator) {
              _generator = lazyGenerator();
            }
            return _generator;
          }
          const ret = {
            [Symbol.asyncIterator]: () => ret,
            async next() {
              const iter = await (await getGenerator()).next();
              return {value: iter.value ? method.responseType.encode(iter.value).finish() : iter.value, done: iter.done};
            },
            async return(value) {
              const iter = await (await getGenerator()).return(value);
              return {value: iter.value ? method.responseType.encode(iter.value).finish() : iter.value, done: iter.done};
            },
            async throw(value) {
              const iter = await (await getGenerator()).throw(value);
              return {value: iter.value ? method.responseType.encode(iter.value).finish() : iter.value, done: iter.done};
            }
          };
          return ret;
        };
      }
      exports2.serverProcedureServerStream = serverProcedureServerStream;
      function serverProcedureBidirectionalStream(fn, method) {
        return function(argBinaryGenerator, context) {
          let _generator = void 0;
          async function lazyGenerator() {
            const result = await fn(binaryToRequestGenerator(argBinaryGenerator, method), context);
            if (!result)
              throw new Error("Empty or null responses are not allowed. Procedure: " + method.name);
            return result[Symbol.asyncIterator]();
          }
          function getGenerator() {
            if (!_generator) {
              _generator = lazyGenerator();
            }
            return _generator;
          }
          const ret = {
            [Symbol.asyncIterator]: () => ret,
            async next() {
              const iter = await (await getGenerator()).next();
              return {value: iter.value ? method.responseType.encode(iter.value).finish() : iter.value, done: iter.done};
            },
            async return(value) {
              const iter = await (await getGenerator()).return(value);
              return {value: iter.value ? method.responseType.encode(iter.value).finish() : iter.value, done: iter.done};
            },
            async throw(value) {
              const iter = await (await getGenerator()).throw(value);
              return {value: iter.value ? method.responseType.encode(iter.value).finish() : iter.value, done: iter.done};
            }
          };
          return ret;
        };
      }
      exports2.serverProcedureBidirectionalStream = serverProcedureBidirectionalStream;
      function loadService17(port, service) {
        const portFuture = port.loadModule(service.name);
        const ret = {};
        for (const [key, def] of Object.entries(service.methods)) {
          if (def.responseStream && def.requestStream) {
            ret[key] = clientProcedureBidirectionalStream(portFuture, def);
          } else if (def.responseStream) {
            ret[key] = clientProcedureServerStream(portFuture, def);
          } else if (def.requestStream) {
            ret[key] = clientProcedureClientStream(portFuture, def);
          } else {
            ret[key] = clientProcedureUnary(portFuture, def);
          }
        }
        return ret;
      }
      exports2.loadService = loadService17;
      function registerService(port, service, moduleInitializator) {
        port.registerModule(service.name, async (port2, context) => {
          const mod = await moduleInitializator(port2, context);
          const ret = {};
          for (const [key, def] of Object.entries(service.methods)) {
            if (def.responseStream && def.requestStream) {
              ret[def.name] = serverProcedureBidirectionalStream(mod[key].bind(mod), def);
            } else if (def.responseStream) {
              ret[def.name] = serverProcedureServerStream(mod[key].bind(mod), def);
            } else if (def.requestStream) {
              ret[def.name] = serverProcedureClientStream(mod[key].bind(mod), def);
            } else {
              ret[def.name] = serverProcedureUnary(mod[key].bind(mod), def);
            }
          }
          return ret;
        });
      }
      exports2.registerService = registerService;
    }
  });

  // node_modules/@dcl/ecs-math/dist/types.js
  var require_types2 = __commonJS({
    "node_modules/@dcl/ecs-math/dist/types.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.RAD2DEG = exports2.DEG2RAD = exports2.Epsilon = exports2.ToLinearSpace = exports2.ToGammaSpace = exports2.Space = exports2.Orientation = void 0;
      var Orientation;
      (function(Orientation2) {
        Orientation2[Orientation2["CW"] = 0] = "CW";
        Orientation2[Orientation2["CCW"] = 1] = "CCW";
      })(Orientation = exports2.Orientation || (exports2.Orientation = {}));
      var Space;
      (function(Space2) {
        Space2[Space2["LOCAL"] = 0] = "LOCAL";
        Space2[Space2["WORLD"] = 1] = "WORLD";
        Space2[Space2["BONE"] = 2] = "BONE";
      })(Space = exports2.Space || (exports2.Space = {}));
      exports2.ToGammaSpace = 1 / 2.2;
      exports2.ToLinearSpace = 2.2;
      exports2.Epsilon = 1e-6;
      exports2.DEG2RAD = Math.PI / 180;
      exports2.RAD2DEG = 360 / (Math.PI * 2);
    }
  });

  // node_modules/@dcl/ecs-math/dist/utils.js
  var require_utils = __commonJS({
    "node_modules/@dcl/ecs-math/dist/utils.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.buildArray = void 0;
      function buildArray(size, itemBuilder) {
        const a = [];
        for (let i = 0; i < size; ++i) {
          a.push(itemBuilder());
        }
        return a;
      }
      exports2.buildArray = buildArray;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Scalar.js
  var require_Scalar = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Scalar.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Scalar = void 0;
      var Scalar = class {
        static WithinEpsilon(a, b, epsilon = 1401298e-51) {
          const num = a - b;
          return -epsilon <= num && num <= epsilon;
        }
        static ToHex(i) {
          const str = i.toString(16);
          if (i <= 15) {
            return ("0" + str).toUpperCase();
          }
          return str.toUpperCase();
        }
        static Sign(value) {
          const _value = +value;
          if (_value === 0 || isNaN(_value)) {
            return _value;
          }
          return _value > 0 ? 1 : -1;
        }
        static Clamp(value, min = 0, max = 1) {
          return Math.min(max, Math.max(min, value));
        }
        static Log2(value) {
          return Math.log(value) * Math.LOG2E;
        }
        static Repeat(value, length) {
          return value - Math.floor(value / length) * length;
        }
        static Normalize(value, min, max) {
          return (value - min) / (max - min);
        }
        static Denormalize(normalized, min, max) {
          return normalized * (max - min) + min;
        }
        static DeltaAngle(current, target) {
          let num = Scalar.Repeat(target - current, 360);
          if (num > 180) {
            num -= 360;
          }
          return num;
        }
        static PingPong(tx, length) {
          const t = Scalar.Repeat(tx, length * 2);
          return length - Math.abs(t - length);
        }
        static SmoothStep(from, to, tx) {
          let t = Scalar.Clamp(tx);
          t = -2 * t * t * t + 3 * t * t;
          return to * t + from * (1 - t);
        }
        static MoveTowards(current, target, maxDelta) {
          let result = 0;
          if (Math.abs(target - current) <= maxDelta) {
            result = target;
          } else {
            result = current + Scalar.Sign(target - current) * maxDelta;
          }
          return result;
        }
        static MoveTowardsAngle(current, target, maxDelta) {
          const num = Scalar.DeltaAngle(current, target);
          let result = 0;
          if (-maxDelta < num && num < maxDelta) {
            result = target;
          } else {
            result = Scalar.MoveTowards(current, current + num, maxDelta);
          }
          return result;
        }
        static Lerp(start, end, amount) {
          return start + (end - start) * amount;
        }
        static LerpAngle(start, end, amount) {
          let num = Scalar.Repeat(end - start, 360);
          if (num > 180) {
            num -= 360;
          }
          return start + num * Scalar.Clamp(amount);
        }
        static InverseLerp(a, b, value) {
          let result = 0;
          if (a !== b) {
            result = Scalar.Clamp((value - a) / (b - a));
          } else {
            result = 0;
          }
          return result;
        }
        static Hermite(value1, tangent1, value2, tangent2, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const part1 = 2 * cubed - 3 * squared + 1;
          const part2 = -2 * cubed + 3 * squared;
          const part3 = cubed - 2 * squared + amount;
          const part4 = cubed - squared;
          return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;
        }
        static RandomRange(min, max) {
          if (min === max) {
            return min;
          }
          return Math.random() * (max - min) + min;
        }
        static RangeToPercent(num, min, max) {
          return (num - min) / (max - min);
        }
        static PercentToRange(percent, min, max) {
          return (max - min) * percent + min;
        }
        static NormalizeRadians(angle) {
          return angle - Scalar.TwoPi * Math.floor((angle + Math.PI) / Scalar.TwoPi);
        }
      };
      exports2.Scalar = Scalar;
      Scalar.TwoPi = Math.PI * 2;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Vector4.js
  var require_Vector4 = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Vector4.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Vector4 = void 0;
      var types_1 = require_types2();
      var Scalar_1 = require_Scalar();
      var Vector3_1 = require_Vector3();
      var Vector4 = class {
        constructor(x, y, z, w) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
        }
        static Add(vector1, vector2) {
          return new Vector4(vector1.x, vector1.y, vector1.z, vector1.w).addInPlace(vector2);
        }
        static FromArray(array, offset = 0) {
          return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);
        }
        static FromArrayToRef(array, offset, result) {
          result.x = array[offset];
          result.y = array[offset + 1];
          result.z = array[offset + 2];
          result.w = array[offset + 3];
        }
        static FromFloatArrayToRef(array, offset, result) {
          Vector4.FromArrayToRef(array, offset, result);
        }
        static FromFloatsToRef(x, y, z, w, result) {
          result.x = x;
          result.y = y;
          result.z = z;
          result.w = w;
        }
        static Zero() {
          return new Vector4(0, 0, 0, 0);
        }
        static One() {
          return new Vector4(1, 1, 1, 1);
        }
        static Normalize(vector) {
          const result = Vector4.Zero();
          Vector4.NormalizeToRef(vector, result);
          return result;
        }
        static NormalizeToRef(vector, result) {
          result.copyFrom(vector);
          result.normalize();
        }
        static Minimize(left, right) {
          const min = new Vector4(left.x, left.y, left.z, left.w);
          min.minimizeInPlace(right);
          return min;
        }
        static Maximize(left, right) {
          const max = new Vector4(left.x, left.y, left.z, left.w);
          max.maximizeInPlace(right);
          return max;
        }
        static Distance(value1, value2) {
          return Math.sqrt(Vector4.DistanceSquared(value1, value2));
        }
        static DistanceSquared(value1, value2) {
          const x = value1.x - value2.x;
          const y = value1.y - value2.y;
          const z = value1.z - value2.z;
          const w = value1.w - value2.w;
          return x * x + y * y + z * z + w * w;
        }
        static Center(value1, value2) {
          const center = Vector4.Add(value1, value2);
          center.scaleInPlace(0.5);
          return center;
        }
        static TransformNormal(vector, transformation) {
          const result = Vector4.Zero();
          Vector4.TransformNormalToRef(vector, transformation, result);
          return result;
        }
        static TransformNormalToRef(vector, transformation, result) {
          const m = transformation.m;
          const x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];
          const y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];
          const z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];
          result.x = x;
          result.y = y;
          result.z = z;
          result.w = vector.w;
        }
        static TransformNormalFromFloatsToRef(x, y, z, w, transformation, result) {
          const m = transformation.m;
          result.x = x * m[0] + y * m[4] + z * m[8];
          result.y = x * m[1] + y * m[5] + z * m[9];
          result.z = x * m[2] + y * m[6] + z * m[10];
          result.w = w;
        }
        toString() {
          return "{X: " + this.x + " Y:" + this.y + " Z:" + this.z + " W:" + this.w + "}";
        }
        getClassName() {
          return "Vector4";
        }
        getHashCode() {
          let hash = this.x || 0;
          hash = hash * 397 ^ (this.y || 0);
          hash = hash * 397 ^ (this.z || 0);
          hash = hash * 397 ^ (this.w || 0);
          return hash;
        }
        asArray() {
          const result = new Array();
          this.toArray(result, 0);
          return result;
        }
        toArray(array, index = 0) {
          array[index] = this.x;
          array[index + 1] = this.y;
          array[index + 2] = this.z;
          array[index + 3] = this.w;
          return this;
        }
        addInPlace(otherVector) {
          this.x += otherVector.x;
          this.y += otherVector.y;
          this.z += otherVector.z;
          this.w += otherVector.w;
          return this;
        }
        add(otherVector) {
          return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);
        }
        addToRef(otherVector, result) {
          result.x = this.x + otherVector.x;
          result.y = this.y + otherVector.y;
          result.z = this.z + otherVector.z;
          result.w = this.w + otherVector.w;
          return this;
        }
        subtractInPlace(otherVector) {
          this.x -= otherVector.x;
          this.y -= otherVector.y;
          this.z -= otherVector.z;
          this.w -= otherVector.w;
          return this;
        }
        subtract(otherVector) {
          return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);
        }
        subtractToRef(otherVector, result) {
          result.x = this.x - otherVector.x;
          result.y = this.y - otherVector.y;
          result.z = this.z - otherVector.z;
          result.w = this.w - otherVector.w;
          return this;
        }
        subtractFromFloats(x, y, z, w) {
          return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);
        }
        subtractFromFloatsToRef(x, y, z, w, result) {
          result.x = this.x - x;
          result.y = this.y - y;
          result.z = this.z - z;
          result.w = this.w - w;
          return this;
        }
        negate() {
          return new Vector4(-this.x, -this.y, -this.z, -this.w);
        }
        scaleInPlace(scale) {
          this.x *= scale;
          this.y *= scale;
          this.z *= scale;
          this.w *= scale;
          return this;
        }
        scale(scale) {
          return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);
        }
        scaleToRef(scale, result) {
          result.x = this.x * scale;
          result.y = this.y * scale;
          result.z = this.z * scale;
          result.w = this.w * scale;
          return this;
        }
        scaleAndAddToRef(scale, result) {
          result.x += this.x * scale;
          result.y += this.y * scale;
          result.z += this.z * scale;
          result.w += this.w * scale;
          return this;
        }
        equals(otherVector) {
          return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z && this.w === otherVector.w;
        }
        equalsWithEpsilon(otherVector, epsilon = types_1.Epsilon) {
          return otherVector && Scalar_1.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar_1.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) && Scalar_1.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) && Scalar_1.Scalar.WithinEpsilon(this.w, otherVector.w, epsilon);
        }
        equalsToFloats(x, y, z, w) {
          return this.x === x && this.y === y && this.z === z && this.w === w;
        }
        multiplyInPlace(otherVector) {
          this.x *= otherVector.x;
          this.y *= otherVector.y;
          this.z *= otherVector.z;
          this.w *= otherVector.w;
          return this;
        }
        multiply(otherVector) {
          return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);
        }
        multiplyToRef(otherVector, result) {
          result.x = this.x * otherVector.x;
          result.y = this.y * otherVector.y;
          result.z = this.z * otherVector.z;
          result.w = this.w * otherVector.w;
          return this;
        }
        multiplyByFloats(x, y, z, w) {
          return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);
        }
        divide(otherVector) {
          return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);
        }
        divideToRef(otherVector, result) {
          result.x = this.x / otherVector.x;
          result.y = this.y / otherVector.y;
          result.z = this.z / otherVector.z;
          result.w = this.w / otherVector.w;
          return this;
        }
        divideInPlace(otherVector) {
          return this.divideToRef(otherVector, this);
        }
        minimizeInPlace(other) {
          if (other.x < this.x) {
            this.x = other.x;
          }
          if (other.y < this.y) {
            this.y = other.y;
          }
          if (other.z < this.z) {
            this.z = other.z;
          }
          if (other.w < this.w) {
            this.w = other.w;
          }
          return this;
        }
        maximizeInPlace(other) {
          if (other.x > this.x) {
            this.x = other.x;
          }
          if (other.y > this.y) {
            this.y = other.y;
          }
          if (other.z > this.z) {
            this.z = other.z;
          }
          if (other.w > this.w) {
            this.w = other.w;
          }
          return this;
        }
        floor() {
          return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));
        }
        fract() {
          return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }
        lengthSquared() {
          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }
        normalize() {
          const len = this.length();
          if (len === 0) {
            return this;
          }
          return this.scaleInPlace(1 / len);
        }
        toVector3() {
          return new Vector3_1.Vector3(this.x, this.y, this.z);
        }
        clone() {
          return new Vector4(this.x, this.y, this.z, this.w);
        }
        copyFrom(source) {
          this.x = source.x;
          this.y = source.y;
          this.z = source.z;
          this.w = source.w;
          return this;
        }
        copyFromFloats(x, y, z, w) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
          return this;
        }
        set(x, y, z, w) {
          return this.copyFromFloats(x, y, z, w);
        }
        setAll(v) {
          this.x = this.y = this.z = this.w = v;
          return this;
        }
      };
      exports2.Vector4 = Vector4;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Matrix.js
  var require_Matrix = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Matrix.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Matrix = void 0;
      var Vector3_1 = require_Vector3();
      var Quaternion_1 = require_Quaternion();
      var preallocatedVariables_1 = require_preallocatedVariables();
      var Vector4_1 = require_Vector4();
      var Matrix = class {
        constructor() {
          this._isIdentity = false;
          this._isIdentityDirty = true;
          this._isIdentity3x2 = true;
          this._isIdentity3x2Dirty = true;
          this._m = [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ];
          this._updateIdentityStatus(false);
        }
        get m() {
          return this._m;
        }
        static get IdentityReadOnly() {
          return Matrix._identityReadOnly;
        }
        static FromArray(array, offset = 0) {
          const result = new Matrix();
          Matrix.FromArrayToRef(array, offset, result);
          return result;
        }
        static FromArrayToRef(array, offset, result) {
          for (let index = 0; index < 16; index++) {
            result._m[index] = array[index + offset];
          }
          result._markAsUpdated();
        }
        static FromFloatArrayToRefScaled(array, offset, scale, result) {
          for (let index = 0; index < 16; index++) {
            result._m[index] = array[index + offset] * scale;
          }
          result._markAsUpdated();
        }
        static FromValuesToRef(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {
          const m = result._m;
          m[0] = initialM11;
          m[1] = initialM12;
          m[2] = initialM13;
          m[3] = initialM14;
          m[4] = initialM21;
          m[5] = initialM22;
          m[6] = initialM23;
          m[7] = initialM24;
          m[8] = initialM31;
          m[9] = initialM32;
          m[10] = initialM33;
          m[11] = initialM34;
          m[12] = initialM41;
          m[13] = initialM42;
          m[14] = initialM43;
          m[15] = initialM44;
          result._markAsUpdated();
        }
        static FromValues(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {
          const result = new Matrix();
          const m = result._m;
          m[0] = initialM11;
          m[1] = initialM12;
          m[2] = initialM13;
          m[3] = initialM14;
          m[4] = initialM21;
          m[5] = initialM22;
          m[6] = initialM23;
          m[7] = initialM24;
          m[8] = initialM31;
          m[9] = initialM32;
          m[10] = initialM33;
          m[11] = initialM34;
          m[12] = initialM41;
          m[13] = initialM42;
          m[14] = initialM43;
          m[15] = initialM44;
          result._markAsUpdated();
          return result;
        }
        static Compose(scale, rotation, translation) {
          const result = new Matrix();
          Matrix.ComposeToRef(scale, rotation, translation, result);
          return result;
        }
        static ComposeToRef(scale, rotation, translation, result) {
          Matrix.ScalingToRef(scale.x, scale.y, scale.z, preallocatedVariables_1.MathTmp.Matrix[1]);
          rotation.toRotationMatrix(preallocatedVariables_1.MathTmp.Matrix[0]);
          preallocatedVariables_1.MathTmp.Matrix[1].multiplyToRef(preallocatedVariables_1.MathTmp.Matrix[0], result);
          result.setTranslation(translation);
        }
        static Identity() {
          const identity = Matrix.FromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
          identity._updateIdentityStatus(true);
          return identity;
        }
        static IdentityToRef(result) {
          Matrix.FromValuesToRef(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, result);
          result._updateIdentityStatus(true);
        }
        static Zero() {
          const zero = Matrix.FromValues(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          zero._updateIdentityStatus(false);
          return zero;
        }
        static RotationX(angle) {
          const result = new Matrix();
          Matrix.RotationXToRef(angle, result);
          return result;
        }
        static Invert(source) {
          const result = new Matrix();
          source.invertToRef(result);
          return result;
        }
        static RotationXToRef(angle, result) {
          const s = Math.sin(angle);
          const c = Math.cos(angle);
          Matrix.FromValuesToRef(1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, result);
          result._updateIdentityStatus(c === 1 && s === 0);
        }
        static RotationY(angle) {
          const result = new Matrix();
          Matrix.RotationYToRef(angle, result);
          return result;
        }
        static RotationYToRef(angle, result) {
          const s = Math.sin(angle);
          const c = Math.cos(angle);
          Matrix.FromValuesToRef(c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1, result);
          result._updateIdentityStatus(c === 1 && s === 0);
        }
        static RotationZ(angle) {
          const result = new Matrix();
          Matrix.RotationZToRef(angle, result);
          return result;
        }
        static RotationZToRef(angle, result) {
          const s = Math.sin(angle);
          const c = Math.cos(angle);
          Matrix.FromValuesToRef(c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, result);
          result._updateIdentityStatus(c === 1 && s === 0);
        }
        static RotationAxis(axis, angle) {
          const result = new Matrix();
          Matrix.RotationAxisToRef(axis, angle, result);
          return result;
        }
        static RotationAxisToRef(axis, angle, result) {
          const s = Math.sin(-angle);
          const c = Math.cos(-angle);
          const c1 = 1 - c;
          axis.normalize();
          const m = result._m;
          m[0] = axis.x * axis.x * c1 + c;
          m[1] = axis.x * axis.y * c1 - axis.z * s;
          m[2] = axis.x * axis.z * c1 + axis.y * s;
          m[3] = 0;
          m[4] = axis.y * axis.x * c1 + axis.z * s;
          m[5] = axis.y * axis.y * c1 + c;
          m[6] = axis.y * axis.z * c1 - axis.x * s;
          m[7] = 0;
          m[8] = axis.z * axis.x * c1 - axis.y * s;
          m[9] = axis.z * axis.y * c1 + axis.x * s;
          m[10] = axis.z * axis.z * c1 + c;
          m[11] = 0;
          m[12] = 0;
          m[13] = 0;
          m[14] = 0;
          m[15] = 1;
          result._markAsUpdated();
        }
        static RotationYawPitchRoll(yaw, pitch, roll) {
          const result = new Matrix();
          Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);
          return result;
        }
        static RotationYawPitchRollToRef(yaw, pitch, roll, result) {
          Quaternion_1.Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, preallocatedVariables_1.MathTmp.Quaternion[0]);
          preallocatedVariables_1.MathTmp.Quaternion[0].toRotationMatrix(result);
        }
        static Scaling(x, y, z) {
          const result = new Matrix();
          Matrix.ScalingToRef(x, y, z, result);
          return result;
        }
        static ScalingToRef(x, y, z, result) {
          Matrix.FromValuesToRef(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1, result);
          result._updateIdentityStatus(x === 1 && y === 1 && z === 1);
        }
        static Translation(x, y, z) {
          const result = new Matrix();
          Matrix.TranslationToRef(x, y, z, result);
          return result;
        }
        static TranslationToRef(x, y, z, result) {
          Matrix.FromValuesToRef(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1, result);
          result._updateIdentityStatus(x === 0 && y === 0 && z === 0);
        }
        static Lerp(startValue, endValue, gradient) {
          const result = new Matrix();
          Matrix.LerpToRef(startValue, endValue, gradient, result);
          return result;
        }
        static LerpToRef(startValue, endValue, gradient, result) {
          for (let index = 0; index < 16; index++) {
            result._m[index] = startValue._m[index] * (1 - gradient) + endValue._m[index] * gradient;
          }
          result._markAsUpdated();
        }
        static DecomposeLerp(startValue, endValue, gradient) {
          const result = new Matrix();
          Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);
          return result;
        }
        static DecomposeLerpToRef(startValue, endValue, gradient, result) {
          const startScale = preallocatedVariables_1.MathTmp.Vector3[0];
          const startRotation = preallocatedVariables_1.MathTmp.Quaternion[0];
          const startTranslation = preallocatedVariables_1.MathTmp.Vector3[1];
          startValue.decompose(startScale, startRotation, startTranslation);
          const endScale = preallocatedVariables_1.MathTmp.Vector3[2];
          const endRotation = preallocatedVariables_1.MathTmp.Quaternion[1];
          const endTranslation = preallocatedVariables_1.MathTmp.Vector3[3];
          endValue.decompose(endScale, endRotation, endTranslation);
          const resultScale = preallocatedVariables_1.MathTmp.Vector3[4];
          Vector3_1.Vector3.LerpToRef(startScale, endScale, gradient, resultScale);
          const resultRotation = preallocatedVariables_1.MathTmp.Quaternion[2];
          Quaternion_1.Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);
          const resultTranslation = preallocatedVariables_1.MathTmp.Vector3[5];
          Vector3_1.Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);
          Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);
        }
        static LookAtLH(eye, target, up) {
          const result = new Matrix();
          Matrix.LookAtLHToRef(eye, target, up, result);
          return result;
        }
        static LookAtLHToRef(eye, target, up, result) {
          const xAxis = preallocatedVariables_1.MathTmp.Vector3[0];
          const yAxis = preallocatedVariables_1.MathTmp.Vector3[1];
          const zAxis = preallocatedVariables_1.MathTmp.Vector3[2];
          target.subtractToRef(eye, zAxis);
          zAxis.normalize();
          Vector3_1.Vector3.CrossToRef(up, zAxis, xAxis);
          const xSquareLength = xAxis.lengthSquared();
          if (xSquareLength === 0) {
            xAxis.x = 1;
          } else {
            xAxis.normalizeFromLength(Math.sqrt(xSquareLength));
          }
          Vector3_1.Vector3.CrossToRef(zAxis, xAxis, yAxis);
          yAxis.normalize();
          const ex = -Vector3_1.Vector3.Dot(xAxis, eye);
          const ey = -Vector3_1.Vector3.Dot(yAxis, eye);
          const ez = -Vector3_1.Vector3.Dot(zAxis, eye);
          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, ex, ey, ez, 1, result);
        }
        static LookAtRH(eye, target, up) {
          const result = new Matrix();
          Matrix.LookAtRHToRef(eye, target, up, result);
          return result;
        }
        static LookAtRHToRef(eye, target, up, result) {
          const xAxis = preallocatedVariables_1.MathTmp.Vector3[0];
          const yAxis = preallocatedVariables_1.MathTmp.Vector3[1];
          const zAxis = preallocatedVariables_1.MathTmp.Vector3[2];
          eye.subtractToRef(target, zAxis);
          zAxis.normalize();
          Vector3_1.Vector3.CrossToRef(up, zAxis, xAxis);
          const xSquareLength = xAxis.lengthSquared();
          if (xSquareLength === 0) {
            xAxis.x = 1;
          } else {
            xAxis.normalizeFromLength(Math.sqrt(xSquareLength));
          }
          Vector3_1.Vector3.CrossToRef(zAxis, xAxis, yAxis);
          yAxis.normalize();
          const ex = -Vector3_1.Vector3.Dot(xAxis, eye);
          const ey = -Vector3_1.Vector3.Dot(yAxis, eye);
          const ez = -Vector3_1.Vector3.Dot(zAxis, eye);
          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, ex, ey, ez, 1, result);
        }
        static OrthoLH(width, height, znear, zfar) {
          const matrix = new Matrix();
          Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);
          return matrix;
        }
        static OrthoLHToRef(width, height, znear, zfar, result) {
          const n = znear;
          const f = zfar;
          const a = 2 / width;
          const b = 2 / height;
          const c = 2 / (f - n);
          const d = -(f + n) / (f - n);
          Matrix.FromValuesToRef(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, 0, 0, d, 1, result);
          result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);
        }
        static OrthoOffCenterLH(left, right, bottom, top, znear, zfar) {
          const matrix = new Matrix();
          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);
          return matrix;
        }
        static OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result) {
          const n = znear;
          const f = zfar;
          const a = 2 / (right - left);
          const b = 2 / (top - bottom);
          const c = 2 / (f - n);
          const d = -(f + n) / (f - n);
          const i0 = (left + right) / (left - right);
          const i1 = (top + bottom) / (bottom - top);
          Matrix.FromValuesToRef(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, i0, i1, d, 1, result);
          result._markAsUpdated();
        }
        static OrthoOffCenterRH(left, right, bottom, top, znear, zfar) {
          const matrix = new Matrix();
          Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);
          return matrix;
        }
        static OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, result) {
          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);
          result._m[10] *= -1;
        }
        static PerspectiveLH(width, height, znear, zfar) {
          const matrix = new Matrix();
          const n = znear;
          const f = zfar;
          const a = 2 * n / width;
          const b = 2 * n / height;
          const c = (f + n) / (f - n);
          const d = -2 * f * n / (f - n);
          Matrix.FromValuesToRef(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 1, 0, 0, d, 0, matrix);
          matrix._updateIdentityStatus(false);
          return matrix;
        }
        static PerspectiveFovLH(fov, aspect, znear, zfar) {
          const matrix = new Matrix();
          Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);
          return matrix;
        }
        static PerspectiveFovLHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {
          const n = znear;
          const f = zfar;
          const t = 1 / Math.tan(fov * 0.5);
          const a = isVerticalFovFixed ? t / aspect : t;
          const b = isVerticalFovFixed ? t : t * aspect;
          const c = (f + n) / (f - n);
          const d = -2 * f * n / (f - n);
          Matrix.FromValuesToRef(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 1, 0, 0, d, 0, result);
          result._updateIdentityStatus(false);
        }
        static PerspectiveFovRH(fov, aspect, znear, zfar) {
          const matrix = new Matrix();
          Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);
          return matrix;
        }
        static PerspectiveFovRHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {
          const n = znear;
          const f = zfar;
          const t = 1 / Math.tan(fov * 0.5);
          const a = isVerticalFovFixed ? t / aspect : t;
          const b = isVerticalFovFixed ? t : t * aspect;
          const c = -(f + n) / (f - n);
          const d = -2 * f * n / (f - n);
          Matrix.FromValuesToRef(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, -1, 0, 0, d, 0, result);
          result._updateIdentityStatus(false);
        }
        static PerspectiveFovWebVRToRef(fov, znear, zfar, result, rightHanded = false) {
          const rightHandedFactor = rightHanded ? -1 : 1;
          const upTan = Math.tan(fov.upDegrees * Math.PI / 180);
          const downTan = Math.tan(fov.downDegrees * Math.PI / 180);
          const leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
          const rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
          const xScale = 2 / (leftTan + rightTan);
          const yScale = 2 / (upTan + downTan);
          const m = result._m;
          m[0] = xScale;
          m[1] = m[2] = m[3] = m[4] = 0;
          m[5] = yScale;
          m[6] = m[7] = 0;
          m[8] = (leftTan - rightTan) * xScale * 0.5;
          m[9] = -((upTan - downTan) * yScale * 0.5);
          m[10] = -zfar / (znear - zfar);
          m[11] = 1 * rightHandedFactor;
          m[12] = m[13] = m[15] = 0;
          m[14] = -(2 * zfar * znear) / (zfar - znear);
          result._markAsUpdated();
        }
        static GetAsMatrix2x2(matrix) {
          return [matrix._m[0], matrix._m[1], matrix._m[4], matrix._m[5]];
        }
        static GetAsMatrix3x3(matrix) {
          return [
            matrix._m[0],
            matrix._m[1],
            matrix._m[2],
            matrix._m[4],
            matrix._m[5],
            matrix._m[6],
            matrix._m[8],
            matrix._m[9],
            matrix._m[10]
          ];
        }
        static Transpose(matrix) {
          const result = new Matrix();
          Matrix.TransposeToRef(matrix, result);
          return result;
        }
        static TransposeToRef(matrix, result) {
          const rm = result._m;
          const mm = matrix._m;
          rm[0] = mm[0];
          rm[1] = mm[4];
          rm[2] = mm[8];
          rm[3] = mm[12];
          rm[4] = mm[1];
          rm[5] = mm[5];
          rm[6] = mm[9];
          rm[7] = mm[13];
          rm[8] = mm[2];
          rm[9] = mm[6];
          rm[10] = mm[10];
          rm[11] = mm[14];
          rm[12] = mm[3];
          rm[13] = mm[7];
          rm[14] = mm[11];
          rm[15] = mm[15];
          result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);
        }
        static Reflection(plane) {
          const matrix = new Matrix();
          Matrix.ReflectionToRef(plane, matrix);
          return matrix;
        }
        static ReflectionToRef(plane, result) {
          plane.normalize();
          const x = plane.normal.x;
          const y = plane.normal.y;
          const z = plane.normal.z;
          const temp = -2 * x;
          const temp2 = -2 * y;
          const temp3 = -2 * z;
          Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0, temp * y, temp2 * y + 1, temp3 * y, 0, temp * z, temp2 * z, temp3 * z + 1, 0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1, result);
        }
        static FromXYZAxesToRef(xaxis, yaxis, zaxis, result) {
          Matrix.FromValuesToRef(xaxis.x, xaxis.y, xaxis.z, 0, yaxis.x, yaxis.y, yaxis.z, 0, zaxis.x, zaxis.y, zaxis.z, 0, 0, 0, 0, 1, result);
        }
        static FromQuaternionToRef(quat, result) {
          const xx = quat.x * quat.x;
          const yy = quat.y * quat.y;
          const zz = quat.z * quat.z;
          const xy = quat.x * quat.y;
          const zw = quat.z * quat.w;
          const zx = quat.z * quat.x;
          const yw = quat.y * quat.w;
          const yz = quat.y * quat.z;
          const xw = quat.x * quat.w;
          result._m[0] = 1 - 2 * (yy + zz);
          result._m[1] = 2 * (xy + zw);
          result._m[2] = 2 * (zx - yw);
          result._m[3] = 0;
          result._m[4] = 2 * (xy - zw);
          result._m[5] = 1 - 2 * (zz + xx);
          result._m[6] = 2 * (yz + xw);
          result._m[7] = 0;
          result._m[8] = 2 * (zx + yw);
          result._m[9] = 2 * (yz - xw);
          result._m[10] = 1 - 2 * (yy + xx);
          result._m[11] = 0;
          result._m[12] = 0;
          result._m[13] = 0;
          result._m[14] = 0;
          result._m[15] = 1;
          result._markAsUpdated();
        }
        _markAsUpdated() {
          this.updateFlag = Matrix._updateFlagSeed++;
          this._isIdentity = false;
          this._isIdentity3x2 = false;
          this._isIdentityDirty = true;
          this._isIdentity3x2Dirty = true;
        }
        isIdentity() {
          if (this._isIdentityDirty) {
            this._isIdentityDirty = false;
            const m = this._m;
            this._isIdentity = m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 0 && m[4] === 0 && m[5] === 1 && m[6] === 0 && m[7] === 0 && m[8] === 0 && m[9] === 0 && m[10] === 1 && m[11] === 0 && m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1;
          }
          return this._isIdentity;
        }
        isIdentityAs3x2() {
          if (this._isIdentity3x2Dirty) {
            this._isIdentity3x2Dirty = false;
            if (this._m[0] !== 1 || this._m[5] !== 1 || this._m[15] !== 1) {
              this._isIdentity3x2 = false;
            } else if (this._m[1] !== 0 || this._m[2] !== 0 || this._m[3] !== 0 || this._m[4] !== 0 || this._m[6] !== 0 || this._m[7] !== 0 || this._m[8] !== 0 || this._m[9] !== 0 || this._m[10] !== 0 || this._m[11] !== 0 || this._m[12] !== 0 || this._m[13] !== 0 || this._m[14] !== 0) {
              this._isIdentity3x2 = false;
            } else {
              this._isIdentity3x2 = true;
            }
          }
          return this._isIdentity3x2;
        }
        determinant() {
          if (this._isIdentity === true) {
            return 1;
          }
          const m = this._m;
          const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];
          const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];
          const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];
          const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];
          const det_22_33 = m22 * m33 - m32 * m23;
          const det_21_33 = m21 * m33 - m31 * m23;
          const det_21_32 = m21 * m32 - m31 * m22;
          const det_20_33 = m20 * m33 - m30 * m23;
          const det_20_32 = m20 * m32 - m22 * m30;
          const det_20_31 = m20 * m31 - m30 * m21;
          const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);
          const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);
          const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);
          const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);
          return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;
        }
        toArray() {
          return this._m;
        }
        asArray() {
          return this._m;
        }
        invert() {
          this.invertToRef(this);
          return this;
        }
        reset() {
          Matrix.FromValuesToRef(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, this);
          this._updateIdentityStatus(false);
          return this;
        }
        add(other) {
          const result = new Matrix();
          this.addToRef(other, result);
          return result;
        }
        addToRef(other, result) {
          for (let index = 0; index < 16; index++) {
            result._m[index] = this._m[index] + other._m[index];
          }
          result._markAsUpdated();
          return this;
        }
        addToSelf(other) {
          for (let index = 0; index < 16; index++) {
            this._m[index] += other._m[index];
          }
          this._markAsUpdated();
          return this;
        }
        invertToRef(other) {
          if (this._isIdentity === true) {
            Matrix.IdentityToRef(other);
            return this;
          }
          const m = this._m;
          const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];
          const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];
          const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];
          const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];
          const det_22_33 = m22 * m33 - m32 * m23;
          const det_21_33 = m21 * m33 - m31 * m23;
          const det_21_32 = m21 * m32 - m31 * m22;
          const det_20_33 = m20 * m33 - m30 * m23;
          const det_20_32 = m20 * m32 - m22 * m30;
          const det_20_31 = m20 * m31 - m30 * m21;
          const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);
          const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);
          const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);
          const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);
          const det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;
          if (det === 0) {
            other.copyFrom(this);
            return this;
          }
          const detInv = 1 / det;
          const det_12_33 = m12 * m33 - m32 * m13;
          const det_11_33 = m11 * m33 - m31 * m13;
          const det_11_32 = m11 * m32 - m31 * m12;
          const det_10_33 = m10 * m33 - m30 * m13;
          const det_10_32 = m10 * m32 - m30 * m12;
          const det_10_31 = m10 * m31 - m30 * m11;
          const det_12_23 = m12 * m23 - m22 * m13;
          const det_11_23 = m11 * m23 - m21 * m13;
          const det_11_22 = m11 * m22 - m21 * m12;
          const det_10_23 = m10 * m23 - m20 * m13;
          const det_10_22 = m10 * m22 - m20 * m12;
          const det_10_21 = m10 * m21 - m20 * m11;
          const cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);
          const cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);
          const cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);
          const cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);
          const cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);
          const cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);
          const cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);
          const cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);
          const cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);
          const cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);
          const cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);
          const cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);
          Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);
          return this;
        }
        addAtIndex(index, value) {
          this._m[index] += value;
          this._markAsUpdated();
          return this;
        }
        multiplyAtIndex(index, value) {
          this._m[index] *= value;
          this._markAsUpdated();
          return this;
        }
        setTranslationFromFloats(x, y, z) {
          this._m[12] = x;
          this._m[13] = y;
          this._m[14] = z;
          this._markAsUpdated();
          return this;
        }
        setTranslation(vector3) {
          return this.setTranslationFromFloats(vector3.x, vector3.y, vector3.z);
        }
        getTranslation() {
          return new Vector3_1.Vector3(this._m[12], this._m[13], this._m[14]);
        }
        getTranslationToRef(result) {
          result.x = this._m[12];
          result.y = this._m[13];
          result.z = this._m[14];
          return this;
        }
        removeRotationAndScaling() {
          const m = this.m;
          Matrix.FromValuesToRef(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, m[12], m[13], m[14], m[15], this);
          this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);
          return this;
        }
        multiply(other) {
          const result = new Matrix();
          this.multiplyToRef(other, result);
          return result;
        }
        copyFrom(other) {
          other.copyToArray(this._m);
          const o = other;
          this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);
          return this;
        }
        copyToArray(array, offset = 0) {
          for (let index = 0; index < 16; index++) {
            array[offset + index] = this._m[index];
          }
          return this;
        }
        multiplyToRef(other, result) {
          if (this._isIdentity) {
            result.copyFrom(other);
            return this;
          }
          if (other._isIdentity) {
            result.copyFrom(this);
            return this;
          }
          this.multiplyToArray(other, result._m, 0);
          result._markAsUpdated();
          return this;
        }
        multiplyToArray(other, result, offset) {
          const m = this._m;
          const otherM = other.m;
          const tm0 = m[0], tm1 = m[1], tm2 = m[2], tm3 = m[3];
          const tm4 = m[4], tm5 = m[5], tm6 = m[6], tm7 = m[7];
          const tm8 = m[8], tm9 = m[9], tm10 = m[10], tm11 = m[11];
          const tm12 = m[12], tm13 = m[13], tm14 = m[14], tm15 = m[15];
          const om0 = otherM[0], om1 = otherM[1], om2 = otherM[2], om3 = otherM[3];
          const om4 = otherM[4], om5 = otherM[5], om6 = otherM[6], om7 = otherM[7];
          const om8 = otherM[8], om9 = otherM[9], om10 = otherM[10], om11 = otherM[11];
          const om12 = otherM[12], om13 = otherM[13], om14 = otherM[14], om15 = otherM[15];
          result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;
          result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;
          result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;
          result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;
          result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;
          result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;
          result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;
          result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;
          result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;
          result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;
          result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;
          result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;
          result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;
          result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;
          result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;
          result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;
          return this;
        }
        equals(value) {
          const other = value;
          if (!other) {
            return false;
          }
          if (this._isIdentity || other._isIdentity) {
            if (!this._isIdentityDirty && !other._isIdentityDirty) {
              return this._isIdentity && other._isIdentity;
            }
          }
          const m = this.m;
          const om = other.m;
          return m[0] === om[0] && m[1] === om[1] && m[2] === om[2] && m[3] === om[3] && m[4] === om[4] && m[5] === om[5] && m[6] === om[6] && m[7] === om[7] && m[8] === om[8] && m[9] === om[9] && m[10] === om[10] && m[11] === om[11] && m[12] === om[12] && m[13] === om[13] && m[14] === om[14] && m[15] === om[15];
        }
        clone() {
          const matrix = new Matrix();
          matrix.copyFrom(this);
          return matrix;
        }
        getClassName() {
          return "Matrix";
        }
        getHashCode() {
          let hash = this._m[0] || 0;
          for (let i = 1; i < 16; i++) {
            hash = hash * 397 ^ (this._m[i] || 0);
          }
          return hash;
        }
        decompose(scale, rotation, translation) {
          if (this._isIdentity) {
            if (translation) {
              translation.setAll(0);
            }
            if (scale) {
              scale.setAll(1);
            }
            if (rotation) {
              rotation.copyFromFloats(0, 0, 0, 1);
            }
            return true;
          }
          const m = this._m;
          if (translation) {
            translation.copyFromFloats(m[12], m[13], m[14]);
          }
          const usedScale = scale || preallocatedVariables_1.MathTmp.Vector3[0];
          usedScale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);
          usedScale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);
          usedScale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);
          if (this.determinant() <= 0) {
            usedScale.y *= -1;
          }
          if (usedScale.x === 0 || usedScale.y === 0 || usedScale.z === 0) {
            if (rotation) {
              rotation.copyFromFloats(0, 0, 0, 1);
            }
            return false;
          }
          if (rotation) {
            const sx = 1 / usedScale.x, sy = 1 / usedScale.y, sz = 1 / usedScale.z;
            Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0, m[4] * sy, m[5] * sy, m[6] * sy, 0, m[8] * sz, m[9] * sz, m[10] * sz, 0, 0, 0, 0, 1, preallocatedVariables_1.MathTmp.Matrix[0]);
            Quaternion_1.Quaternion.FromRotationMatrixToRef(preallocatedVariables_1.MathTmp.Matrix[0], rotation);
          }
          return true;
        }
        getRow(index) {
          if (index < 0 || index > 3) {
            return null;
          }
          const i = index * 4;
          return new Vector4_1.Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);
        }
        setRow(index, row) {
          return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);
        }
        transpose() {
          return Matrix.Transpose(this);
        }
        transposeToRef(result) {
          Matrix.TransposeToRef(this, result);
          return this;
        }
        setRowFromFloats(index, x, y, z, w) {
          if (index < 0 || index > 3) {
            return this;
          }
          const i = index * 4;
          this._m[i + 0] = x;
          this._m[i + 1] = y;
          this._m[i + 2] = z;
          this._m[i + 3] = w;
          this._markAsUpdated();
          return this;
        }
        scale(scale) {
          const result = new Matrix();
          this.scaleToRef(scale, result);
          return result;
        }
        scaleToRef(scale, result) {
          for (let index = 0; index < 16; index++) {
            result._m[index] = this._m[index] * scale;
          }
          result._markAsUpdated();
          return this;
        }
        scaleAndAddToRef(scale, result) {
          for (let index = 0; index < 16; index++) {
            result._m[index] += this._m[index] * scale;
          }
          result._markAsUpdated();
          return this;
        }
        toNormalMatrix(ref) {
          const tmp = preallocatedVariables_1.MathTmp.Matrix[0];
          this.invertToRef(tmp);
          tmp.transposeToRef(ref);
          const m = ref._m;
          Matrix.FromValuesToRef(m[0], m[1], m[2], 0, m[4], m[5], m[6], 0, m[8], m[9], m[10], 0, 0, 0, 0, 1, ref);
        }
        getRotationMatrix() {
          const result = new Matrix();
          this.getRotationMatrixToRef(result);
          return result;
        }
        getRotationMatrixToRef(result) {
          const scale = preallocatedVariables_1.MathTmp.Vector3[0];
          if (!this.decompose(scale)) {
            Matrix.IdentityToRef(result);
            return this;
          }
          const m = this._m;
          const sx = 1 / scale.x, sy = 1 / scale.y, sz = 1 / scale.z;
          Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0, m[4] * sy, m[5] * sy, m[6] * sy, 0, m[8] * sz, m[9] * sz, m[10] * sz, 0, 0, 0, 0, 1, result);
          return this;
        }
        toggleModelMatrixHandInPlace() {
          const m = this._m;
          m[2] *= -1;
          m[6] *= -1;
          m[8] *= -1;
          m[9] *= -1;
          m[14] *= -1;
          this._markAsUpdated();
        }
        toggleProjectionMatrixHandInPlace() {
          const m = this._m;
          m[8] *= -1;
          m[9] *= -1;
          m[10] *= -1;
          m[11] *= -1;
          this._markAsUpdated();
        }
        _updateIdentityStatus(isIdentity, isIdentityDirty = false, isIdentity3x2 = false, isIdentity3x2Dirty = true) {
          this.updateFlag = Matrix._updateFlagSeed++;
          this._isIdentity = isIdentity;
          this._isIdentity3x2 = isIdentity || isIdentity3x2;
          this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;
          this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;
        }
      };
      exports2.Matrix = Matrix;
      Matrix._updateFlagSeed = 0;
      Matrix._identityReadOnly = Matrix.Identity();
    }
  });

  // node_modules/@dcl/ecs-math/dist/Quaternion.js
  var require_Quaternion = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Quaternion.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Quaternion = void 0;
      var Matrix_1 = require_Matrix();
      var Vector3_1 = require_Vector3();
      var preallocatedVariables_1 = require_preallocatedVariables();
      var types_1 = require_types2();
      var Scalar_1 = require_Scalar();
      var Quaternion2 = class {
        constructor(x = 0, y = 0, z = 0, w = 1) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
        }
        static FromRotationMatrix(matrix) {
          const result = new Quaternion2();
          Quaternion2.FromRotationMatrixToRef(matrix, result);
          return result;
        }
        static FromRotationMatrixToRef(matrix, result) {
          const data = matrix.m;
          const m11 = data[0], m12 = data[4], m13 = data[8];
          const m21 = data[1], m22 = data[5], m23 = data[9];
          const m31 = data[2], m32 = data[6], m33 = data[10];
          const trace = m11 + m22 + m33;
          let s;
          if (trace > 0) {
            s = 0.5 / Math.sqrt(trace + 1);
            result.w = 0.25 / s;
            result.x = (m32 - m23) * s;
            result.y = (m13 - m31) * s;
            result.z = (m21 - m12) * s;
          } else if (m11 > m22 && m11 > m33) {
            s = 2 * Math.sqrt(1 + m11 - m22 - m33);
            result.w = (m32 - m23) / s;
            result.x = 0.25 * s;
            result.y = (m12 + m21) / s;
            result.z = (m13 + m31) / s;
          } else if (m22 > m33) {
            s = 2 * Math.sqrt(1 + m22 - m11 - m33);
            result.w = (m13 - m31) / s;
            result.x = (m12 + m21) / s;
            result.y = 0.25 * s;
            result.z = (m23 + m32) / s;
          } else {
            s = 2 * Math.sqrt(1 + m33 - m11 - m22);
            result.w = (m21 - m12) / s;
            result.x = (m13 + m31) / s;
            result.y = (m23 + m32) / s;
            result.z = 0.25 * s;
          }
        }
        static Dot(left, right) {
          return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
        }
        static AreClose(quat0, quat1) {
          const dot = Quaternion2.Dot(quat0, quat1);
          return dot >= 0;
        }
        static Zero() {
          return new Quaternion2(0, 0, 0, 0);
        }
        static Inverse(q) {
          return new Quaternion2(-q.x, -q.y, -q.z, q.w);
        }
        static IsIdentity(quaternion) {
          return quaternion && quaternion.x === 0 && quaternion.y === 0 && quaternion.z === 0 && quaternion.w === 1;
        }
        static RotationAxis(axis, angle) {
          const angleRad = angle * types_1.DEG2RAD;
          return Quaternion2.RotationAxisToRef(axis, angleRad, new Quaternion2());
        }
        static RotationAxisToRef(axis, angle, result) {
          const angleRad = angle * types_1.DEG2RAD;
          const sin = Math.sin(angleRad / 2);
          axis.normalize();
          result.w = Math.cos(angleRad / 2);
          result.x = axis.x * sin;
          result.y = axis.y * sin;
          result.z = axis.z * sin;
          return result;
        }
        static FromArray(array, offset = 0) {
          return new Quaternion2(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);
        }
        static FromEulerAnglesRef(x, y, z, result) {
          return Quaternion2.RotationYawPitchRollToRef(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD, result);
        }
        static RotationYawPitchRoll(yaw, pitch, roll) {
          const q = new Quaternion2();
          Quaternion2.RotationYawPitchRollToRef(yaw, pitch, roll, q);
          return q;
        }
        static RotationYawPitchRollToRef(yaw, pitch, roll, result) {
          const halfPitch = pitch * 0.5;
          const halfYaw = yaw * 0.5;
          const halfRoll = roll * 0.5;
          const c1 = Math.cos(halfPitch);
          const c2 = Math.cos(halfYaw);
          const c3 = Math.cos(halfRoll);
          const s1 = Math.sin(halfPitch);
          const s2 = Math.sin(halfYaw);
          const s3 = Math.sin(halfRoll);
          result.x = c2 * s1 * c3 + s2 * c1 * s3;
          result.y = s2 * c1 * c3 - c2 * s1 * s3;
          result.z = c2 * c1 * s3 - s2 * s1 * c3;
          result.w = c2 * c1 * c3 + s2 * s1 * s3;
        }
        static RotationAlphaBetaGamma(alpha, beta, gamma) {
          const result = new Quaternion2();
          Quaternion2.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);
          return result;
        }
        static RotationAlphaBetaGammaToRef(alpha, beta, gamma, result) {
          const halfGammaPlusAlpha = (gamma + alpha) * 0.5;
          const halfGammaMinusAlpha = (gamma - alpha) * 0.5;
          const halfBeta = beta * 0.5;
          result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);
          result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);
          result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);
          result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);
        }
        static RotationQuaternionFromAxis(axis1, axis2, axis3) {
          const quat = new Quaternion2(0, 0, 0, 0);
          Quaternion2.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);
          return quat;
        }
        static RotationQuaternionFromAxisToRef(axis1, axis2, axis3, ref) {
          const rotMat = preallocatedVariables_1.MathTmp.Matrix[0];
          Matrix_1.Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);
          Quaternion2.FromRotationMatrixToRef(rotMat, ref);
        }
        static Slerp(left, right, amount) {
          const result = Quaternion2.Identity;
          Quaternion2.SlerpToRef(left, right, amount, result);
          return result;
        }
        static SlerpToRef(left, right, amount, result) {
          let num2;
          let num3;
          let num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
          let flag = false;
          if (num4 < 0) {
            flag = true;
            num4 = -num4;
          }
          if (num4 > 0.999999) {
            num3 = 1 - amount;
            num2 = flag ? -amount : amount;
          } else {
            const num5 = Math.acos(num4);
            const num6 = 1 / Math.sin(num5);
            num3 = Math.sin((1 - amount) * num5) * num6;
            num2 = flag ? -Math.sin(amount * num5) * num6 : Math.sin(amount * num5) * num6;
          }
          result.x = num3 * left.x + num2 * right.x;
          result.y = num3 * left.y + num2 * right.y;
          result.z = num3 * left.z + num2 * right.z;
          result.w = num3 * left.w + num2 * right.w;
        }
        static Hermite(value1, tangent1, value2, tangent2, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const part1 = 2 * cubed - 3 * squared + 1;
          const part2 = -2 * cubed + 3 * squared;
          const part3 = cubed - 2 * squared + amount;
          const part4 = cubed - squared;
          const x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;
          const y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;
          const z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;
          const w = value1.w * part1 + value2.w * part2 + tangent1.w * part3 + tangent2.w * part4;
          return new Quaternion2(x, y, z, w);
        }
        static get Identity() {
          return new Quaternion2(0, 0, 0, 1);
        }
        static Angle(quat1, quat2) {
          const dot = Quaternion2.Dot(quat1, quat2);
          return Math.acos(Math.min(Math.abs(dot), 1)) * 2 * types_1.RAD2DEG;
        }
        static Euler(x, y, z) {
          return Quaternion2.RotationYawPitchRoll(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD);
        }
        static LookRotation(forward, up = preallocatedVariables_1.MathTmp.staticUp) {
          const forwardNew = Vector3_1.Vector3.Normalize(forward);
          const right = Vector3_1.Vector3.Normalize(Vector3_1.Vector3.Cross(up, forwardNew));
          const upNew = Vector3_1.Vector3.Cross(forwardNew, right);
          const m00 = right.x;
          const m01 = right.y;
          const m02 = right.z;
          const m10 = upNew.x;
          const m11 = upNew.y;
          const m12 = upNew.z;
          const m20 = forwardNew.x;
          const m21 = forwardNew.y;
          const m22 = forwardNew.z;
          const num8 = m00 + m11 + m22;
          const quaternion = new Quaternion2();
          if (num8 > 0) {
            let num = Math.sqrt(num8 + 1);
            quaternion.w = num * 0.5;
            num = 0.5 / num;
            quaternion.x = (m12 - m21) * num;
            quaternion.y = (m20 - m02) * num;
            quaternion.z = (m01 - m10) * num;
            return quaternion;
          }
          if (m00 >= m11 && m00 >= m22) {
            const num7 = Math.sqrt(1 + m00 - m11 - m22);
            const num4 = 0.5 / num7;
            quaternion.x = 0.5 * num7;
            quaternion.y = (m01 + m10) * num4;
            quaternion.z = (m02 + m20) * num4;
            quaternion.w = (m12 - m21) * num4;
            return quaternion;
          }
          if (m11 > m22) {
            const num6 = Math.sqrt(1 + m11 - m00 - m22);
            const num3 = 0.5 / num6;
            quaternion.x = (m10 + m01) * num3;
            quaternion.y = 0.5 * num6;
            quaternion.z = (m21 + m12) * num3;
            quaternion.w = (m20 - m02) * num3;
            return quaternion;
          }
          const num5 = Math.sqrt(1 + m22 - m00 - m11);
          const num2 = 0.5 / num5;
          quaternion.x = (m20 + m02) * num2;
          quaternion.y = (m21 + m12) * num2;
          quaternion.z = 0.5 * num5;
          quaternion.w = (m01 - m10) * num2;
          return quaternion;
        }
        static RotateTowards(from, to, maxDegreesDelta) {
          const num = Quaternion2.Angle(from, to);
          if (num === 0) {
            return to;
          }
          const t = Math.min(1, maxDegreesDelta / num);
          return Quaternion2.Slerp(from, to, t);
        }
        static FromToRotation(from, to, up = preallocatedVariables_1.MathTmp.staticUp) {
          const v0 = from.normalize();
          const v1 = to.normalize();
          const a = Vector3_1.Vector3.Cross(v0, v1);
          const w = Math.sqrt(v0.lengthSquared() * v1.lengthSquared()) + Vector3_1.Vector3.Dot(v0, v1);
          if (a.lengthSquared() < 1e-4) {
            return Math.abs(w) < 1e-4 ? new Quaternion2(up.x, up.y, up.z, 0).normalized : Quaternion2.Identity;
          } else {
            return new Quaternion2(a.x, a.y, a.z, w).normalized;
          }
        }
        get normalized() {
          return this.normalize();
        }
        setFromToRotation(from, to, up = preallocatedVariables_1.MathTmp.staticUp) {
          const result = Quaternion2.FromToRotation(from, to, up);
          this.x = result.x;
          this.y = result.y;
          this.z = result.z;
          this.w = result.w;
        }
        set eulerAngles(euler) {
          this.setEuler(euler.x, euler.y, euler.z);
        }
        get eulerAngles() {
          const out = new Vector3_1.Vector3();
          const unit = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
          const test = this.x * this.w - this.y * this.z;
          if (test > 0.4995 * unit) {
            out.x = Math.PI / 2;
            out.y = 2 * Math.atan2(this.y, this.x);
            out.z = 0;
          } else if (test < -0.4995 * unit) {
            out.x = -Math.PI / 2;
            out.y = -2 * Math.atan2(this.y, this.x);
            out.z = 0;
          } else {
            out.x = Math.asin(2 * (this.w * this.x - this.y * this.z));
            out.y = Math.atan2(2 * this.w * this.y + 2 * this.z * this.x, 1 - 2 * (this.x * this.x + this.y * this.y));
            out.z = Math.atan2(2 * this.w * this.z + 2 * this.x * this.y, 1 - 2 * (this.z * this.z + this.x * this.x));
          }
          out.x *= types_1.RAD2DEG;
          out.y *= types_1.RAD2DEG;
          out.z *= types_1.RAD2DEG;
          out.x = Scalar_1.Scalar.Repeat(out.x, 360);
          out.y = Scalar_1.Scalar.Repeat(out.y, 360);
          out.z = Scalar_1.Scalar.Repeat(out.z, 360);
          return out;
        }
        toString() {
          return `(${this.x}, ${this.y}, ${this.z}, ${this.w})`;
        }
        get length() {
          return Math.sqrt(this.lengthSquared);
        }
        get lengthSquared() {
          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }
        getClassName() {
          return "Quaternion";
        }
        getHashCode() {
          let hash = this.x || 0;
          hash = hash * 397 ^ (this.y || 0);
          hash = hash * 397 ^ (this.z || 0);
          hash = hash * 397 ^ (this.w || 0);
          return hash;
        }
        asArray() {
          return [this.x, this.y, this.z, this.w];
        }
        equals(otherQuaternion) {
          return otherQuaternion && this.x === otherQuaternion.x && this.y === otherQuaternion.y && this.z === otherQuaternion.z && this.w === otherQuaternion.w;
        }
        clone() {
          return new Quaternion2(this.x, this.y, this.z, this.w);
        }
        copyFrom(other) {
          this.x = other.x;
          this.y = other.y;
          this.z = other.z;
          this.w = other.w;
          return this;
        }
        copyFromFloats(x, y, z, w) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
          return this;
        }
        set(x, y, z, w) {
          return this.copyFromFloats(x, y, z, w);
        }
        setEuler(x, y, z) {
          Quaternion2.RotationYawPitchRollToRef(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD, this);
          return this;
        }
        add(other) {
          return new Quaternion2(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);
        }
        addInPlace(other) {
          this.x += other.x;
          this.y += other.y;
          this.z += other.z;
          this.w += other.w;
          return this;
        }
        subtract(other) {
          return new Quaternion2(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);
        }
        scale(value) {
          return new Quaternion2(this.x * value, this.y * value, this.z * value, this.w * value);
        }
        scaleToRef(scale, result) {
          result.x = this.x * scale;
          result.y = this.y * scale;
          result.z = this.z * scale;
          result.w = this.w * scale;
          return this;
        }
        scaleInPlace(value) {
          this.x *= value;
          this.y *= value;
          this.z *= value;
          this.w *= value;
          return this;
        }
        scaleAndAddToRef(scale, result) {
          result.x += this.x * scale;
          result.y += this.y * scale;
          result.z += this.z * scale;
          result.w += this.w * scale;
          return this;
        }
        multiply(q1) {
          const result = new Quaternion2(0, 0, 0, 1);
          this.multiplyToRef(q1, result);
          return result;
        }
        multiplyToRef(q1, result) {
          const x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;
          const y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;
          const z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;
          const w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;
          result.copyFromFloats(x, y, z, w);
          return this;
        }
        multiplyInPlace(q1) {
          this.multiplyToRef(q1, this);
          return this;
        }
        conjugateToRef(ref) {
          ref.copyFromFloats(-this.x, -this.y, -this.z, this.w);
          return this;
        }
        conjugateInPlace() {
          this.x *= -1;
          this.y *= -1;
          this.z *= -1;
          return this;
        }
        conjugate() {
          const result = new Quaternion2(-this.x, -this.y, -this.z, this.w);
          return result;
        }
        normalize() {
          const length = 1 / this.length;
          this.x *= length;
          this.y *= length;
          this.z *= length;
          this.w *= length;
          return this;
        }
        angleAxis(degress, axis) {
          if (axis.lengthSquared() === 0) {
            return Quaternion2.Identity;
          }
          const result = Quaternion2.Identity;
          let radians = degress * types_1.DEG2RAD;
          radians *= 0.5;
          let a2 = axis.normalize();
          a2 = axis.scaleInPlace(Math.sin(radians));
          result.x = a2.x;
          result.y = a2.y;
          result.z = a2.z;
          result.w = Math.cos(radians);
          return result.normalize();
        }
        toRotationMatrix(result) {
          Matrix_1.Matrix.FromQuaternionToRef(this, result);
          return this;
        }
        fromRotationMatrix(matrix) {
          Quaternion2.FromRotationMatrixToRef(matrix, this);
          return this;
        }
      };
      exports2.Quaternion = Quaternion2;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Vector3.js
  var require_Vector3 = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Vector3.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Vector3 = void 0;
      var preallocatedVariables_1 = require_preallocatedVariables();
      var types_1 = require_types2();
      var Quaternion_1 = require_Quaternion();
      var Scalar_1 = require_Scalar();
      var Vector33 = class {
        constructor(x = 0, y = 0, z = 0) {
          this.x = x;
          this.y = y;
          this.z = z;
        }
        get isNonUniform() {
          const absX = Math.abs(this.x);
          const absY = Math.abs(this.y);
          if (absX !== absY) {
            return true;
          }
          const absZ = Math.abs(this.z);
          if (absX !== absZ) {
            return true;
          }
          if (absY !== absZ) {
            return true;
          }
          return false;
        }
        static Add(vector1, vector2) {
          return new Vector33(vector1.x, vector1.y, vector1.z).addInPlace(vector2);
        }
        static GetClipFactor(vector0, vector1, axis, size) {
          const d0 = Vector33.Dot(vector0, axis) - size;
          const d1 = Vector33.Dot(vector1, axis) - size;
          const s = d0 / (d0 - d1);
          return s;
        }
        static GetAngleBetweenVectors(vector0, vector1, normal) {
          const v0 = vector0.normalizeToRef(preallocatedVariables_1.MathTmp.Vector3[1]);
          const v1 = vector1.normalizeToRef(preallocatedVariables_1.MathTmp.Vector3[2]);
          const dot = Vector33.Dot(v0, v1);
          const n = preallocatedVariables_1.MathTmp.Vector3[3];
          Vector33.CrossToRef(v0, v1, n);
          if (Vector33.Dot(n, normal) > 0) {
            return Math.acos(dot);
          }
          return -Math.acos(dot);
        }
        static FromArray(array, offset = 0) {
          return new Vector33(array[offset], array[offset + 1], array[offset + 2]);
        }
        static FromFloatArray(array, offset) {
          return Vector33.FromArray(array, offset);
        }
        static FromArrayToRef(array, offset, result) {
          result.x = array[offset];
          result.y = array[offset + 1];
          result.z = array[offset + 2];
        }
        static FromFloatArrayToRef(array, offset, result) {
          return Vector33.FromArrayToRef(array, offset, result);
        }
        static FromFloatsToRef(x, y, z, result) {
          result.copyFromFloats(x, y, z);
        }
        static Zero() {
          return new Vector33(0, 0, 0);
        }
        static One() {
          return new Vector33(1, 1, 1);
        }
        static Up() {
          return new Vector33(0, 1, 0);
        }
        static Down() {
          return new Vector33(0, -1, 0);
        }
        static Forward() {
          return new Vector33(0, 0, 1);
        }
        static Backward() {
          return new Vector33(0, 0, -1);
        }
        static Right() {
          return new Vector33(1, 0, 0);
        }
        static Left() {
          return new Vector33(-1, 0, 0);
        }
        static TransformCoordinates(vector, transformation) {
          const result = Vector33.Zero();
          Vector33.TransformCoordinatesToRef(vector, transformation, result);
          return result;
        }
        static TransformCoordinatesToRef(vector, transformation, result) {
          return Vector33.TransformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);
        }
        static TransformCoordinatesFromFloatsToRef(x, y, z, transformation, result) {
          const m = transformation.m;
          const rx = x * m[0] + y * m[4] + z * m[8] + m[12];
          const ry = x * m[1] + y * m[5] + z * m[9] + m[13];
          const rz = x * m[2] + y * m[6] + z * m[10] + m[14];
          const rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);
          result.x = rx * rw;
          result.y = ry * rw;
          result.z = rz * rw;
        }
        static TransformNormal(vector, transformation) {
          const result = Vector33.Zero();
          Vector33.TransformNormalToRef(vector, transformation, result);
          return result;
        }
        static TransformNormalToRef(vector, transformation, result) {
          this.TransformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);
        }
        static TransformNormalFromFloatsToRef(x, y, z, transformation, result) {
          const m = transformation.m;
          result.x = x * m[0] + y * m[4] + z * m[8];
          result.y = x * m[1] + y * m[5] + z * m[9];
          result.z = x * m[2] + y * m[6] + z * m[10];
        }
        static CatmullRom(value1, value2, value3, value4, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const x = 0.5 * (2 * value2.x + (-value1.x + value3.x) * amount + (2 * value1.x - 5 * value2.x + 4 * value3.x - value4.x) * squared + (-value1.x + 3 * value2.x - 3 * value3.x + value4.x) * cubed);
          const y = 0.5 * (2 * value2.y + (-value1.y + value3.y) * amount + (2 * value1.y - 5 * value2.y + 4 * value3.y - value4.y) * squared + (-value1.y + 3 * value2.y - 3 * value3.y + value4.y) * cubed);
          const z = 0.5 * (2 * value2.z + (-value1.z + value3.z) * amount + (2 * value1.z - 5 * value2.z + 4 * value3.z - value4.z) * squared + (-value1.z + 3 * value2.z - 3 * value3.z + value4.z) * cubed);
          return new Vector33(x, y, z);
        }
        static Clamp(value, min, max) {
          const v = new Vector33();
          Vector33.ClampToRef(value, min, max, v);
          return v;
        }
        static ClampToRef(value, min, max, result) {
          let x = value.x;
          x = x > max.x ? max.x : x;
          x = x < min.x ? min.x : x;
          let y = value.y;
          y = y > max.y ? max.y : y;
          y = y < min.y ? min.y : y;
          let z = value.z;
          z = z > max.z ? max.z : z;
          z = z < min.z ? min.z : z;
          result.copyFromFloats(x, y, z);
        }
        static Hermite(value1, tangent1, value2, tangent2, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const part1 = 2 * cubed - 3 * squared + 1;
          const part2 = -2 * cubed + 3 * squared;
          const part3 = cubed - 2 * squared + amount;
          const part4 = cubed - squared;
          const x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;
          const y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;
          const z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;
          return new Vector33(x, y, z);
        }
        static Lerp(start, end, amount) {
          const result = new Vector33(0, 0, 0);
          Vector33.LerpToRef(start, end, amount, result);
          return result;
        }
        static LerpToRef(start, end, amount, result) {
          result.x = start.x + (end.x - start.x) * amount;
          result.y = start.y + (end.y - start.y) * amount;
          result.z = start.z + (end.z - start.z) * amount;
        }
        static Dot(left, right) {
          return left.x * right.x + left.y * right.y + left.z * right.z;
        }
        static Cross(left, right) {
          const result = Vector33.Zero();
          Vector33.CrossToRef(left, right, result);
          return result;
        }
        static CrossToRef(left, right, result) {
          const x = left.y * right.z - left.z * right.y;
          const y = left.z * right.x - left.x * right.z;
          const z = left.x * right.y - left.y * right.x;
          result.copyFromFloats(x, y, z);
        }
        static Normalize(vector) {
          const result = Vector33.Zero();
          Vector33.NormalizeToRef(vector, result);
          return result;
        }
        static NormalizeToRef(vector, result) {
          vector.normalizeToRef(result);
        }
        static Minimize(left, right) {
          const min = new Vector33(left.x, left.y, left.z);
          min.minimizeInPlace(right);
          return min;
        }
        static Maximize(left, right) {
          const max = new Vector33(left.x, left.y, left.z);
          max.maximizeInPlace(right);
          return max;
        }
        static Distance(value1, value2) {
          return Math.sqrt(Vector33.DistanceSquared(value1, value2));
        }
        static DistanceSquared(value1, value2) {
          const x = value1.x - value2.x;
          const y = value1.y - value2.y;
          const z = value1.z - value2.z;
          return x * x + y * y + z * z;
        }
        static Center(value1, value2) {
          const center = Vector33.Add(value1, value2);
          center.scaleInPlace(0.5);
          return center;
        }
        static RotationFromAxis(axis1, axis2, axis3) {
          const rotation = Vector33.Zero();
          Vector33.RotationFromAxisToRef(axis1, axis2, axis3, rotation);
          return rotation;
        }
        static RotationFromAxisToRef(axis1, axis2, axis3, ref) {
          const quat = preallocatedVariables_1.MathTmp.Quaternion[0];
          Quaternion_1.Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);
          ref.copyFrom(quat.eulerAngles);
        }
        toString() {
          return `(${this.x}, ${this.y}, ${this.z})`;
        }
        getClassName() {
          return "Vector3";
        }
        getHashCode() {
          let hash = this.x || 0;
          hash = hash * 397 ^ (this.y || 0);
          hash = hash * 397 ^ (this.z || 0);
          return hash;
        }
        asArray() {
          const result = [];
          this.toArray(result, 0);
          return result;
        }
        toArray(array, index = 0) {
          array[index] = this.x;
          array[index + 1] = this.y;
          array[index + 2] = this.z;
          return this;
        }
        toQuaternion() {
          return Quaternion_1.Quaternion.Identity.setEuler(this.y, this.x, this.z);
        }
        addInPlace(otherVector) {
          return this.addInPlaceFromFloats(otherVector.x, otherVector.y, otherVector.z);
        }
        addInPlaceFromFloats(x, y, z) {
          this.x += x;
          this.y += y;
          this.z += z;
          return this;
        }
        add(otherVector) {
          return new Vector33(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);
        }
        addToRef(otherVector, result) {
          return result.copyFromFloats(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);
        }
        subtractInPlace(otherVector) {
          this.x -= otherVector.x;
          this.y -= otherVector.y;
          this.z -= otherVector.z;
          return this;
        }
        subtract(otherVector) {
          return new Vector33(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z);
        }
        subtractToRef(otherVector, result) {
          return this.subtractFromFloatsToRef(otherVector.x, otherVector.y, otherVector.z, result);
        }
        subtractFromFloats(x, y, z) {
          return new Vector33(this.x - x, this.y - y, this.z - z);
        }
        subtractFromFloatsToRef(x, y, z, result) {
          return result.copyFromFloats(this.x - x, this.y - y, this.z - z);
        }
        applyMatrix4(matrix) {
          this.applyMatrix4ToRef(matrix, this);
        }
        applyMatrix4ToRef(matrix, result) {
          const {x, y, z} = this;
          const {m} = matrix;
          const w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);
          result.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;
          result.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;
          result.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;
          return result;
        }
        rotate(q) {
          return this.rotateToRef(q, this);
        }
        rotateToRef(q, result) {
          const {x, y, z} = this;
          const {x: qx, y: qy, z: qz, w: qw} = q;
          const ix = qw * x + qy * z - qz * y;
          const iy = qw * y + qz * x - qx * z;
          const iz = qw * z + qx * y - qy * x;
          const iw = -qx * x - qy * y - qz * z;
          result.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
          result.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
          result.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
          return result;
        }
        negate() {
          return new Vector33(-this.x, -this.y, -this.z);
        }
        scaleInPlace(scale) {
          this.x *= scale;
          this.y *= scale;
          this.z *= scale;
          return this;
        }
        scale(scale) {
          return new Vector33(this.x * scale, this.y * scale, this.z * scale);
        }
        scaleToRef(scale, result) {
          return result.copyFromFloats(this.x * scale, this.y * scale, this.z * scale);
        }
        scaleAndAddToRef(scale, result) {
          return result.addInPlaceFromFloats(this.x * scale, this.y * scale, this.z * scale);
        }
        equals(otherVector) {
          return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z;
        }
        equalsWithEpsilon(otherVector, epsilon = types_1.Epsilon) {
          return otherVector && Scalar_1.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar_1.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) && Scalar_1.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon);
        }
        equalsToFloats(x, y, z) {
          return this.x === x && this.y === y && this.z === z;
        }
        multiplyInPlace(otherVector) {
          this.x *= otherVector.x;
          this.y *= otherVector.y;
          this.z *= otherVector.z;
          return this;
        }
        multiply(otherVector) {
          return this.multiplyByFloats(otherVector.x, otherVector.y, otherVector.z);
        }
        multiplyToRef(otherVector, result) {
          return result.copyFromFloats(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z);
        }
        multiplyByFloats(x, y, z) {
          return new Vector33(this.x * x, this.y * y, this.z * z);
        }
        divide(otherVector) {
          return new Vector33(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);
        }
        divideToRef(otherVector, result) {
          return result.copyFromFloats(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);
        }
        divideInPlace(otherVector) {
          return this.divideToRef(otherVector, this);
        }
        minimizeInPlace(other) {
          return this.minimizeInPlaceFromFloats(other.x, other.y, other.z);
        }
        maximizeInPlace(other) {
          return this.maximizeInPlaceFromFloats(other.x, other.y, other.z);
        }
        minimizeInPlaceFromFloats(x, y, z) {
          if (x < this.x) {
            this.x = x;
          }
          if (y < this.y) {
            this.y = y;
          }
          if (z < this.z) {
            this.z = z;
          }
          return this;
        }
        maximizeInPlaceFromFloats(x, y, z) {
          if (x > this.x) {
            this.x = x;
          }
          if (y > this.y) {
            this.y = y;
          }
          if (z > this.z) {
            this.z = z;
          }
          return this;
        }
        floor() {
          return new Vector33(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));
        }
        fract() {
          return new Vector33(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z));
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }
        lengthSquared() {
          return this.x * this.x + this.y * this.y + this.z * this.z;
        }
        normalize() {
          return this.normalizeFromLength(this.length());
        }
        normalizeFromLength(len) {
          if (len === 0 || len === 1) {
            return this;
          }
          return this.scaleInPlace(1 / len);
        }
        normalizeToNew() {
          const normalized = new Vector33(0, 0, 0);
          this.normalizeToRef(normalized);
          return normalized;
        }
        normalizeToRef(reference) {
          const len = this.length();
          if (len === 0 || len === 1) {
            return reference.copyFromFloats(this.x, this.y, this.z);
          }
          return this.scaleToRef(1 / len, reference);
        }
        clone() {
          return new Vector33(this.x, this.y, this.z);
        }
        copyFrom(source) {
          return this.copyFromFloats(source.x, source.y, source.z);
        }
        copyFromFloats(x, y, z) {
          this.x = x;
          this.y = y;
          this.z = z;
          return this;
        }
        set(x, y, z) {
          return this.copyFromFloats(x, y, z);
        }
        setAll(v) {
          this.x = this.y = this.z = v;
          return this;
        }
      };
      exports2.Vector3 = Vector33;
    }
  });

  // node_modules/@dcl/ecs-math/dist/preallocatedVariables.js
  var require_preallocatedVariables = __commonJS({
    "node_modules/@dcl/ecs-math/dist/preallocatedVariables.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.MathTmp = void 0;
      var utils_1 = require_utils();
      var Vector3_1 = require_Vector3();
      var Quaternion_1 = require_Quaternion();
      var Matrix_1 = require_Matrix();
      exports2.MathTmp = {
        Vector3: (0, utils_1.buildArray)(6, Vector3_1.Vector3.Zero),
        Matrix: (0, utils_1.buildArray)(2, Matrix_1.Matrix.Identity),
        Quaternion: (0, utils_1.buildArray)(3, Quaternion_1.Quaternion.Zero),
        staticUp: Vector3_1.Vector3.Up(),
        tmpMatrix: Matrix_1.Matrix.Zero()
      };
    }
  });

  // node_modules/@dcl/ecs-math/dist/Angle.js
  var require_Angle = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Angle.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Angle = void 0;
      var Angle = class {
        constructor(radians) {
          this._radians = radians;
          if (this._radians < 0) {
            this._radians += 2 * Math.PI;
          }
        }
        static BetweenTwoPoints(a, b) {
          const delta = b.subtract(a);
          const theta = Math.atan2(delta.y, delta.x);
          return new Angle(theta);
        }
        static FromRadians(radians) {
          return new Angle(radians);
        }
        static FromDegrees(degrees) {
          return new Angle(degrees * Math.PI / 180);
        }
        degrees() {
          return this._radians * 180 / Math.PI;
        }
        radians() {
          return this._radians;
        }
      };
      exports2.Angle = Angle;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Vector2.js
  var require_Vector2 = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Vector2.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Vector2 = void 0;
      var types_1 = require_types2();
      var Scalar_1 = require_Scalar();
      var Vector22 = class {
        constructor(x = 0, y = 0) {
          this.x = x;
          this.y = y;
        }
        static Zero() {
          return new Vector22(0, 0);
        }
        static One() {
          return new Vector22(1, 1);
        }
        static Add(vector1, vector2) {
          return new Vector22(vector1.x, vector1.y).addInPlace(vector2);
        }
        static FromArray(array, offset = 0) {
          return new Vector22(array[offset], array[offset + 1]);
        }
        static FromArrayToRef(array, offset, result) {
          result.x = array[offset];
          result.y = array[offset + 1];
        }
        static CatmullRom(value1, value2, value3, value4, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const x = 0.5 * (2 * value2.x + (-value1.x + value3.x) * amount + (2 * value1.x - 5 * value2.x + 4 * value3.x - value4.x) * squared + (-value1.x + 3 * value2.x - 3 * value3.x + value4.x) * cubed);
          const y = 0.5 * (2 * value2.y + (-value1.y + value3.y) * amount + (2 * value1.y - 5 * value2.y + 4 * value3.y - value4.y) * squared + (-value1.y + 3 * value2.y - 3 * value3.y + value4.y) * cubed);
          return new Vector22(x, y);
        }
        static Clamp(value, min, max) {
          let x = value.x;
          x = x > max.x ? max.x : x;
          x = x < min.x ? min.x : x;
          let y = value.y;
          y = y > max.y ? max.y : y;
          y = y < min.y ? min.y : y;
          return new Vector22(x, y);
        }
        static Hermite(value1, tangent1, value2, tangent2, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const part1 = 2 * cubed - 3 * squared + 1;
          const part2 = -2 * cubed + 3 * squared;
          const part3 = cubed - 2 * squared + amount;
          const part4 = cubed - squared;
          const x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;
          const y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;
          return new Vector22(x, y);
        }
        static Lerp(start, end, amount) {
          const x = start.x + (end.x - start.x) * amount;
          const y = start.y + (end.y - start.y) * amount;
          return new Vector22(x, y);
        }
        static Dot(left, right) {
          return left.x * right.x + left.y * right.y;
        }
        static Normalize(vector) {
          const newVector = new Vector22(vector.x, vector.y);
          newVector.normalize();
          return newVector;
        }
        static Minimize(left, right) {
          const x = left.x < right.x ? left.x : right.x;
          const y = left.y < right.y ? left.y : right.y;
          return new Vector22(x, y);
        }
        static Maximize(left, right) {
          const x = left.x > right.x ? left.x : right.x;
          const y = left.y > right.y ? left.y : right.y;
          return new Vector22(x, y);
        }
        static Transform(vector, transformation) {
          const r = Vector22.Zero();
          Vector22.TransformToRef(vector, transformation, r);
          return r;
        }
        static TransformToRef(vector, transformation, result) {
          const m = transformation.m;
          const x = vector.x * m[0] + vector.y * m[4] + m[12];
          const y = vector.x * m[1] + vector.y * m[5] + m[13];
          result.x = x;
          result.y = y;
        }
        static PointInTriangle(p, p0, p1, p2) {
          const a = 1 / 2 * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);
          const sign = a < 0 ? -1 : 1;
          const s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;
          const t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;
          return s > 0 && t > 0 && s + t < 2 * a * sign;
        }
        static Distance(value1, value2) {
          return Math.sqrt(Vector22.DistanceSquared(value1, value2));
        }
        static DistanceSquared(value1, value2) {
          const x = value1.x - value2.x;
          const y = value1.y - value2.y;
          return x * x + y * y;
        }
        static Center(value1, value2) {
          const center = Vector22.Add(value1, value2);
          center.scaleInPlace(0.5);
          return center;
        }
        static DistanceOfPointFromSegment(p, segA, segB) {
          const l2 = Vector22.DistanceSquared(segA, segB);
          if (l2 === 0) {
            return Vector22.Distance(p, segA);
          }
          const v = segB.subtract(segA);
          const t = Math.max(0, Math.min(1, Vector22.Dot(p.subtract(segA), v) / l2));
          const proj = segA.add(v.multiplyByFloats(t, t));
          return Vector22.Distance(p, proj);
        }
        toString() {
          return "{X: " + this.x + " Y:" + this.y + "}";
        }
        getClassName() {
          return "Vector2";
        }
        getHashCode() {
          let hash = this.x || 0;
          hash = hash * 397 ^ (this.y || 0);
          return hash;
        }
        toArray(array, index = 0) {
          array[index] = this.x;
          array[index + 1] = this.y;
          return this;
        }
        asArray() {
          const result = new Array();
          this.toArray(result, 0);
          return result;
        }
        copyFrom(source) {
          this.x = source.x;
          this.y = source.y;
          return this;
        }
        copyFromFloats(x, y) {
          this.x = x;
          this.y = y;
          return this;
        }
        set(x, y) {
          return this.copyFromFloats(x, y);
        }
        add(otherVector) {
          return new Vector22(this.x + otherVector.x, this.y + otherVector.y);
        }
        addToRef(otherVector, result) {
          result.x = this.x + otherVector.x;
          result.y = this.y + otherVector.y;
          return this;
        }
        addInPlace(otherVector) {
          this.x += otherVector.x;
          this.y += otherVector.y;
          return this;
        }
        addVector3(otherVector) {
          return new Vector22(this.x + otherVector.x, this.y + otherVector.y);
        }
        subtract(otherVector) {
          return new Vector22(this.x - otherVector.x, this.y - otherVector.y);
        }
        subtractToRef(otherVector, result) {
          result.x = this.x - otherVector.x;
          result.y = this.y - otherVector.y;
          return this;
        }
        subtractInPlace(otherVector) {
          this.x -= otherVector.x;
          this.y -= otherVector.y;
          return this;
        }
        multiplyInPlace(otherVector) {
          this.x *= otherVector.x;
          this.y *= otherVector.y;
          return this;
        }
        multiply(otherVector) {
          return new Vector22(this.x * otherVector.x, this.y * otherVector.y);
        }
        multiplyToRef(otherVector, result) {
          result.x = this.x * otherVector.x;
          result.y = this.y * otherVector.y;
          return this;
        }
        multiplyByFloats(x, y) {
          return new Vector22(this.x * x, this.y * y);
        }
        divide(otherVector) {
          return new Vector22(this.x / otherVector.x, this.y / otherVector.y);
        }
        divideToRef(otherVector, result) {
          result.x = this.x / otherVector.x;
          result.y = this.y / otherVector.y;
          return this;
        }
        divideInPlace(otherVector) {
          return this.divideToRef(otherVector, this);
        }
        negate() {
          return new Vector22(-this.x, -this.y);
        }
        scaleInPlace(scale) {
          this.x *= scale;
          this.y *= scale;
          return this;
        }
        scale(scale) {
          const result = new Vector22(0, 0);
          this.scaleToRef(scale, result);
          return result;
        }
        scaleToRef(scale, result) {
          result.x = this.x * scale;
          result.y = this.y * scale;
          return this;
        }
        scaleAndAddToRef(scale, result) {
          result.x += this.x * scale;
          result.y += this.y * scale;
          return this;
        }
        equals(otherVector) {
          return otherVector && this.x === otherVector.x && this.y === otherVector.y;
        }
        equalsWithEpsilon(otherVector, epsilon = types_1.Epsilon) {
          return otherVector && Scalar_1.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar_1.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon);
        }
        floor() {
          return new Vector22(Math.floor(this.x), Math.floor(this.y));
        }
        fract() {
          return new Vector22(this.x - Math.floor(this.x), this.y - Math.floor(this.y));
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        }
        lengthSquared() {
          return this.x * this.x + this.y * this.y;
        }
        normalize() {
          const len = this.length();
          if (len === 0) {
            return this;
          }
          const num = 1 / len;
          this.x *= num;
          this.y *= num;
          return this;
        }
        clone() {
          return new Vector22(this.x, this.y);
        }
      };
      exports2.Vector2 = Vector22;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Arc2.js
  var require_Arc2 = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Arc2.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Arc2 = void 0;
      var Angle_1 = require_Angle();
      var Vector2_1 = require_Vector2();
      var types_1 = require_types2();
      var Arc2 = class {
        constructor(startPoint, midPoint, endPoint) {
          this.startPoint = startPoint;
          this.midPoint = midPoint;
          this.endPoint = endPoint;
          const temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);
          const startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;
          const midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;
          const det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) - (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);
          this.centerPoint = new Vector2_1.Vector2((startToMid * (midPoint.y - endPoint.y) - midToEnd * (startPoint.y - midPoint.y)) / det, ((startPoint.x - midPoint.x) * midToEnd - (midPoint.x - endPoint.x) * startToMid) / det);
          this.radius = this.centerPoint.subtract(this.startPoint).length();
          this.startAngle = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);
          const a1 = this.startAngle.degrees();
          let a2 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();
          let a3 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();
          if (a2 - a1 > 180) {
            a2 -= 360;
          }
          if (a2 - a1 < -180) {
            a2 += 360;
          }
          if (a3 - a2 > 180) {
            a3 -= 360;
          }
          if (a3 - a2 < -180) {
            a3 += 360;
          }
          this.orientation = a2 - a1 < 0 ? types_1.Orientation.CW : types_1.Orientation.CCW;
          this.angle = Angle_1.Angle.FromDegrees(this.orientation === types_1.Orientation.CW ? a1 - a3 : a3 - a1);
        }
      };
      exports2.Arc2 = Arc2;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Axis.js
  var require_Axis = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Axis.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Axis = void 0;
      var Vector3_1 = require_Vector3();
      var Axis = class {
      };
      exports2.Axis = Axis;
      Axis.X = new Vector3_1.Vector3(1, 0, 0);
      Axis.Y = new Vector3_1.Vector3(0, 1, 0);
      Axis.Z = new Vector3_1.Vector3(0, 0, 1);
    }
  });

  // node_modules/@dcl/ecs-math/dist/BezierCurve.js
  var require_BezierCurve = __commonJS({
    "node_modules/@dcl/ecs-math/dist/BezierCurve.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.BezierCurve = void 0;
      var BezierCurve = class {
        static Interpolate(t, x1, y1, x2, y2) {
          const f0 = 1 - 3 * x2 + 3 * x1;
          const f1 = 3 * x2 - 6 * x1;
          const f2 = 3 * x1;
          let refinedT = t;
          for (let i = 0; i < 5; i++) {
            const refinedT2 = refinedT * refinedT;
            const refinedT3 = refinedT2 * refinedT;
            const x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;
            const slope = 1 / (3 * f0 * refinedT2 + 2 * f1 * refinedT + f2);
            refinedT -= (x - t) * slope;
            refinedT = Math.min(1, Math.max(0, refinedT));
          }
          return 3 * Math.pow(1 - refinedT, 2) * refinedT * y1 + 3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 + Math.pow(refinedT, 3);
        }
      };
      exports2.BezierCurve = BezierCurve;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Color4.js
  var require_Color4 = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Color4.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Color4 = void 0;
      var Scalar_1 = require_Scalar();
      var types_1 = require_types2();
      var Color4 = class {
        constructor(r = 0, g = 0, b = 0, a = 1) {
          this.r = r;
          this.g = g;
          this.b = b;
          this.a = a;
        }
        static FromHexString(hex) {
          if (hex.substring(0, 1) !== "#" || hex.length !== 9) {
            return new Color4(0, 0, 0, 0);
          }
          const r = parseInt(hex.substring(1, 3), 16);
          const g = parseInt(hex.substring(3, 5), 16);
          const b = parseInt(hex.substring(5, 7), 16);
          const a = parseInt(hex.substring(7, 9), 16);
          return Color4.FromInts(r, g, b, a);
        }
        static Lerp(left, right, amount) {
          const result = new Color4(0, 0, 0, 0);
          Color4.LerpToRef(left, right, amount, result);
          return result;
        }
        static LerpToRef(left, right, amount, result) {
          result.r = left.r + (right.r - left.r) * amount;
          result.g = left.g + (right.g - left.g) * amount;
          result.b = left.b + (right.b - left.b) * amount;
          result.a = left.a + (right.a - left.a) * amount;
        }
        static Red() {
          return new Color4(1, 0, 0, 1);
        }
        static Green() {
          return new Color4(0, 1, 0, 1);
        }
        static Blue() {
          return new Color4(0, 0, 1, 1);
        }
        static Black() {
          return new Color4(0, 0, 0, 1);
        }
        static White() {
          return new Color4(1, 1, 1, 1);
        }
        static Purple() {
          return new Color4(0.5, 0, 0.5, 1);
        }
        static Magenta() {
          return new Color4(1, 0, 1, 1);
        }
        static Yellow() {
          return new Color4(1, 1, 0, 1);
        }
        static Gray() {
          return new Color4(0.5, 0.5, 0.5, 1);
        }
        static Teal() {
          return new Color4(0, 1, 1, 1);
        }
        static Clear() {
          return new Color4(0, 0, 0, 0);
        }
        static FromColor3(color3, alpha = 1) {
          return new Color4(color3.r, color3.g, color3.b, alpha);
        }
        static FromArray(array, offset = 0) {
          return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);
        }
        static FromInts(r, g, b, a) {
          return new Color4(r / 255, g / 255, b / 255, a / 255);
        }
        static CheckColors4(colors, count) {
          if (colors.length === count * 3) {
            const colors4 = [];
            for (let index = 0; index < colors.length; index += 3) {
              const newIndex = index / 3 * 4;
              colors4[newIndex] = colors[index];
              colors4[newIndex + 1] = colors[index + 1];
              colors4[newIndex + 2] = colors[index + 2];
              colors4[newIndex + 3] = 1;
            }
            return colors4;
          }
          return colors;
        }
        addInPlace(right) {
          this.r += right.r;
          this.g += right.g;
          this.b += right.b;
          this.a += right.a;
          return this;
        }
        asArray() {
          const result = new Array();
          this.toArray(result, 0);
          return result;
        }
        toArray(array, index = 0) {
          array[index] = this.r;
          array[index + 1] = this.g;
          array[index + 2] = this.b;
          array[index + 3] = this.a;
          return this;
        }
        add(right) {
          return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);
        }
        subtract(right) {
          return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);
        }
        subtractToRef(right, result) {
          result.r = this.r - right.r;
          result.g = this.g - right.g;
          result.b = this.b - right.b;
          result.a = this.a - right.a;
          return this;
        }
        scale(scale) {
          return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);
        }
        scaleToRef(scale, result) {
          result.r = this.r * scale;
          result.g = this.g * scale;
          result.b = this.b * scale;
          result.a = this.a * scale;
          return this;
        }
        scaleAndAddToRef(scale, result) {
          result.r += this.r * scale;
          result.g += this.g * scale;
          result.b += this.b * scale;
          result.a += this.a * scale;
          return this;
        }
        clampToRef(min = 0, max = 1, result) {
          result.r = Scalar_1.Scalar.Clamp(this.r, min, max);
          result.g = Scalar_1.Scalar.Clamp(this.g, min, max);
          result.b = Scalar_1.Scalar.Clamp(this.b, min, max);
          result.a = Scalar_1.Scalar.Clamp(this.a, min, max);
          return this;
        }
        multiply(color) {
          return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);
        }
        multiplyToRef(color, result) {
          result.r = this.r * color.r;
          result.g = this.g * color.g;
          result.b = this.b * color.b;
          result.a = this.a * color.a;
          return result;
        }
        toString() {
          return "{R: " + this.r + " G:" + this.g + " B:" + this.b + " A:" + this.a + "}";
        }
        getClassName() {
          return "Color4";
        }
        getHashCode() {
          let hash = this.r || 0;
          hash = hash * 397 ^ (this.g || 0);
          hash = hash * 397 ^ (this.b || 0);
          hash = hash * 397 ^ (this.a || 0);
          return hash;
        }
        clone() {
          return new Color4(this.r, this.g, this.b, this.a);
        }
        copyFrom(source) {
          this.r = source.r;
          this.g = source.g;
          this.b = source.b;
          this.a = source.a;
          return this;
        }
        copyFromFloats(r, g, b, a) {
          this.r = r;
          this.g = g;
          this.b = b;
          this.a = a;
          return this;
        }
        set(r, g, b, a) {
          return this.copyFromFloats(r, g, b, a);
        }
        toHexString() {
          const intR = this.r * 255 | 0;
          const intG = this.g * 255 | 0;
          const intB = this.b * 255 | 0;
          const intA = this.a * 255 | 0;
          return "#" + Scalar_1.Scalar.ToHex(intR) + Scalar_1.Scalar.ToHex(intG) + Scalar_1.Scalar.ToHex(intB) + Scalar_1.Scalar.ToHex(intA);
        }
        toLinearSpace() {
          const convertedColor = new Color4();
          this.toLinearSpaceToRef(convertedColor);
          return convertedColor;
        }
        toLinearSpaceToRef(convertedColor) {
          convertedColor.r = Math.pow(this.r, types_1.ToLinearSpace);
          convertedColor.g = Math.pow(this.g, types_1.ToLinearSpace);
          convertedColor.b = Math.pow(this.b, types_1.ToLinearSpace);
          convertedColor.a = this.a;
          return this;
        }
        toGammaSpace() {
          const convertedColor = new Color4();
          this.toGammaSpaceToRef(convertedColor);
          return convertedColor;
        }
        toGammaSpaceToRef(convertedColor) {
          convertedColor.r = Math.pow(this.r, types_1.ToGammaSpace);
          convertedColor.g = Math.pow(this.g, types_1.ToGammaSpace);
          convertedColor.b = Math.pow(this.b, types_1.ToGammaSpace);
          convertedColor.a = this.a;
          return this;
        }
      };
      exports2.Color4 = Color4;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Color3.js
  var require_Color3 = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Color3.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Color3 = void 0;
      var types_1 = require_types2();
      var Color4_1 = require_Color4();
      var Scalar_1 = require_Scalar();
      var Color3 = class {
        constructor(r = 0, g = 0, b = 0) {
          this.r = r;
          this.g = g;
          this.b = b;
        }
        static FromHexString(hex) {
          if (hex.substring(0, 1) !== "#" || hex.length !== 7) {
            return new Color3(0, 0, 0);
          }
          const r = parseInt(hex.substring(1, 3), 16);
          const g = parseInt(hex.substring(3, 5), 16);
          const b = parseInt(hex.substring(5, 7), 16);
          return Color3.FromInts(r, g, b);
        }
        static FromArray(array, offset = 0) {
          return new Color3(array[offset], array[offset + 1], array[offset + 2]);
        }
        static FromInts(r, g, b) {
          return new Color3(r / 255, g / 255, b / 255);
        }
        static Lerp(start, end, amount) {
          const result = new Color3(0, 0, 0);
          Color3.LerpToRef(start, end, amount, result);
          return result;
        }
        static LerpToRef(left, right, amount, result) {
          result.r = left.r + (right.r - left.r) * amount;
          result.g = left.g + (right.g - left.g) * amount;
          result.b = left.b + (right.b - left.b) * amount;
        }
        static Red() {
          return new Color3(1, 0, 0);
        }
        static Green() {
          return new Color3(0, 1, 0);
        }
        static Blue() {
          return new Color3(0, 0, 1);
        }
        static Black() {
          return new Color3(0, 0, 0);
        }
        static White() {
          return new Color3(1, 1, 1);
        }
        static Purple() {
          return new Color3(0.5, 0, 0.5);
        }
        static Magenta() {
          return new Color3(1, 0, 1);
        }
        static Yellow() {
          return new Color3(1, 1, 0);
        }
        static Gray() {
          return new Color3(0.5, 0.5, 0.5);
        }
        static Teal() {
          return new Color3(0, 1, 1);
        }
        static Random() {
          return new Color3(Math.random(), Math.random(), Math.random());
        }
        toString() {
          return "{R: " + this.r + " G:" + this.g + " B:" + this.b + "}";
        }
        getClassName() {
          return "Color3";
        }
        getHashCode() {
          let hash = this.r || 0;
          hash = hash * 397 ^ (this.g || 0);
          hash = hash * 397 ^ (this.b || 0);
          return hash;
        }
        toArray(array, index = 0) {
          array[index] = this.r;
          array[index + 1] = this.g;
          array[index + 2] = this.b;
          return this;
        }
        toColor4(alpha = 1) {
          return new Color4_1.Color4(this.r, this.g, this.b, alpha);
        }
        asArray() {
          const result = new Array();
          this.toArray(result, 0);
          return result;
        }
        toLuminance() {
          return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;
        }
        multiply(otherColor) {
          return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);
        }
        multiplyToRef(otherColor, result) {
          result.r = this.r * otherColor.r;
          result.g = this.g * otherColor.g;
          result.b = this.b * otherColor.b;
          return this;
        }
        equals(otherColor) {
          return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b;
        }
        equalsFloats(r, g, b) {
          return this.r === r && this.g === g && this.b === b;
        }
        scale(scale) {
          return new Color3(this.r * scale, this.g * scale, this.b * scale);
        }
        scaleToRef(scale, result) {
          result.r = this.r * scale;
          result.g = this.g * scale;
          result.b = this.b * scale;
          return this;
        }
        scaleAndAddToRef(scale, result) {
          result.r += this.r * scale;
          result.g += this.g * scale;
          result.b += this.b * scale;
          return this;
        }
        clampToRef(min = 0, max = 1, result) {
          result.r = Scalar_1.Scalar.Clamp(this.r, min, max);
          result.g = Scalar_1.Scalar.Clamp(this.g, min, max);
          result.b = Scalar_1.Scalar.Clamp(this.b, min, max);
          return this;
        }
        add(otherColor) {
          return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);
        }
        addToRef(otherColor, result) {
          result.r = this.r + otherColor.r;
          result.g = this.g + otherColor.g;
          result.b = this.b + otherColor.b;
          return this;
        }
        subtract(otherColor) {
          return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);
        }
        subtractToRef(otherColor, result) {
          result.r = this.r - otherColor.r;
          result.g = this.g - otherColor.g;
          result.b = this.b - otherColor.b;
          return this;
        }
        clone() {
          return new Color3(this.r, this.g, this.b);
        }
        copyFrom(source) {
          this.r = source.r;
          this.g = source.g;
          this.b = source.b;
          return this;
        }
        copyFromFloats(r, g, b) {
          this.r = r;
          this.g = g;
          this.b = b;
          return this;
        }
        set(r, g, b) {
          return this.copyFromFloats(r, g, b);
        }
        toHexString() {
          const intR = this.r * 255 | 0;
          const intG = this.g * 255 | 0;
          const intB = this.b * 255 | 0;
          return "#" + Scalar_1.Scalar.ToHex(intR) + Scalar_1.Scalar.ToHex(intG) + Scalar_1.Scalar.ToHex(intB);
        }
        toLinearSpace() {
          const convertedColor = new Color3();
          this.toLinearSpaceToRef(convertedColor);
          return convertedColor;
        }
        toLinearSpaceToRef(convertedColor) {
          convertedColor.r = Math.pow(this.r, types_1.ToLinearSpace);
          convertedColor.g = Math.pow(this.g, types_1.ToLinearSpace);
          convertedColor.b = Math.pow(this.b, types_1.ToLinearSpace);
          return this;
        }
        toGammaSpace() {
          const convertedColor = new Color3();
          this.toGammaSpaceToRef(convertedColor);
          return convertedColor;
        }
        toGammaSpaceToRef(convertedColor) {
          convertedColor.r = Math.pow(this.r, types_1.ToGammaSpace);
          convertedColor.g = Math.pow(this.g, types_1.ToGammaSpace);
          convertedColor.b = Math.pow(this.b, types_1.ToGammaSpace);
          return this;
        }
        toJSON() {
          return {
            r: this.r,
            g: this.g,
            b: this.b
          };
        }
      };
      exports2.Color3 = Color3;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Curve3d.js
  var require_Curve3d = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Curve3d.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Curve3 = void 0;
      var Vector3_1 = require_Vector3();
      var Curve3 = class {
        constructor(points) {
          this._length = 0;
          this._points = points;
          this._length = this._computeLength(points);
        }
        static CreateQuadraticBezier(v0, v1, v2, nbPoints) {
          nbPoints = nbPoints > 2 ? nbPoints : 3;
          const bez = new Array();
          const equation = (t, val0, val1, val2) => {
            const res = (1 - t) * (1 - t) * val0 + 2 * t * (1 - t) * val1 + t * t * val2;
            return res;
          };
          for (let i = 0; i <= nbPoints; i++) {
            bez.push(new Vector3_1.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));
          }
          return new Curve3(bez);
        }
        static CreateCubicBezier(v0, v1, v2, v3, nbPoints) {
          nbPoints = nbPoints > 3 ? nbPoints : 4;
          const bez = new Array();
          const equation = (t, val0, val1, val2, val3) => {
            const res = (1 - t) * (1 - t) * (1 - t) * val0 + 3 * t * (1 - t) * (1 - t) * val1 + 3 * t * t * (1 - t) * val2 + t * t * t * val3;
            return res;
          };
          for (let i = 0; i <= nbPoints; i++) {
            bez.push(new Vector3_1.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));
          }
          return new Curve3(bez);
        }
        static CreateHermiteSpline(p1, t1, p2, t2, nbPoints) {
          const hermite = new Array();
          const step = 1 / nbPoints;
          for (let i = 0; i <= nbPoints; i++) {
            hermite.push(Vector3_1.Vector3.Hermite(p1, t1, p2, t2, i * step));
          }
          return new Curve3(hermite);
        }
        static CreateCatmullRomSpline(points, nbPoints, closed) {
          const catmullRom = new Array();
          const step = 1 / nbPoints;
          let amount = 0;
          if (closed) {
            const pointsCount = points.length;
            for (let i = 0; i < pointsCount; i++) {
              amount = 0;
              for (let c = 0; c < nbPoints; c++) {
                catmullRom.push(Vector3_1.Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount));
                amount += step;
              }
            }
            catmullRom.push(catmullRom[0]);
          } else {
            const totalPoints = new Array();
            totalPoints.push(points[0].clone());
            Array.prototype.push.apply(totalPoints, points);
            totalPoints.push(points[points.length - 1].clone());
            let i = 0;
            for (i = 0; i < totalPoints.length - 3; i++) {
              amount = 0;
              for (let c = 0; c < nbPoints; c++) {
                catmullRom.push(Vector3_1.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));
                amount += step;
              }
            }
            i--;
            catmullRom.push(Vector3_1.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));
          }
          return new Curve3(catmullRom);
        }
        getPoints() {
          return this._points;
        }
        length() {
          return this._length;
        }
        continue(curve) {
          const lastPoint = this._points[this._points.length - 1];
          const continuedPoints = this._points.slice();
          const curvePoints = curve.getPoints();
          for (let i = 1; i < curvePoints.length; i++) {
            continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));
          }
          const continuedCurve = new Curve3(continuedPoints);
          return continuedCurve;
        }
        _computeLength(path) {
          let l = 0;
          for (let i = 1; i < path.length; i++) {
            l += path[i].subtract(path[i - 1]).length();
          }
          return l;
        }
      };
      exports2.Curve3 = Curve3;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Plane.js
  var require_Plane = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Plane.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Plane = void 0;
      var Vector3_1 = require_Vector3();
      var Matrix_1 = require_Matrix();
      var preallocatedVariables_1 = require_preallocatedVariables();
      var Plane = class {
        constructor(a, b, c, d) {
          this.normal = new Vector3_1.Vector3(a, b, c);
          this.d = d;
        }
        static FromArray(array) {
          return new Plane(array[0], array[1], array[2], array[3]);
        }
        static FromPoints(point1, point2, point3) {
          const result = new Plane(0, 0, 0, 0);
          result.copyFromPoints(point1, point2, point3);
          return result;
        }
        static FromPositionAndNormal(origin, normal) {
          const result = new Plane(0, 0, 0, 0);
          normal.normalize();
          result.normal = normal;
          result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);
          return result;
        }
        static SignedDistanceToPlaneFromPositionAndNormal(origin, normal, point) {
          const d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);
          return Vector3_1.Vector3.Dot(point, normal) + d;
        }
        asArray() {
          return [this.normal.x, this.normal.y, this.normal.z, this.d];
        }
        clone() {
          return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);
        }
        getClassName() {
          return "Plane";
        }
        getHashCode() {
          let hash = this.normal.getHashCode();
          hash = hash * 397 ^ (this.d || 0);
          return hash;
        }
        normalize() {
          const norm = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z);
          let magnitude = 0;
          if (norm !== 0) {
            magnitude = 1 / norm;
          }
          this.normal.x *= magnitude;
          this.normal.y *= magnitude;
          this.normal.z *= magnitude;
          this.d *= magnitude;
          return this;
        }
        transform(transformation) {
          const transposedMatrix = preallocatedVariables_1.MathTmp.Matrix[0];
          Matrix_1.Matrix.TransposeToRef(transformation, transposedMatrix);
          const m = transposedMatrix.m;
          const x = this.normal.x;
          const y = this.normal.y;
          const z = this.normal.z;
          const d = this.d;
          const normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];
          const normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];
          const normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];
          const finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];
          return new Plane(normalX, normalY, normalZ, finalD);
        }
        dotCoordinate(point) {
          return this.normal.x * point.x + this.normal.y * point.y + this.normal.z * point.z + this.d;
        }
        copyFromPoints(point1, point2, point3) {
          const x1 = point2.x - point1.x;
          const y1 = point2.y - point1.y;
          const z1 = point2.z - point1.z;
          const x2 = point3.x - point1.x;
          const y2 = point3.y - point1.y;
          const z2 = point3.z - point1.z;
          const yz = y1 * z2 - z1 * y2;
          const xz = z1 * x2 - x1 * z2;
          const xy = x1 * y2 - y1 * x2;
          const pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);
          let invPyth;
          if (pyth !== 0) {
            invPyth = 1 / pyth;
          } else {
            invPyth = 0;
          }
          this.normal.x = yz * invPyth;
          this.normal.y = xz * invPyth;
          this.normal.z = xy * invPyth;
          this.d = -(this.normal.x * point1.x + this.normal.y * point1.y + this.normal.z * point1.z);
          return this;
        }
        isFrontFacingTo(direction, epsilon) {
          const dot = Vector3_1.Vector3.Dot(this.normal, direction);
          return dot <= epsilon;
        }
        signedDistanceTo(point) {
          return Vector3_1.Vector3.Dot(point, this.normal) + this.d;
        }
      };
      exports2.Plane = Plane;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Furstum.js
  var require_Furstum = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Furstum.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Frustum = void 0;
      var Plane_1 = require_Plane();
      var Frustum = class {
        static GetPlanes(transform) {
          const frustumPlanes = [];
          for (let index = 0; index < 6; index++) {
            frustumPlanes.push(new Plane_1.Plane(0, 0, 0, 0));
          }
          Frustum.GetPlanesToRef(transform, frustumPlanes);
          return frustumPlanes;
        }
        static GetNearPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] + m[2];
          frustumPlane.normal.y = m[7] + m[6];
          frustumPlane.normal.z = m[11] + m[10];
          frustumPlane.d = m[15] + m[14];
          frustumPlane.normalize();
        }
        static GetFarPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] - m[2];
          frustumPlane.normal.y = m[7] - m[6];
          frustumPlane.normal.z = m[11] - m[10];
          frustumPlane.d = m[15] - m[14];
          frustumPlane.normalize();
        }
        static GetLeftPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] + m[0];
          frustumPlane.normal.y = m[7] + m[4];
          frustumPlane.normal.z = m[11] + m[8];
          frustumPlane.d = m[15] + m[12];
          frustumPlane.normalize();
        }
        static GetRightPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] - m[0];
          frustumPlane.normal.y = m[7] - m[4];
          frustumPlane.normal.z = m[11] - m[8];
          frustumPlane.d = m[15] - m[12];
          frustumPlane.normalize();
        }
        static GetTopPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] - m[1];
          frustumPlane.normal.y = m[7] - m[5];
          frustumPlane.normal.z = m[11] - m[9];
          frustumPlane.d = m[15] - m[13];
          frustumPlane.normalize();
        }
        static GetBottomPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] + m[1];
          frustumPlane.normal.y = m[7] + m[5];
          frustumPlane.normal.z = m[11] + m[9];
          frustumPlane.d = m[15] + m[13];
          frustumPlane.normalize();
        }
        static GetPlanesToRef(transform, frustumPlanes) {
          Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);
          Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);
          Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);
          Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);
          Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);
          Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);
        }
      };
      exports2.Frustum = Frustum;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Path2d.js
  var require_Path2d = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Path2d.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Path2 = void 0;
      var Vector2_1 = require_Vector2();
      var Arc2_1 = require_Arc2();
      var types_1 = require_types2();
      var Path2 = class {
        constructor(x, y) {
          this.closed = false;
          this._points = new Array();
          this._length = 0;
          this._points.push(new Vector2_1.Vector2(x, y));
        }
        static StartingAt(x, y) {
          return new Path2(x, y);
        }
        addLineTo(x, y) {
          if (this.closed) {
            return this;
          }
          const newPoint = new Vector2_1.Vector2(x, y);
          const previousPoint = this._points[this._points.length - 1];
          this._points.push(newPoint);
          this._length += newPoint.subtract(previousPoint).length();
          return this;
        }
        addArcTo(midX, midY, endX, endY, numberOfSegments = 36) {
          if (this.closed) {
            return this;
          }
          const startPoint = this._points[this._points.length - 1];
          const midPoint = new Vector2_1.Vector2(midX, midY);
          const endPoint = new Vector2_1.Vector2(endX, endY);
          const arc = new Arc2_1.Arc2(startPoint, midPoint, endPoint);
          let increment = arc.angle.radians() / numberOfSegments;
          if (arc.orientation === types_1.Orientation.CW) {
            increment *= -1;
          }
          let currentAngle = arc.startAngle.radians() + increment;
          for (let i = 0; i < numberOfSegments; i++) {
            const x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;
            const y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;
            this.addLineTo(x, y);
            currentAngle += increment;
          }
          return this;
        }
        close() {
          this.closed = true;
          return this;
        }
        length() {
          let result = this._length;
          if (!this.closed) {
            const lastPoint = this._points[this._points.length - 1];
            const firstPoint = this._points[0];
            result += firstPoint.subtract(lastPoint).length();
          }
          return result;
        }
        getPoints() {
          return this._points;
        }
        getPointAtLengthPosition(normalizedLengthPosition) {
          if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {
            return Vector2_1.Vector2.Zero();
          }
          const lengthPosition = normalizedLengthPosition * this.length();
          let previousOffset = 0;
          for (let i = 0; i < this._points.length; i++) {
            const j = (i + 1) % this._points.length;
            const a = this._points[i];
            const b = this._points[j];
            const bToA = b.subtract(a);
            const nextOffset = bToA.length() + previousOffset;
            if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {
              const dir = bToA.normalize();
              const localOffset = lengthPosition - previousOffset;
              return new Vector2_1.Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);
            }
            previousOffset = nextOffset;
          }
          return Vector2_1.Vector2.Zero();
        }
      };
      exports2.Path2 = Path2;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Path3d.js
  var require_Path3d = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Path3d.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Path3D = void 0;
      var Vector3_1 = require_Vector3();
      var types_1 = require_types2();
      var Scalar_1 = require_Scalar();
      var Path3D = class {
        constructor(path, firstNormal = null, raw) {
          this.path = path;
          this._curve = new Array();
          this._distances = new Array();
          this._tangents = new Array();
          this._normals = new Array();
          this._binormals = new Array();
          for (let p = 0; p < path.length; p++) {
            this._curve[p] = path[p].clone();
          }
          this._raw = raw || false;
          this._compute(firstNormal);
        }
        getCurve() {
          return this._curve;
        }
        getTangents() {
          return this._tangents;
        }
        getNormals() {
          return this._normals;
        }
        getBinormals() {
          return this._binormals;
        }
        getDistances() {
          return this._distances;
        }
        update(path, firstNormal = null) {
          for (let p = 0; p < path.length; p++) {
            this._curve[p].x = path[p].x;
            this._curve[p].y = path[p].y;
            this._curve[p].z = path[p].z;
          }
          this._compute(firstNormal);
          return this;
        }
        _compute(firstNormal) {
          const l = this._curve.length;
          this._tangents[0] = this._getFirstNonNullVector(0);
          if (!this._raw) {
            this._tangents[0].normalize();
          }
          this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);
          if (!this._raw) {
            this._tangents[l - 1].normalize();
          }
          const tg0 = this._tangents[0];
          const pp0 = this._normalVector(this._curve[0], tg0, firstNormal);
          this._normals[0] = pp0;
          if (!this._raw) {
            this._normals[0].normalize();
          }
          this._binormals[0] = Vector3_1.Vector3.Cross(tg0, this._normals[0]);
          if (!this._raw) {
            this._binormals[0].normalize();
          }
          this._distances[0] = 0;
          let prev;
          let cur;
          let curTang;
          let prevBinor;
          for (let i = 1; i < l; i++) {
            prev = this._getLastNonNullVector(i);
            if (i < l - 1) {
              cur = this._getFirstNonNullVector(i);
              this._tangents[i] = prev.add(cur);
              this._tangents[i].normalize();
            }
            this._distances[i] = this._distances[i - 1] + prev.length();
            curTang = this._tangents[i];
            prevBinor = this._binormals[i - 1];
            this._normals[i] = Vector3_1.Vector3.Cross(prevBinor, curTang);
            if (!this._raw) {
              this._normals[i].normalize();
            }
            this._binormals[i] = Vector3_1.Vector3.Cross(curTang, this._normals[i]);
            if (!this._raw) {
              this._binormals[i].normalize();
            }
          }
        }
        _getFirstNonNullVector(index) {
          let i = 1;
          let nNVector = this._curve[index + i].subtract(this._curve[index]);
          while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {
            i++;
            nNVector = this._curve[index + i].subtract(this._curve[index]);
          }
          return nNVector;
        }
        _getLastNonNullVector(index) {
          let i = 1;
          let nLVector = this._curve[index].subtract(this._curve[index - i]);
          while (nLVector.length() === 0 && index > i + 1) {
            i++;
            nLVector = this._curve[index].subtract(this._curve[index - i]);
          }
          return nLVector;
        }
        _normalVector(v0, vt, va) {
          let normal0;
          let tgl = vt.length();
          if (tgl === 0) {
            tgl = 1;
          }
          if (va === void 0 || va === null) {
            let point;
            if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1, types_1.Epsilon)) {
              point = new Vector3_1.Vector3(0, -1, 0);
            } else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1, types_1.Epsilon)) {
              point = new Vector3_1.Vector3(1, 0, 0);
            } else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1, types_1.Epsilon)) {
              point = new Vector3_1.Vector3(0, 0, 1);
            } else {
              point = Vector3_1.Vector3.Zero();
            }
            normal0 = Vector3_1.Vector3.Cross(vt, point);
          } else {
            normal0 = Vector3_1.Vector3.Cross(vt, va);
            Vector3_1.Vector3.CrossToRef(normal0, vt, normal0);
          }
          normal0.normalize();
          return normal0;
        }
      };
      exports2.Path3D = Path3D;
    }
  });

  // node_modules/@dcl/ecs-math/dist/Size.js
  var require_Size = __commonJS({
    "node_modules/@dcl/ecs-math/dist/Size.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      exports2.Size = void 0;
      var Size = class {
        constructor(width, height) {
          this.width = width;
          this.height = height;
        }
        get surface() {
          return this.width * this.height;
        }
        static Zero() {
          return new Size(0, 0);
        }
        static Lerp(start, end, amount) {
          const w = start.width + (end.width - start.width) * amount;
          const h = start.height + (end.height - start.height) * amount;
          return new Size(w, h);
        }
        toString() {
          return `{W: ${this.width}, H: ${this.height}}`;
        }
        getClassName() {
          return "Size";
        }
        getHashCode() {
          let hash = this.width || 0;
          hash = hash * 397 ^ (this.height || 0);
          return hash;
        }
        copyFrom(src) {
          this.width = src.width;
          this.height = src.height;
        }
        copyFromFloats(width, height) {
          this.width = width;
          this.height = height;
          return this;
        }
        set(width, height) {
          return this.copyFromFloats(width, height);
        }
        multiplyByFloats(w, h) {
          return new Size(this.width * w, this.height * h);
        }
        clone() {
          return new Size(this.width, this.height);
        }
        equals(other) {
          if (!other) {
            return false;
          }
          return this.width === other.width && this.height === other.height;
        }
        add(otherSize) {
          const r = new Size(this.width + otherSize.width, this.height + otherSize.height);
          return r;
        }
        subtract(otherSize) {
          const r = new Size(this.width - otherSize.width, this.height - otherSize.height);
          return r;
        }
      };
      exports2.Size = Size;
    }
  });

  // node_modules/@dcl/ecs-math/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/@dcl/ecs-math/dist/index.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, {enumerable: true, get: function() {
          return m[k];
        }});
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
            __createBinding(exports3, m, p);
      };
      Object.defineProperty(exports2, "__esModule", {value: true});
      __exportStar(require_types2(), exports2);
      __exportStar(require_preallocatedVariables(), exports2);
      __exportStar(require_Angle(), exports2);
      __exportStar(require_Arc2(), exports2);
      __exportStar(require_Axis(), exports2);
      __exportStar(require_BezierCurve(), exports2);
      __exportStar(require_Color3(), exports2);
      __exportStar(require_Color4(), exports2);
      __exportStar(require_Curve3d(), exports2);
      __exportStar(require_Furstum(), exports2);
      __exportStar(require_Matrix(), exports2);
      __exportStar(require_Path2d(), exports2);
      __exportStar(require_Path3d(), exports2);
      __exportStar(require_Plane(), exports2);
      __exportStar(require_Quaternion(), exports2);
      __exportStar(require_Scalar(), exports2);
      __exportStar(require_Size(), exports2);
      __exportStar(require_Vector2(), exports2);
      __exportStar(require_Vector3(), exports2);
      __exportStar(require_Vector4(), exports2);
      __exportStar(require_dist2(), exports2);
    }
  });

  // node_modules/long/src/long.js
  var require_long = __commonJS({
    "node_modules/long/src/long.js"(exports2, module2) {
      init_web_worker_inject();
      module2.exports = Long2;
      var wasm = null;
      try {
        wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
          0,
          97,
          115,
          109,
          1,
          0,
          0,
          0,
          1,
          13,
          2,
          96,
          0,
          1,
          127,
          96,
          4,
          127,
          127,
          127,
          127,
          1,
          127,
          3,
          7,
          6,
          0,
          1,
          1,
          1,
          1,
          1,
          6,
          6,
          1,
          127,
          1,
          65,
          0,
          11,
          7,
          50,
          6,
          3,
          109,
          117,
          108,
          0,
          1,
          5,
          100,
          105,
          118,
          95,
          115,
          0,
          2,
          5,
          100,
          105,
          118,
          95,
          117,
          0,
          3,
          5,
          114,
          101,
          109,
          95,
          115,
          0,
          4,
          5,
          114,
          101,
          109,
          95,
          117,
          0,
          5,
          8,
          103,
          101,
          116,
          95,
          104,
          105,
          103,
          104,
          0,
          0,
          10,
          191,
          1,
          6,
          4,
          0,
          35,
          0,
          11,
          36,
          1,
          1,
          126,
          32,
          0,
          173,
          32,
          1,
          173,
          66,
          32,
          134,
          132,
          32,
          2,
          173,
          32,
          3,
          173,
          66,
          32,
          134,
          132,
          126,
          34,
          4,
          66,
          32,
          135,
          167,
          36,
          0,
          32,
          4,
          167,
          11,
          36,
          1,
          1,
          126,
          32,
          0,
          173,
          32,
          1,
          173,
          66,
          32,
          134,
          132,
          32,
          2,
          173,
          32,
          3,
          173,
          66,
          32,
          134,
          132,
          127,
          34,
          4,
          66,
          32,
          135,
          167,
          36,
          0,
          32,
          4,
          167,
          11,
          36,
          1,
          1,
          126,
          32,
          0,
          173,
          32,
          1,
          173,
          66,
          32,
          134,
          132,
          32,
          2,
          173,
          32,
          3,
          173,
          66,
          32,
          134,
          132,
          128,
          34,
          4,
          66,
          32,
          135,
          167,
          36,
          0,
          32,
          4,
          167,
          11,
          36,
          1,
          1,
          126,
          32,
          0,
          173,
          32,
          1,
          173,
          66,
          32,
          134,
          132,
          32,
          2,
          173,
          32,
          3,
          173,
          66,
          32,
          134,
          132,
          129,
          34,
          4,
          66,
          32,
          135,
          167,
          36,
          0,
          32,
          4,
          167,
          11,
          36,
          1,
          1,
          126,
          32,
          0,
          173,
          32,
          1,
          173,
          66,
          32,
          134,
          132,
          32,
          2,
          173,
          32,
          3,
          173,
          66,
          32,
          134,
          132,
          130,
          34,
          4,
          66,
          32,
          135,
          167,
          36,
          0,
          32,
          4,
          167,
          11
        ])), {}).exports;
      } catch (e) {
      }
      function Long2(low, high, unsigned) {
        this.low = low | 0;
        this.high = high | 0;
        this.unsigned = !!unsigned;
      }
      Long2.prototype.__isLong__;
      Object.defineProperty(Long2.prototype, "__isLong__", {value: true});
      function isLong(obj) {
        return (obj && obj["__isLong__"]) === true;
      }
      Long2.isLong = isLong;
      var INT_CACHE = {};
      var UINT_CACHE = {};
      function fromInt(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
          value >>>= 0;
          if (cache = 0 <= value && value < 256) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
              return cachedObj;
          }
          obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
          if (cache)
            UINT_CACHE[value] = obj;
          return obj;
        } else {
          value |= 0;
          if (cache = -128 <= value && value < 128) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
              return cachedObj;
          }
          obj = fromBits(value, value < 0 ? -1 : 0, false);
          if (cache)
            INT_CACHE[value] = obj;
          return obj;
        }
      }
      Long2.fromInt = fromInt;
      function fromNumber(value, unsigned) {
        if (isNaN(value))
          return unsigned ? UZERO : ZERO;
        if (unsigned) {
          if (value < 0)
            return UZERO;
          if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
        } else {
          if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
          if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
        }
        if (value < 0)
          return fromNumber(-value, unsigned).neg();
        return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
      }
      Long2.fromNumber = fromNumber;
      function fromBits(lowBits, highBits, unsigned) {
        return new Long2(lowBits, highBits, unsigned);
      }
      Long2.fromBits = fromBits;
      var pow_dbl = Math.pow;
      function fromString(str, unsigned, radix) {
        if (str.length === 0)
          throw Error("empty string");
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
          return ZERO;
        if (typeof unsigned === "number") {
          radix = unsigned, unsigned = false;
        } else {
          unsigned = !!unsigned;
        }
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
          throw RangeError("radix");
        var p;
        if ((p = str.indexOf("-")) > 0)
          throw Error("interior hyphen");
        else if (p === 0) {
          return fromString(str.substring(1), unsigned, radix).neg();
        }
        var radixToPower = fromNumber(pow_dbl(radix, 8));
        var result = ZERO;
        for (var i = 0; i < str.length; i += 8) {
          var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
          if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
          } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
          }
        }
        result.unsigned = unsigned;
        return result;
      }
      Long2.fromString = fromString;
      function fromValue(val, unsigned) {
        if (typeof val === "number")
          return fromNumber(val, unsigned);
        if (typeof val === "string")
          return fromString(val, unsigned);
        return fromBits(val.low, val.high, typeof unsigned === "boolean" ? unsigned : val.unsigned);
      }
      Long2.fromValue = fromValue;
      var TWO_PWR_16_DBL = 1 << 16;
      var TWO_PWR_24_DBL = 1 << 24;
      var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
      var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
      var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
      var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
      var ZERO = fromInt(0);
      Long2.ZERO = ZERO;
      var UZERO = fromInt(0, true);
      Long2.UZERO = UZERO;
      var ONE = fromInt(1);
      Long2.ONE = ONE;
      var UONE = fromInt(1, true);
      Long2.UONE = UONE;
      var NEG_ONE = fromInt(-1);
      Long2.NEG_ONE = NEG_ONE;
      var MAX_VALUE = fromBits(4294967295 | 0, 2147483647 | 0, false);
      Long2.MAX_VALUE = MAX_VALUE;
      var MAX_UNSIGNED_VALUE = fromBits(4294967295 | 0, 4294967295 | 0, true);
      Long2.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
      var MIN_VALUE = fromBits(0, 2147483648 | 0, false);
      Long2.MIN_VALUE = MIN_VALUE;
      var LongPrototype = Long2.prototype;
      LongPrototype.toInt = function toInt() {
        return this.unsigned ? this.low >>> 0 : this.low;
      };
      LongPrototype.toNumber = function toNumber() {
        if (this.unsigned)
          return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
      };
      LongPrototype.toString = function toString(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
          throw RangeError("radix");
        if (this.isZero())
          return "0";
        if (this.isNegative()) {
          if (this.eq(MIN_VALUE)) {
            var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
          } else
            return "-" + this.neg().toString(radix);
        }
        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
        var result = "";
        while (true) {
          var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
          rem = remDiv;
          if (rem.isZero())
            return digits + result;
          else {
            while (digits.length < 6)
              digits = "0" + digits;
            result = "" + digits + result;
          }
        }
      };
      LongPrototype.getHighBits = function getHighBits() {
        return this.high;
      };
      LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
        return this.high >>> 0;
      };
      LongPrototype.getLowBits = function getLowBits() {
        return this.low;
      };
      LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
        return this.low >>> 0;
      };
      LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
        if (this.isNegative())
          return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        var val = this.high != 0 ? this.high : this.low;
        for (var bit = 31; bit > 0; bit--)
          if ((val & 1 << bit) != 0)
            break;
        return this.high != 0 ? bit + 33 : bit + 1;
      };
      LongPrototype.isZero = function isZero() {
        return this.high === 0 && this.low === 0;
      };
      LongPrototype.eqz = LongPrototype.isZero;
      LongPrototype.isNegative = function isNegative() {
        return !this.unsigned && this.high < 0;
      };
      LongPrototype.isPositive = function isPositive() {
        return this.unsigned || this.high >= 0;
      };
      LongPrototype.isOdd = function isOdd() {
        return (this.low & 1) === 1;
      };
      LongPrototype.isEven = function isEven() {
        return (this.low & 1) === 0;
      };
      LongPrototype.equals = function equals(other) {
        if (!isLong(other))
          other = fromValue(other);
        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
          return false;
        return this.high === other.high && this.low === other.low;
      };
      LongPrototype.eq = LongPrototype.equals;
      LongPrototype.notEquals = function notEquals(other) {
        return !this.eq(other);
      };
      LongPrototype.neq = LongPrototype.notEquals;
      LongPrototype.ne = LongPrototype.notEquals;
      LongPrototype.lessThan = function lessThan(other) {
        return this.comp(other) < 0;
      };
      LongPrototype.lt = LongPrototype.lessThan;
      LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
        return this.comp(other) <= 0;
      };
      LongPrototype.lte = LongPrototype.lessThanOrEqual;
      LongPrototype.le = LongPrototype.lessThanOrEqual;
      LongPrototype.greaterThan = function greaterThan(other) {
        return this.comp(other) > 0;
      };
      LongPrototype.gt = LongPrototype.greaterThan;
      LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
        return this.comp(other) >= 0;
      };
      LongPrototype.gte = LongPrototype.greaterThanOrEqual;
      LongPrototype.ge = LongPrototype.greaterThanOrEqual;
      LongPrototype.compare = function compare(other) {
        if (!isLong(other))
          other = fromValue(other);
        if (this.eq(other))
          return 0;
        var thisNeg = this.isNegative(), otherNeg = other.isNegative();
        if (thisNeg && !otherNeg)
          return -1;
        if (!thisNeg && otherNeg)
          return 1;
        if (!this.unsigned)
          return this.sub(other).isNegative() ? -1 : 1;
        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
      };
      LongPrototype.comp = LongPrototype.compare;
      LongPrototype.negate = function negate() {
        if (!this.unsigned && this.eq(MIN_VALUE))
          return MIN_VALUE;
        return this.not().add(ONE);
      };
      LongPrototype.neg = LongPrototype.negate;
      LongPrototype.add = function add(addend) {
        if (!isLong(addend))
          addend = fromValue(addend);
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = addend.high >>> 16;
        var b32 = addend.high & 65535;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 + b48;
        c48 &= 65535;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      LongPrototype.subtract = function subtract(subtrahend) {
        if (!isLong(subtrahend))
          subtrahend = fromValue(subtrahend);
        return this.add(subtrahend.neg());
      };
      LongPrototype.sub = LongPrototype.subtract;
      LongPrototype.multiply = function multiply(multiplier) {
        if (this.isZero())
          return ZERO;
        if (!isLong(multiplier))
          multiplier = fromValue(multiplier);
        if (wasm) {
          var low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);
          return fromBits(low, wasm.get_high(), this.unsigned);
        }
        if (multiplier.isZero())
          return ZERO;
        if (this.eq(MIN_VALUE))
          return multiplier.isOdd() ? MIN_VALUE : ZERO;
        if (multiplier.eq(MIN_VALUE))
          return this.isOdd() ? MIN_VALUE : ZERO;
        if (this.isNegative()) {
          if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
          else
            return this.neg().mul(multiplier).neg();
        } else if (multiplier.isNegative())
          return this.mul(multiplier.neg()).neg();
        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
          return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 65535;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 65535;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      LongPrototype.mul = LongPrototype.multiply;
      LongPrototype.divide = function divide(divisor) {
        if (!isLong(divisor))
          divisor = fromValue(divisor);
        if (divisor.isZero())
          throw Error("division by zero");
        if (wasm) {
          if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {
            return this;
          }
          var low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);
          return fromBits(low, wasm.get_high(), this.unsigned);
        }
        if (this.isZero())
          return this.unsigned ? UZERO : ZERO;
        var approx, rem, res;
        if (!this.unsigned) {
          if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
              return MIN_VALUE;
            else if (divisor.eq(MIN_VALUE))
              return ONE;
            else {
              var halfThis = this.shr(1);
              approx = halfThis.div(divisor).shl(1);
              if (approx.eq(ZERO)) {
                return divisor.isNegative() ? ONE : NEG_ONE;
              } else {
                rem = this.sub(divisor.mul(approx));
                res = approx.add(rem.div(divisor));
                return res;
              }
            }
          } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
          if (this.isNegative()) {
            if (divisor.isNegative())
              return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
          } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
          res = ZERO;
        } else {
          if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
          if (divisor.gt(this))
            return UZERO;
          if (divisor.gt(this.shru(1)))
            return UONE;
          res = UZERO;
        }
        rem = this;
        while (rem.gte(divisor)) {
          approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
          var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
          while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
          }
          if (approxRes.isZero())
            approxRes = ONE;
          res = res.add(approxRes);
          rem = rem.sub(approxRem);
        }
        return res;
      };
      LongPrototype.div = LongPrototype.divide;
      LongPrototype.modulo = function modulo(divisor) {
        if (!isLong(divisor))
          divisor = fromValue(divisor);
        if (wasm) {
          var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);
          return fromBits(low, wasm.get_high(), this.unsigned);
        }
        return this.sub(this.div(divisor).mul(divisor));
      };
      LongPrototype.mod = LongPrototype.modulo;
      LongPrototype.rem = LongPrototype.modulo;
      LongPrototype.not = function not() {
        return fromBits(~this.low, ~this.high, this.unsigned);
      };
      LongPrototype.and = function and(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
      };
      LongPrototype.or = function or(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
      };
      LongPrototype.xor = function xor(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
      };
      LongPrototype.shiftLeft = function shiftLeft(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        else if (numBits < 32)
          return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
        else
          return fromBits(0, this.low << numBits - 32, this.unsigned);
      };
      LongPrototype.shl = LongPrototype.shiftLeft;
      LongPrototype.shiftRight = function shiftRight(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        else if (numBits < 32)
          return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
        else
          return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
      };
      LongPrototype.shr = LongPrototype.shiftRight;
      LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0)
          return this;
        else {
          var high = this.high;
          if (numBits < 32) {
            var low = this.low;
            return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
          } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
          else
            return fromBits(high >>> numBits - 32, 0, this.unsigned);
        }
      };
      LongPrototype.shru = LongPrototype.shiftRightUnsigned;
      LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
      LongPrototype.toSigned = function toSigned() {
        if (!this.unsigned)
          return this;
        return fromBits(this.low, this.high, false);
      };
      LongPrototype.toUnsigned = function toUnsigned() {
        if (this.unsigned)
          return this;
        return fromBits(this.low, this.high, true);
      };
      LongPrototype.toBytes = function toBytes(le) {
        return le ? this.toBytesLE() : this.toBytesBE();
      };
      LongPrototype.toBytesLE = function toBytesLE() {
        var hi = this.high, lo = this.low;
        return [
          lo & 255,
          lo >>> 8 & 255,
          lo >>> 16 & 255,
          lo >>> 24,
          hi & 255,
          hi >>> 8 & 255,
          hi >>> 16 & 255,
          hi >>> 24
        ];
      };
      LongPrototype.toBytesBE = function toBytesBE() {
        var hi = this.high, lo = this.low;
        return [
          hi >>> 24,
          hi >>> 16 & 255,
          hi >>> 8 & 255,
          hi & 255,
          lo >>> 24,
          lo >>> 16 & 255,
          lo >>> 8 & 255,
          lo & 255
        ];
      };
      Long2.fromBytes = function fromBytes(bytes, unsigned, le) {
        return le ? Long2.fromBytesLE(bytes, unsigned) : Long2.fromBytesBE(bytes, unsigned);
      };
      Long2.fromBytesLE = function fromBytesLE(bytes, unsigned) {
        return new Long2(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
      };
      Long2.fromBytesBE = function fromBytesBE(bytes, unsigned) {
        return new Long2(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
      };
    }
  });

  // node_modules/eventemitter3/index.js
  var require_eventemitter3 = __commonJS({
    "node_modules/eventemitter3/index.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      var has = Object.prototype.hasOwnProperty;
      var prefix = "~";
      function Events() {
      }
      if (Object.create) {
        Events.prototype = Object.create(null);
        if (!new Events().__proto__)
          prefix = false;
      }
      function EE(fn, context, once) {
        this.fn = fn;
        this.context = context;
        this.once = once || false;
      }
      function addListener(emitter, event, fn, context, once) {
        if (typeof fn !== "function") {
          throw new TypeError("The listener must be a function");
        }
        var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
        if (!emitter._events[evt])
          emitter._events[evt] = listener, emitter._eventsCount++;
        else if (!emitter._events[evt].fn)
          emitter._events[evt].push(listener);
        else
          emitter._events[evt] = [emitter._events[evt], listener];
        return emitter;
      }
      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0)
          emitter._events = new Events();
        else
          delete emitter._events[evt];
      }
      function EventEmitter() {
        this._events = new Events();
        this._eventsCount = 0;
      }
      EventEmitter.prototype.eventNames = function eventNames() {
        var names = [], events, name;
        if (this._eventsCount === 0)
          return names;
        for (name in events = this._events) {
          if (has.call(events, name))
            names.push(prefix ? name.slice(1) : name);
        }
        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events));
        }
        return names;
      };
      EventEmitter.prototype.listeners = function listeners(event) {
        var evt = prefix ? prefix + event : event, handlers = this._events[evt];
        if (!handlers)
          return [];
        if (handlers.fn)
          return [handlers.fn];
        for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
          ee[i] = handlers[i].fn;
        }
        return ee;
      };
      EventEmitter.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix ? prefix + event : event, listeners = this._events[evt];
        if (!listeners)
          return 0;
        if (listeners.fn)
          return 1;
        return listeners.length;
      };
      EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt])
          return false;
        var listeners = this._events[evt], len = arguments.length, args, i;
        if (listeners.fn) {
          if (listeners.once)
            this.removeListener(event, listeners.fn, void 0, true);
          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
          }
          for (i = 1, args = new Array(len - 1); i < len; i++) {
            args[i - 1] = arguments[i];
          }
          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length, j;
          for (i = 0; i < length; i++) {
            if (listeners[i].once)
              this.removeListener(event, listeners[i].fn, void 0, true);
            switch (len) {
              case 1:
                listeners[i].fn.call(listeners[i].context);
                break;
              case 2:
                listeners[i].fn.call(listeners[i].context, a1);
                break;
              case 3:
                listeners[i].fn.call(listeners[i].context, a1, a2);
                break;
              case 4:
                listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                break;
              default:
                if (!args)
                  for (j = 1, args = new Array(len - 1); j < len; j++) {
                    args[j - 1] = arguments[j];
                  }
                listeners[i].fn.apply(listeners[i].context, args);
            }
          }
        }
        return true;
      };
      EventEmitter.prototype.on = function on(event, fn, context) {
        return addListener(this, event, fn, context, false);
      };
      EventEmitter.prototype.once = function once(event, fn, context) {
        return addListener(this, event, fn, context, true);
      };
      EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt])
          return this;
        if (!fn) {
          clearEvent(this, evt);
          return this;
        }
        var listeners = this._events[evt];
        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i = 0, events = [], length = listeners.length; i < length; i++) {
            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
              events.push(listeners[i]);
            }
          }
          if (events.length)
            this._events[evt] = events.length === 1 ? events[0] : events;
          else
            clearEvent(this, evt);
        }
        return this;
      };
      EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;
        if (event) {
          evt = prefix ? prefix + event : event;
          if (this._events[evt])
            clearEvent(this, evt);
        } else {
          this._events = new Events();
          this._eventsCount = 0;
        }
        return this;
      };
      EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
      EventEmitter.prototype.addListener = EventEmitter.prototype.on;
      EventEmitter.prefixed = prefix;
      EventEmitter.EventEmitter = EventEmitter;
      if (typeof module2 !== "undefined") {
        module2.exports = EventEmitter;
      }
    }
  });

  // node_modules/p-finally/index.js
  var require_p_finally = __commonJS({
    "node_modules/p-finally/index.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      module2.exports = (promise, onFinally) => {
        onFinally = onFinally || (() => {
        });
        return promise.then((val) => new Promise((resolve) => {
          resolve(onFinally());
        }).then(() => val), (err) => new Promise((resolve) => {
          resolve(onFinally());
        }).then(() => {
          throw err;
        }));
      };
    }
  });

  // node_modules/p-timeout/index.js
  var require_p_timeout = __commonJS({
    "node_modules/p-timeout/index.js"(exports2, module2) {
      init_web_worker_inject();
      "use strict";
      var pFinally = require_p_finally();
      var TimeoutError = class extends Error {
        constructor(message) {
          super(message);
          this.name = "TimeoutError";
        }
      };
      var pTimeout = (promise, milliseconds, fallback) => new Promise((resolve, reject) => {
        if (typeof milliseconds !== "number" || milliseconds < 0) {
          throw new TypeError("Expected `milliseconds` to be a positive number");
        }
        if (milliseconds === Infinity) {
          resolve(promise);
          return;
        }
        const timer = setTimeout(() => {
          if (typeof fallback === "function") {
            try {
              resolve(fallback());
            } catch (error) {
              reject(error);
            }
            return;
          }
          const message = typeof fallback === "string" ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
          const timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);
          if (typeof promise.cancel === "function") {
            promise.cancel();
          }
          reject(timeoutError);
        }, milliseconds);
        pFinally(promise.then(resolve, reject), () => {
          clearTimeout(timer);
        });
      });
      module2.exports = pTimeout;
      module2.exports.default = pTimeout;
      module2.exports.TimeoutError = TimeoutError;
    }
  });

  // node_modules/p-queue/dist/lower-bound.js
  var require_lower_bound = __commonJS({
    "node_modules/p-queue/dist/lower-bound.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      function lowerBound(array, value, comparator) {
        let first = 0;
        let count = array.length;
        while (count > 0) {
          const step = count / 2 | 0;
          let it = first + step;
          if (comparator(array[it], value) <= 0) {
            first = ++it;
            count -= step + 1;
          } else {
            count = step;
          }
        }
        return first;
      }
      exports2.default = lowerBound;
    }
  });

  // node_modules/p-queue/dist/priority-queue.js
  var require_priority_queue = __commonJS({
    "node_modules/p-queue/dist/priority-queue.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      var lower_bound_1 = require_lower_bound();
      var PriorityQueue = class {
        constructor() {
          this._queue = [];
        }
        enqueue(run, options) {
          options = Object.assign({priority: 0}, options);
          const element = {
            priority: options.priority,
            run
          };
          if (this.size && this._queue[this.size - 1].priority >= options.priority) {
            this._queue.push(element);
            return;
          }
          const index = lower_bound_1.default(this._queue, element, (a, b) => b.priority - a.priority);
          this._queue.splice(index, 0, element);
        }
        dequeue() {
          const item = this._queue.shift();
          return item === null || item === void 0 ? void 0 : item.run;
        }
        filter(options) {
          return this._queue.filter((element) => element.priority === options.priority).map((element) => element.run);
        }
        get size() {
          return this._queue.length;
        }
      };
      exports2.default = PriorityQueue;
    }
  });

  // node_modules/p-queue/dist/index.js
  var require_dist3 = __commonJS({
    "node_modules/p-queue/dist/index.js"(exports2) {
      init_web_worker_inject();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {value: true});
      var EventEmitter = require_eventemitter3();
      var p_timeout_1 = require_p_timeout();
      var priority_queue_1 = require_priority_queue();
      var empty = () => {
      };
      var timeoutError = new p_timeout_1.TimeoutError();
      var PQueue2 = class extends EventEmitter {
        constructor(options) {
          var _a, _b, _c, _d;
          super();
          this._intervalCount = 0;
          this._intervalEnd = 0;
          this._pendingCount = 0;
          this._resolveEmpty = empty;
          this._resolveIdle = empty;
          options = Object.assign({carryoverConcurrencyCount: false, intervalCap: Infinity, interval: 0, concurrency: Infinity, autoStart: true, queueClass: priority_queue_1.default}, options);
          if (!(typeof options.intervalCap === "number" && options.intervalCap >= 1)) {
            throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ""}\` (${typeof options.intervalCap})`);
          }
          if (options.interval === void 0 || !(Number.isFinite(options.interval) && options.interval >= 0)) {
            throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""}\` (${typeof options.interval})`);
          }
          this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
          this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
          this._intervalCap = options.intervalCap;
          this._interval = options.interval;
          this._queue = new options.queueClass();
          this._queueClass = options.queueClass;
          this.concurrency = options.concurrency;
          this._timeout = options.timeout;
          this._throwOnTimeout = options.throwOnTimeout === true;
          this._isPaused = options.autoStart === false;
        }
        get _doesIntervalAllowAnother() {
          return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
        }
        get _doesConcurrentAllowAnother() {
          return this._pendingCount < this._concurrency;
        }
        _next() {
          this._pendingCount--;
          this._tryToStartAnother();
          this.emit("next");
        }
        _resolvePromises() {
          this._resolveEmpty();
          this._resolveEmpty = empty;
          if (this._pendingCount === 0) {
            this._resolveIdle();
            this._resolveIdle = empty;
            this.emit("idle");
          }
        }
        _onResumeInterval() {
          this._onInterval();
          this._initializeIntervalIfNeeded();
          this._timeoutId = void 0;
        }
        _isIntervalPaused() {
          const now = Date.now();
          if (this._intervalId === void 0) {
            const delay = this._intervalEnd - now;
            if (delay < 0) {
              this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
            } else {
              if (this._timeoutId === void 0) {
                this._timeoutId = setTimeout(() => {
                  this._onResumeInterval();
                }, delay);
              }
              return true;
            }
          }
          return false;
        }
        _tryToStartAnother() {
          if (this._queue.size === 0) {
            if (this._intervalId) {
              clearInterval(this._intervalId);
            }
            this._intervalId = void 0;
            this._resolvePromises();
            return false;
          }
          if (!this._isPaused) {
            const canInitializeInterval = !this._isIntervalPaused();
            if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
              const job = this._queue.dequeue();
              if (!job) {
                return false;
              }
              this.emit("active");
              job();
              if (canInitializeInterval) {
                this._initializeIntervalIfNeeded();
              }
              return true;
            }
          }
          return false;
        }
        _initializeIntervalIfNeeded() {
          if (this._isIntervalIgnored || this._intervalId !== void 0) {
            return;
          }
          this._intervalId = setInterval(() => {
            this._onInterval();
          }, this._interval);
          this._intervalEnd = Date.now() + this._interval;
        }
        _onInterval() {
          if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
            clearInterval(this._intervalId);
            this._intervalId = void 0;
          }
          this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
          this._processQueue();
        }
        _processQueue() {
          while (this._tryToStartAnother()) {
          }
        }
        get concurrency() {
          return this._concurrency;
        }
        set concurrency(newConcurrency) {
          if (!(typeof newConcurrency === "number" && newConcurrency >= 1)) {
            throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
          }
          this._concurrency = newConcurrency;
          this._processQueue();
        }
        async add(fn, options = {}) {
          return new Promise((resolve, reject) => {
            const run = async () => {
              this._pendingCount++;
              this._intervalCount++;
              try {
                const operation = this._timeout === void 0 && options.timeout === void 0 ? fn() : p_timeout_1.default(Promise.resolve(fn()), options.timeout === void 0 ? this._timeout : options.timeout, () => {
                  if (options.throwOnTimeout === void 0 ? this._throwOnTimeout : options.throwOnTimeout) {
                    reject(timeoutError);
                  }
                  return void 0;
                });
                resolve(await operation);
              } catch (error) {
                reject(error);
              }
              this._next();
            };
            this._queue.enqueue(run, options);
            this._tryToStartAnother();
            this.emit("add");
          });
        }
        async addAll(functions, options) {
          return Promise.all(functions.map(async (function_) => this.add(function_, options)));
        }
        start() {
          if (!this._isPaused) {
            return this;
          }
          this._isPaused = false;
          this._processQueue();
          return this;
        }
        pause() {
          this._isPaused = true;
        }
        clear() {
          this._queue = new this._queueClass();
        }
        async onEmpty() {
          if (this._queue.size === 0) {
            return;
          }
          return new Promise((resolve) => {
            const existingResolve = this._resolveEmpty;
            this._resolveEmpty = () => {
              existingResolve();
              resolve();
            };
          });
        }
        async onIdle() {
          if (this._pendingCount === 0 && this._queue.size === 0) {
            return;
          }
          return new Promise((resolve) => {
            const existingResolve = this._resolveIdle;
            this._resolveIdle = () => {
              existingResolve();
              resolve();
            };
          });
        }
        get size() {
          return this._queue.size;
        }
        sizeBy(options) {
          return this._queue.filter(options).length;
        }
        get pending() {
          return this._pendingCount;
        }
        get isPaused() {
          return this._isPaused;
        }
        get timeout() {
          return this._timeout;
        }
        set timeout(milliseconds) {
          this._timeout = milliseconds;
        }
      };
      exports2.default = PQueue2;
    }
  });

  // src/worker/index-webworker.ts
  init_web_worker_inject();
  var import_rpc = __toModule(require_dist());
  var import_WebWorker = __toModule(require_WebWorker());

  // src/worker/SceneRuntime.ts
  init_web_worker_inject();

  // src/worker/client/index.ts
  init_web_worker_inject();

  // src/worker/client/CommunicationsController.ts
  init_web_worker_inject();
  var codegen = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/communications_controller.gen.ts
  init_web_worker_inject();
  var import_minimal = __toModule(require_minimal2());
  function createBaseRealSendRequest() {
    return {message: ""};
  }
  var RealSendRequest = {
    encode(message, writer = import_minimal.default.Writer.create()) {
      if (message.message !== "") {
        writer.uint32(10).string(message.message);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal.default.Reader ? input : new import_minimal.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseRealSendRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.message = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {message: isSet(object.message) ? String(object.message) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.message !== void 0 && (obj.message = message.message);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseRealSendRequest();
      message.message = object.message ?? "";
      return message;
    }
  };
  function createBaseRealSendResponse() {
    return {};
  }
  var RealSendResponse = {
    encode(_, writer = import_minimal.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal.default.Reader ? input : new import_minimal.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseRealSendResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseRealSendResponse();
      return message;
    }
  };
  var CommunicationsControllerServiceDefinition = {
    name: "CommunicationsControllerService",
    fullName: "decentraland.kernel.apis.CommunicationsControllerService",
    methods: {
      send: {
        name: "Send",
        requestType: RealSendRequest,
        requestStream: false,
        responseType: RealSendResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isSet(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/CommunicationsController.ts
  var CommunicationsControllerServiceClient;
  (function(CommunicationsControllerServiceClient2) {
    function create(clientPort) {
      return codegen.loadService(clientPort, CommunicationsControllerServiceDefinition);
    }
    CommunicationsControllerServiceClient2.create = create;
    function createLegacy(clientPort) {
      const originalService = codegen.loadService(clientPort, CommunicationsControllerServiceDefinition);
      return {
        ...originalService,
        async send(message) {
          await originalService.send({message});
        }
      };
    }
    CommunicationsControllerServiceClient2.createLegacy = createLegacy;
  })(CommunicationsControllerServiceClient || (CommunicationsControllerServiceClient = {}));

  // src/worker/client/DevTools.ts
  init_web_worker_inject();
  var codegen2 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/dev_tools.gen.ts
  init_web_worker_inject();
  var import_minimal2 = __toModule(require_minimal2());
  function createBaseDevToolsBody() {
    return {type: "", jsonPayload: ""};
  }
  var DevToolsBody = {
    encode(message, writer = import_minimal2.default.Writer.create()) {
      if (message.type !== "") {
        writer.uint32(10).string(message.type);
      }
      if (message.jsonPayload !== "") {
        writer.uint32(18).string(message.jsonPayload);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal2.default.Reader ? input : new import_minimal2.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseDevToolsBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.type = reader.string();
            break;
          case 2:
            message.jsonPayload = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        type: isSet2(object.type) ? String(object.type) : "",
        jsonPayload: isSet2(object.jsonPayload) ? String(object.jsonPayload) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.type !== void 0 && (obj.type = message.type);
      message.jsonPayload !== void 0 && (obj.jsonPayload = message.jsonPayload);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseDevToolsBody();
      message.type = object.type ?? "";
      message.jsonPayload = object.jsonPayload ?? "";
      return message;
    }
  };
  function createBaseEventResponse() {
    return {};
  }
  var EventResponse = {
    encode(_, writer = import_minimal2.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal2.default.Reader ? input : new import_minimal2.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseEventResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseEventResponse();
      return message;
    }
  };
  var DevToolsServiceDefinition = {
    name: "DevToolsService",
    fullName: "decentraland.kernel.apis.DevToolsService",
    methods: {
      event: {
        name: "Event",
        requestType: DevToolsBody,
        requestStream: false,
        responseType: EventResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isSet2(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/DevTools.ts
  function createDevToolsServiceClient(clientPort) {
    const originalService = codegen2.loadService(clientPort, DevToolsServiceDefinition);
    return originalService;
  }

  // src/worker/client/EngineApi.ts
  init_web_worker_inject();
  var codegen3 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/engine_api.gen.ts
  init_web_worker_inject();
  var import_minimal3 = __toModule(require_minimal2());
  var QueryType;
  (function(QueryType2) {
    QueryType2[QueryType2["QT_INVALID_QUERY_TYPE"] = 0] = "QT_INVALID_QUERY_TYPE";
    QueryType2[QueryType2["QT_HIT_FIRST"] = 1] = "QT_HIT_FIRST";
    QueryType2[QueryType2["QT_HIT_ALL"] = 2] = "QT_HIT_ALL";
    QueryType2[QueryType2["QT_HIT_FIRST_AVATAR"] = 3] = "QT_HIT_FIRST_AVATAR";
    QueryType2[QueryType2["QT_HIT_ALL_AVATARS"] = 4] = "QT_HIT_ALL_AVATARS";
    QueryType2[QueryType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  })(QueryType || (QueryType = {}));
  function queryTypeFromJSON(object) {
    switch (object) {
      case 0:
      case "QT_INVALID_QUERY_TYPE":
        return 0;
      case 1:
      case "QT_HIT_FIRST":
        return 1;
      case 2:
      case "QT_HIT_ALL":
        return 2;
      case 3:
      case "QT_HIT_FIRST_AVATAR":
        return 3;
      case 4:
      case "QT_HIT_ALL_AVATARS":
        return 4;
      case -1:
      case "UNRECOGNIZED":
      default:
        return -1;
    }
  }
  function queryTypeToJSON(object) {
    switch (object) {
      case 0:
        return "QT_INVALID_QUERY_TYPE";
      case 1:
        return "QT_HIT_FIRST";
      case 2:
        return "QT_HIT_ALL";
      case 3:
        return "QT_HIT_FIRST_AVATAR";
      case 4:
        return "QT_HIT_ALL_AVATARS";
      case -1:
      default:
        return "UNRECOGNIZED";
    }
  }
  var EAType;
  (function(EAType2) {
    EAType2[EAType2["EAT_INVALID_EA_TYPE"] = 0] = "EAT_INVALID_EA_TYPE";
    EAType2[EAType2["EAT_OPEN_EXTERNAL_URL"] = 1] = "EAT_OPEN_EXTERNAL_URL";
    EAType2[EAType2["EAT_OPEN_NFT_DIALOG"] = 2] = "EAT_OPEN_NFT_DIALOG";
    EAType2[EAType2["EAT_CREATE_ENTITY"] = 3] = "EAT_CREATE_ENTITY";
    EAType2[EAType2["EAT_REMOVE_ENTITY"] = 4] = "EAT_REMOVE_ENTITY";
    EAType2[EAType2["EAT_UPDATE_ENTITY_COMPONENT"] = 5] = "EAT_UPDATE_ENTITY_COMPONENT";
    EAType2[EAType2["EAT_ATTACH_ENTITY_COMPONENT"] = 6] = "EAT_ATTACH_ENTITY_COMPONENT";
    EAType2[EAType2["EAT_COMPONENT_REMOVED"] = 7] = "EAT_COMPONENT_REMOVED";
    EAType2[EAType2["EAT_SET_ENTITY_PARENT"] = 8] = "EAT_SET_ENTITY_PARENT";
    EAType2[EAType2["EAT_QUERY"] = 9] = "EAT_QUERY";
    EAType2[EAType2["EAT_COMPONENT_CREATED"] = 10] = "EAT_COMPONENT_CREATED";
    EAType2[EAType2["EAT_COMPONENT_DISPOSED"] = 11] = "EAT_COMPONENT_DISPOSED";
    EAType2[EAType2["EAT_COMPONENT_UPDATED"] = 12] = "EAT_COMPONENT_UPDATED";
    EAType2[EAType2["EAT_INIT_MESSAGES_FINISHED"] = 13] = "EAT_INIT_MESSAGES_FINISHED";
    EAType2[EAType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  })(EAType || (EAType = {}));
  function eATypeFromJSON(object) {
    switch (object) {
      case 0:
      case "EAT_INVALID_EA_TYPE":
        return 0;
      case 1:
      case "EAT_OPEN_EXTERNAL_URL":
        return 1;
      case 2:
      case "EAT_OPEN_NFT_DIALOG":
        return 2;
      case 3:
      case "EAT_CREATE_ENTITY":
        return 3;
      case 4:
      case "EAT_REMOVE_ENTITY":
        return 4;
      case 5:
      case "EAT_UPDATE_ENTITY_COMPONENT":
        return 5;
      case 6:
      case "EAT_ATTACH_ENTITY_COMPONENT":
        return 6;
      case 7:
      case "EAT_COMPONENT_REMOVED":
        return 7;
      case 8:
      case "EAT_SET_ENTITY_PARENT":
        return 8;
      case 9:
      case "EAT_QUERY":
        return 9;
      case 10:
      case "EAT_COMPONENT_CREATED":
        return 10;
      case 11:
      case "EAT_COMPONENT_DISPOSED":
        return 11;
      case 12:
      case "EAT_COMPONENT_UPDATED":
        return 12;
      case 13:
      case "EAT_INIT_MESSAGES_FINISHED":
        return 13;
      case -1:
      case "UNRECOGNIZED":
      default:
        return -1;
    }
  }
  function eATypeToJSON(object) {
    switch (object) {
      case 0:
        return "EAT_INVALID_EA_TYPE";
      case 1:
        return "EAT_OPEN_EXTERNAL_URL";
      case 2:
        return "EAT_OPEN_NFT_DIALOG";
      case 3:
        return "EAT_CREATE_ENTITY";
      case 4:
        return "EAT_REMOVE_ENTITY";
      case 5:
        return "EAT_UPDATE_ENTITY_COMPONENT";
      case 6:
        return "EAT_ATTACH_ENTITY_COMPONENT";
      case 7:
        return "EAT_COMPONENT_REMOVED";
      case 8:
        return "EAT_SET_ENTITY_PARENT";
      case 9:
        return "EAT_QUERY";
      case 10:
        return "EAT_COMPONENT_CREATED";
      case 11:
        return "EAT_COMPONENT_DISPOSED";
      case 12:
        return "EAT_COMPONENT_UPDATED";
      case 13:
        return "EAT_INIT_MESSAGES_FINISHED";
      case -1:
      default:
        return "UNRECOGNIZED";
    }
  }
  var EventDataType;
  (function(EventDataType2) {
    EventDataType2[EventDataType2["EDT_GENERIC"] = 0] = "EDT_GENERIC";
    EventDataType2[EventDataType2["EDT_POSITION_CHANGED"] = 1] = "EDT_POSITION_CHANGED";
    EventDataType2[EventDataType2["EDT_ROTATION_CHANGED"] = 2] = "EDT_ROTATION_CHANGED";
    EventDataType2[EventDataType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  })(EventDataType || (EventDataType = {}));
  function eventDataTypeFromJSON(object) {
    switch (object) {
      case 0:
      case "EDT_GENERIC":
        return 0;
      case 1:
      case "EDT_POSITION_CHANGED":
        return 1;
      case 2:
      case "EDT_ROTATION_CHANGED":
        return 2;
      case -1:
      case "UNRECOGNIZED":
      default:
        return -1;
    }
  }
  function eventDataTypeToJSON(object) {
    switch (object) {
      case 0:
        return "EDT_GENERIC";
      case 1:
        return "EDT_POSITION_CHANGED";
      case 2:
        return "EDT_ROTATION_CHANGED";
      case -1:
      default:
        return "UNRECOGNIZED";
    }
  }
  function createBaseOpenExternalUrlBody() {
    return {url: ""};
  }
  var OpenExternalUrlBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.url !== "") {
        writer.uint32(10).string(message.url);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseOpenExternalUrlBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.url = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {url: isSet3(object.url) ? String(object.url) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.url !== void 0 && (obj.url = message.url);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseOpenExternalUrlBody();
      message.url = object.url ?? "";
      return message;
    }
  };
  function createBaseOpenNFTDialogBody() {
    return {assetContractAddress: "", tokenId: "", comment: void 0};
  }
  var OpenNFTDialogBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.assetContractAddress !== "") {
        writer.uint32(10).string(message.assetContractAddress);
      }
      if (message.tokenId !== "") {
        writer.uint32(18).string(message.tokenId);
      }
      if (message.comment !== void 0) {
        writer.uint32(26).string(message.comment);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseOpenNFTDialogBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.assetContractAddress = reader.string();
            break;
          case 2:
            message.tokenId = reader.string();
            break;
          case 3:
            message.comment = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        assetContractAddress: isSet3(object.assetContractAddress) ? String(object.assetContractAddress) : "",
        tokenId: isSet3(object.tokenId) ? String(object.tokenId) : "",
        comment: isSet3(object.comment) ? String(object.comment) : void 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.assetContractAddress !== void 0 && (obj.assetContractAddress = message.assetContractAddress);
      message.tokenId !== void 0 && (obj.tokenId = message.tokenId);
      message.comment !== void 0 && (obj.comment = message.comment);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseOpenNFTDialogBody();
      message.assetContractAddress = object.assetContractAddress ?? "";
      message.tokenId = object.tokenId ?? "";
      message.comment = object.comment ?? void 0;
      return message;
    }
  };
  function createBaseCreateEntityBody() {
    return {id: ""};
  }
  var CreateEntityBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.id !== "") {
        writer.uint32(10).string(message.id);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseCreateEntityBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.id = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {id: isSet3(object.id) ? String(object.id) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.id !== void 0 && (obj.id = message.id);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseCreateEntityBody();
      message.id = object.id ?? "";
      return message;
    }
  };
  function createBaseRemoveEntityBody() {
    return {id: ""};
  }
  var RemoveEntityBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.id !== "") {
        writer.uint32(10).string(message.id);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseRemoveEntityBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.id = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {id: isSet3(object.id) ? String(object.id) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.id !== void 0 && (obj.id = message.id);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseRemoveEntityBody();
      message.id = object.id ?? "";
      return message;
    }
  };
  function createBaseUpdateEntityComponentBody() {
    return {entityId: "", classId: 0, name: "", json: ""};
  }
  var UpdateEntityComponentBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.entityId !== "") {
        writer.uint32(10).string(message.entityId);
      }
      if (message.classId !== 0) {
        writer.uint32(16).int32(message.classId);
      }
      if (message.name !== "") {
        writer.uint32(26).string(message.name);
      }
      if (message.json !== "") {
        writer.uint32(34).string(message.json);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseUpdateEntityComponentBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.entityId = reader.string();
            break;
          case 2:
            message.classId = reader.int32();
            break;
          case 3:
            message.name = reader.string();
            break;
          case 4:
            message.json = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        entityId: isSet3(object.entityId) ? String(object.entityId) : "",
        classId: isSet3(object.classId) ? Number(object.classId) : 0,
        name: isSet3(object.name) ? String(object.name) : "",
        json: isSet3(object.json) ? String(object.json) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.entityId !== void 0 && (obj.entityId = message.entityId);
      message.classId !== void 0 && (obj.classId = Math.round(message.classId));
      message.name !== void 0 && (obj.name = message.name);
      message.json !== void 0 && (obj.json = message.json);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseUpdateEntityComponentBody();
      message.entityId = object.entityId ?? "";
      message.classId = object.classId ?? 0;
      message.name = object.name ?? "";
      message.json = object.json ?? "";
      return message;
    }
  };
  function createBaseAttachEntityComponentBody() {
    return {entityId: "", name: "", id: ""};
  }
  var AttachEntityComponentBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.entityId !== "") {
        writer.uint32(10).string(message.entityId);
      }
      if (message.name !== "") {
        writer.uint32(18).string(message.name);
      }
      if (message.id !== "") {
        writer.uint32(26).string(message.id);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseAttachEntityComponentBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.entityId = reader.string();
            break;
          case 2:
            message.name = reader.string();
            break;
          case 3:
            message.id = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        entityId: isSet3(object.entityId) ? String(object.entityId) : "",
        name: isSet3(object.name) ? String(object.name) : "",
        id: isSet3(object.id) ? String(object.id) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.entityId !== void 0 && (obj.entityId = message.entityId);
      message.name !== void 0 && (obj.name = message.name);
      message.id !== void 0 && (obj.id = message.id);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseAttachEntityComponentBody();
      message.entityId = object.entityId ?? "";
      message.name = object.name ?? "";
      message.id = object.id ?? "";
      return message;
    }
  };
  function createBaseComponentRemovedBody() {
    return {entityId: "", name: ""};
  }
  var ComponentRemovedBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.entityId !== "") {
        writer.uint32(10).string(message.entityId);
      }
      if (message.name !== "") {
        writer.uint32(18).string(message.name);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseComponentRemovedBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.entityId = reader.string();
            break;
          case 2:
            message.name = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        entityId: isSet3(object.entityId) ? String(object.entityId) : "",
        name: isSet3(object.name) ? String(object.name) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.entityId !== void 0 && (obj.entityId = message.entityId);
      message.name !== void 0 && (obj.name = message.name);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseComponentRemovedBody();
      message.entityId = object.entityId ?? "";
      message.name = object.name ?? "";
      return message;
    }
  };
  function createBaseSetEntityParentBody() {
    return {entityId: "", parentId: ""};
  }
  var SetEntityParentBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.entityId !== "") {
        writer.uint32(10).string(message.entityId);
      }
      if (message.parentId !== "") {
        writer.uint32(18).string(message.parentId);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSetEntityParentBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.entityId = reader.string();
            break;
          case 2:
            message.parentId = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        entityId: isSet3(object.entityId) ? String(object.entityId) : "",
        parentId: isSet3(object.parentId) ? String(object.parentId) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.entityId !== void 0 && (obj.entityId = message.entityId);
      message.parentId !== void 0 && (obj.parentId = message.parentId);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSetEntityParentBody();
      message.entityId = object.entityId ?? "";
      message.parentId = object.parentId ?? "";
      return message;
    }
  };
  function createBaseQueryBody() {
    return {queryId: 0, payload: ""};
  }
  var QueryBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.queryId !== 0) {
        writer.uint32(8).int32(message.queryId);
      }
      if (message.payload !== "") {
        writer.uint32(18).string(message.payload);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseQueryBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.queryId = reader.int32();
            break;
          case 2:
            message.payload = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        queryId: isSet3(object.queryId) ? queryTypeFromJSON(object.queryId) : 0,
        payload: isSet3(object.payload) ? String(object.payload) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.queryId !== void 0 && (obj.queryId = queryTypeToJSON(message.queryId));
      message.payload !== void 0 && (obj.payload = message.payload);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseQueryBody();
      message.queryId = object.queryId ?? 0;
      message.payload = object.payload ?? "";
      return message;
    }
  };
  function createBaseComponentCreatedBody() {
    return {id: "", classId: 0, name: ""};
  }
  var ComponentCreatedBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.id !== "") {
        writer.uint32(10).string(message.id);
      }
      if (message.classId !== 0) {
        writer.uint32(16).int32(message.classId);
      }
      if (message.name !== "") {
        writer.uint32(26).string(message.name);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseComponentCreatedBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.id = reader.string();
            break;
          case 2:
            message.classId = reader.int32();
            break;
          case 3:
            message.name = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        id: isSet3(object.id) ? String(object.id) : "",
        classId: isSet3(object.classId) ? Number(object.classId) : 0,
        name: isSet3(object.name) ? String(object.name) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.id !== void 0 && (obj.id = message.id);
      message.classId !== void 0 && (obj.classId = Math.round(message.classId));
      message.name !== void 0 && (obj.name = message.name);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseComponentCreatedBody();
      message.id = object.id ?? "";
      message.classId = object.classId ?? 0;
      message.name = object.name ?? "";
      return message;
    }
  };
  function createBaseComponentDisposedBody() {
    return {id: ""};
  }
  var ComponentDisposedBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.id !== "") {
        writer.uint32(10).string(message.id);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseComponentDisposedBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.id = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {id: isSet3(object.id) ? String(object.id) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.id !== void 0 && (obj.id = message.id);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseComponentDisposedBody();
      message.id = object.id ?? "";
      return message;
    }
  };
  function createBaseComponentUpdatedBody() {
    return {id: "", json: ""};
  }
  var ComponentUpdatedBody = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.id !== "") {
        writer.uint32(10).string(message.id);
      }
      if (message.json !== "") {
        writer.uint32(18).string(message.json);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseComponentUpdatedBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.id = reader.string();
            break;
          case 2:
            message.json = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {id: isSet3(object.id) ? String(object.id) : "", json: isSet3(object.json) ? String(object.json) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.id !== void 0 && (obj.id = message.id);
      message.json !== void 0 && (obj.json = message.json);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseComponentUpdatedBody();
      message.id = object.id ?? "";
      message.json = object.json ?? "";
      return message;
    }
  };
  function createBaseInitMessagesFinishedBody() {
    return {};
  }
  var InitMessagesFinishedBody = {
    encode(_, writer = import_minimal3.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseInitMessagesFinishedBody();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseInitMessagesFinishedBody();
      return message;
    }
  };
  function createBasePayload() {
    return {
      openExternalUrl: void 0,
      openNftDialog: void 0,
      createEntity: void 0,
      removeEntity: void 0,
      updateEntityComponent: void 0,
      attachEntityComponent: void 0,
      componentRemoved: void 0,
      setEntityParent: void 0,
      query: void 0,
      componentCreated: void 0,
      componentDisposed: void 0,
      componentUpdated: void 0,
      initMessagesFinished: void 0
    };
  }
  var Payload = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.openExternalUrl !== void 0) {
        OpenExternalUrlBody.encode(message.openExternalUrl, writer.uint32(10).fork()).ldelim();
      }
      if (message.openNftDialog !== void 0) {
        OpenNFTDialogBody.encode(message.openNftDialog, writer.uint32(18).fork()).ldelim();
      }
      if (message.createEntity !== void 0) {
        CreateEntityBody.encode(message.createEntity, writer.uint32(26).fork()).ldelim();
      }
      if (message.removeEntity !== void 0) {
        RemoveEntityBody.encode(message.removeEntity, writer.uint32(34).fork()).ldelim();
      }
      if (message.updateEntityComponent !== void 0) {
        UpdateEntityComponentBody.encode(message.updateEntityComponent, writer.uint32(42).fork()).ldelim();
      }
      if (message.attachEntityComponent !== void 0) {
        AttachEntityComponentBody.encode(message.attachEntityComponent, writer.uint32(50).fork()).ldelim();
      }
      if (message.componentRemoved !== void 0) {
        ComponentRemovedBody.encode(message.componentRemoved, writer.uint32(58).fork()).ldelim();
      }
      if (message.setEntityParent !== void 0) {
        SetEntityParentBody.encode(message.setEntityParent, writer.uint32(66).fork()).ldelim();
      }
      if (message.query !== void 0) {
        QueryBody.encode(message.query, writer.uint32(74).fork()).ldelim();
      }
      if (message.componentCreated !== void 0) {
        ComponentCreatedBody.encode(message.componentCreated, writer.uint32(82).fork()).ldelim();
      }
      if (message.componentDisposed !== void 0) {
        ComponentDisposedBody.encode(message.componentDisposed, writer.uint32(90).fork()).ldelim();
      }
      if (message.componentUpdated !== void 0) {
        ComponentUpdatedBody.encode(message.componentUpdated, writer.uint32(98).fork()).ldelim();
      }
      if (message.initMessagesFinished !== void 0) {
        InitMessagesFinishedBody.encode(message.initMessagesFinished, writer.uint32(106).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBasePayload();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.openExternalUrl = OpenExternalUrlBody.decode(reader, reader.uint32());
            break;
          case 2:
            message.openNftDialog = OpenNFTDialogBody.decode(reader, reader.uint32());
            break;
          case 3:
            message.createEntity = CreateEntityBody.decode(reader, reader.uint32());
            break;
          case 4:
            message.removeEntity = RemoveEntityBody.decode(reader, reader.uint32());
            break;
          case 5:
            message.updateEntityComponent = UpdateEntityComponentBody.decode(reader, reader.uint32());
            break;
          case 6:
            message.attachEntityComponent = AttachEntityComponentBody.decode(reader, reader.uint32());
            break;
          case 7:
            message.componentRemoved = ComponentRemovedBody.decode(reader, reader.uint32());
            break;
          case 8:
            message.setEntityParent = SetEntityParentBody.decode(reader, reader.uint32());
            break;
          case 9:
            message.query = QueryBody.decode(reader, reader.uint32());
            break;
          case 10:
            message.componentCreated = ComponentCreatedBody.decode(reader, reader.uint32());
            break;
          case 11:
            message.componentDisposed = ComponentDisposedBody.decode(reader, reader.uint32());
            break;
          case 12:
            message.componentUpdated = ComponentUpdatedBody.decode(reader, reader.uint32());
            break;
          case 13:
            message.initMessagesFinished = InitMessagesFinishedBody.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        openExternalUrl: isSet3(object.openExternalUrl) ? OpenExternalUrlBody.fromJSON(object.openExternalUrl) : void 0,
        openNftDialog: isSet3(object.openNftDialog) ? OpenNFTDialogBody.fromJSON(object.openNftDialog) : void 0,
        createEntity: isSet3(object.createEntity) ? CreateEntityBody.fromJSON(object.createEntity) : void 0,
        removeEntity: isSet3(object.removeEntity) ? RemoveEntityBody.fromJSON(object.removeEntity) : void 0,
        updateEntityComponent: isSet3(object.updateEntityComponent) ? UpdateEntityComponentBody.fromJSON(object.updateEntityComponent) : void 0,
        attachEntityComponent: isSet3(object.attachEntityComponent) ? AttachEntityComponentBody.fromJSON(object.attachEntityComponent) : void 0,
        componentRemoved: isSet3(object.componentRemoved) ? ComponentRemovedBody.fromJSON(object.componentRemoved) : void 0,
        setEntityParent: isSet3(object.setEntityParent) ? SetEntityParentBody.fromJSON(object.setEntityParent) : void 0,
        query: isSet3(object.query) ? QueryBody.fromJSON(object.query) : void 0,
        componentCreated: isSet3(object.componentCreated) ? ComponentCreatedBody.fromJSON(object.componentCreated) : void 0,
        componentDisposed: isSet3(object.componentDisposed) ? ComponentDisposedBody.fromJSON(object.componentDisposed) : void 0,
        componentUpdated: isSet3(object.componentUpdated) ? ComponentUpdatedBody.fromJSON(object.componentUpdated) : void 0,
        initMessagesFinished: isSet3(object.initMessagesFinished) ? InitMessagesFinishedBody.fromJSON(object.initMessagesFinished) : void 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.openExternalUrl !== void 0 && (obj.openExternalUrl = message.openExternalUrl ? OpenExternalUrlBody.toJSON(message.openExternalUrl) : void 0);
      message.openNftDialog !== void 0 && (obj.openNftDialog = message.openNftDialog ? OpenNFTDialogBody.toJSON(message.openNftDialog) : void 0);
      message.createEntity !== void 0 && (obj.createEntity = message.createEntity ? CreateEntityBody.toJSON(message.createEntity) : void 0);
      message.removeEntity !== void 0 && (obj.removeEntity = message.removeEntity ? RemoveEntityBody.toJSON(message.removeEntity) : void 0);
      message.updateEntityComponent !== void 0 && (obj.updateEntityComponent = message.updateEntityComponent ? UpdateEntityComponentBody.toJSON(message.updateEntityComponent) : void 0);
      message.attachEntityComponent !== void 0 && (obj.attachEntityComponent = message.attachEntityComponent ? AttachEntityComponentBody.toJSON(message.attachEntityComponent) : void 0);
      message.componentRemoved !== void 0 && (obj.componentRemoved = message.componentRemoved ? ComponentRemovedBody.toJSON(message.componentRemoved) : void 0);
      message.setEntityParent !== void 0 && (obj.setEntityParent = message.setEntityParent ? SetEntityParentBody.toJSON(message.setEntityParent) : void 0);
      message.query !== void 0 && (obj.query = message.query ? QueryBody.toJSON(message.query) : void 0);
      message.componentCreated !== void 0 && (obj.componentCreated = message.componentCreated ? ComponentCreatedBody.toJSON(message.componentCreated) : void 0);
      message.componentDisposed !== void 0 && (obj.componentDisposed = message.componentDisposed ? ComponentDisposedBody.toJSON(message.componentDisposed) : void 0);
      message.componentUpdated !== void 0 && (obj.componentUpdated = message.componentUpdated ? ComponentUpdatedBody.toJSON(message.componentUpdated) : void 0);
      message.initMessagesFinished !== void 0 && (obj.initMessagesFinished = message.initMessagesFinished ? InitMessagesFinishedBody.toJSON(message.initMessagesFinished) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBasePayload();
      message.openExternalUrl = object.openExternalUrl !== void 0 && object.openExternalUrl !== null ? OpenExternalUrlBody.fromPartial(object.openExternalUrl) : void 0;
      message.openNftDialog = object.openNftDialog !== void 0 && object.openNftDialog !== null ? OpenNFTDialogBody.fromPartial(object.openNftDialog) : void 0;
      message.createEntity = object.createEntity !== void 0 && object.createEntity !== null ? CreateEntityBody.fromPartial(object.createEntity) : void 0;
      message.removeEntity = object.removeEntity !== void 0 && object.removeEntity !== null ? RemoveEntityBody.fromPartial(object.removeEntity) : void 0;
      message.updateEntityComponent = object.updateEntityComponent !== void 0 && object.updateEntityComponent !== null ? UpdateEntityComponentBody.fromPartial(object.updateEntityComponent) : void 0;
      message.attachEntityComponent = object.attachEntityComponent !== void 0 && object.attachEntityComponent !== null ? AttachEntityComponentBody.fromPartial(object.attachEntityComponent) : void 0;
      message.componentRemoved = object.componentRemoved !== void 0 && object.componentRemoved !== null ? ComponentRemovedBody.fromPartial(object.componentRemoved) : void 0;
      message.setEntityParent = object.setEntityParent !== void 0 && object.setEntityParent !== null ? SetEntityParentBody.fromPartial(object.setEntityParent) : void 0;
      message.query = object.query !== void 0 && object.query !== null ? QueryBody.fromPartial(object.query) : void 0;
      message.componentCreated = object.componentCreated !== void 0 && object.componentCreated !== null ? ComponentCreatedBody.fromPartial(object.componentCreated) : void 0;
      message.componentDisposed = object.componentDisposed !== void 0 && object.componentDisposed !== null ? ComponentDisposedBody.fromPartial(object.componentDisposed) : void 0;
      message.componentUpdated = object.componentUpdated !== void 0 && object.componentUpdated !== null ? ComponentUpdatedBody.fromPartial(object.componentUpdated) : void 0;
      message.initMessagesFinished = object.initMessagesFinished !== void 0 && object.initMessagesFinished !== null ? InitMessagesFinishedBody.fromPartial(object.initMessagesFinished) : void 0;
      return message;
    }
  };
  function createBaseEntityAction() {
    return {type: 0, tag: void 0, payload: void 0};
  }
  var EntityAction = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.type !== 0) {
        writer.uint32(8).int32(message.type);
      }
      if (message.tag !== void 0) {
        writer.uint32(18).string(message.tag);
      }
      if (message.payload !== void 0) {
        Payload.encode(message.payload, writer.uint32(26).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseEntityAction();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.type = reader.int32();
            break;
          case 2:
            message.tag = reader.string();
            break;
          case 3:
            message.payload = Payload.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        type: isSet3(object.type) ? eATypeFromJSON(object.type) : 0,
        tag: isSet3(object.tag) ? String(object.tag) : void 0,
        payload: isSet3(object.payload) ? Payload.fromJSON(object.payload) : void 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.type !== void 0 && (obj.type = eATypeToJSON(message.type));
      message.tag !== void 0 && (obj.tag = message.tag);
      message.payload !== void 0 && (obj.payload = message.payload ? Payload.toJSON(message.payload) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseEntityAction();
      message.type = object.type ?? 0;
      message.tag = object.tag ?? void 0;
      message.payload = object.payload !== void 0 && object.payload !== null ? Payload.fromPartial(object.payload) : void 0;
      return message;
    }
  };
  function createBaseManyEntityAction() {
    return {actions: []};
  }
  var ManyEntityAction = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      for (const v of message.actions) {
        EntityAction.encode(v, writer.uint32(10).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseManyEntityAction();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.actions.push(EntityAction.decode(reader, reader.uint32()));
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {actions: Array.isArray(object?.actions) ? object.actions.map((e) => EntityAction.fromJSON(e)) : []};
    },
    toJSON(message) {
      const obj = {};
      if (message.actions) {
        obj.actions = message.actions.map((e) => e ? EntityAction.toJSON(e) : void 0);
      } else {
        obj.actions = [];
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseManyEntityAction();
      message.actions = object.actions?.map((e) => EntityAction.fromPartial(e)) || [];
      return message;
    }
  };
  function createBaseSendBatchResponse() {
    return {events: []};
  }
  var SendBatchResponse = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      for (const v of message.events) {
        EventData.encode(v, writer.uint32(10).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSendBatchResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.events.push(EventData.decode(reader, reader.uint32()));
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {events: Array.isArray(object?.events) ? object.events.map((e) => EventData.fromJSON(e)) : []};
    },
    toJSON(message) {
      const obj = {};
      if (message.events) {
        obj.events = message.events.map((e) => e ? EventData.toJSON(e) : void 0);
      } else {
        obj.events = [];
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSendBatchResponse();
      message.events = object.events?.map((e) => EventData.fromPartial(e)) || [];
      return message;
    }
  };
  function createBaseUnsubscribeRequest() {
    return {eventId: ""};
  }
  var UnsubscribeRequest = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.eventId !== "") {
        writer.uint32(10).string(message.eventId);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseUnsubscribeRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.eventId = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {eventId: isSet3(object.eventId) ? String(object.eventId) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.eventId !== void 0 && (obj.eventId = message.eventId);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseUnsubscribeRequest();
      message.eventId = object.eventId ?? "";
      return message;
    }
  };
  function createBaseSubscribeRequest() {
    return {eventId: ""};
  }
  var SubscribeRequest = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.eventId !== "") {
        writer.uint32(10).string(message.eventId);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSubscribeRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.eventId = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {eventId: isSet3(object.eventId) ? String(object.eventId) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.eventId !== void 0 && (obj.eventId = message.eventId);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSubscribeRequest();
      message.eventId = object.eventId ?? "";
      return message;
    }
  };
  function createBaseSubscribeResponse() {
    return {};
  }
  var SubscribeResponse = {
    encode(_, writer = import_minimal3.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSubscribeResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseSubscribeResponse();
      return message;
    }
  };
  function createBaseUnsubscribeResponse() {
    return {};
  }
  var UnsubscribeResponse = {
    encode(_, writer = import_minimal3.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseUnsubscribeResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseUnsubscribeResponse();
      return message;
    }
  };
  function createBaseGenericPayload() {
    return {eventId: "", eventData: ""};
  }
  var GenericPayload = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.eventId !== "") {
        writer.uint32(26).string(message.eventId);
      }
      if (message.eventData !== "") {
        writer.uint32(34).string(message.eventData);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGenericPayload();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 3:
            message.eventId = reader.string();
            break;
          case 4:
            message.eventData = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        eventId: isSet3(object.eventId) ? String(object.eventId) : "",
        eventData: isSet3(object.eventData) ? String(object.eventData) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.eventId !== void 0 && (obj.eventId = message.eventId);
      message.eventData !== void 0 && (obj.eventData = message.eventData);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGenericPayload();
      message.eventId = object.eventId ?? "";
      message.eventData = object.eventData ?? "";
      return message;
    }
  };
  function createBaseReadOnlyVector3() {
    return {x: 0, y: 0, z: 0};
  }
  var ReadOnlyVector3 = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.x !== 0) {
        writer.uint32(13).float(message.x);
      }
      if (message.y !== 0) {
        writer.uint32(21).float(message.y);
      }
      if (message.z !== 0) {
        writer.uint32(29).float(message.z);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseReadOnlyVector3();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.x = reader.float();
            break;
          case 2:
            message.y = reader.float();
            break;
          case 3:
            message.z = reader.float();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        x: isSet3(object.x) ? Number(object.x) : 0,
        y: isSet3(object.y) ? Number(object.y) : 0,
        z: isSet3(object.z) ? Number(object.z) : 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.x !== void 0 && (obj.x = message.x);
      message.y !== void 0 && (obj.y = message.y);
      message.z !== void 0 && (obj.z = message.z);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseReadOnlyVector3();
      message.x = object.x ?? 0;
      message.y = object.y ?? 0;
      message.z = object.z ?? 0;
      return message;
    }
  };
  function createBaseReadOnlyQuaternion() {
    return {x: 0, y: 0, z: 0, w: 0};
  }
  var ReadOnlyQuaternion = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.x !== 0) {
        writer.uint32(13).float(message.x);
      }
      if (message.y !== 0) {
        writer.uint32(21).float(message.y);
      }
      if (message.z !== 0) {
        writer.uint32(29).float(message.z);
      }
      if (message.w !== 0) {
        writer.uint32(37).float(message.w);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseReadOnlyQuaternion();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.x = reader.float();
            break;
          case 2:
            message.y = reader.float();
            break;
          case 3:
            message.z = reader.float();
            break;
          case 4:
            message.w = reader.float();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        x: isSet3(object.x) ? Number(object.x) : 0,
        y: isSet3(object.y) ? Number(object.y) : 0,
        z: isSet3(object.z) ? Number(object.z) : 0,
        w: isSet3(object.w) ? Number(object.w) : 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.x !== void 0 && (obj.x = message.x);
      message.y !== void 0 && (obj.y = message.y);
      message.z !== void 0 && (obj.z = message.z);
      message.w !== void 0 && (obj.w = message.w);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseReadOnlyQuaternion();
      message.x = object.x ?? 0;
      message.y = object.y ?? 0;
      message.z = object.z ?? 0;
      message.w = object.w ?? 0;
      return message;
    }
  };
  function createBasePositionChangedPayload() {
    return {position: void 0, cameraPosition: void 0, playerHeight: 0};
  }
  var PositionChangedPayload = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.position !== void 0) {
        ReadOnlyVector3.encode(message.position, writer.uint32(10).fork()).ldelim();
      }
      if (message.cameraPosition !== void 0) {
        ReadOnlyVector3.encode(message.cameraPosition, writer.uint32(18).fork()).ldelim();
      }
      if (message.playerHeight !== 0) {
        writer.uint32(29).float(message.playerHeight);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBasePositionChangedPayload();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.position = ReadOnlyVector3.decode(reader, reader.uint32());
            break;
          case 2:
            message.cameraPosition = ReadOnlyVector3.decode(reader, reader.uint32());
            break;
          case 3:
            message.playerHeight = reader.float();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        position: isSet3(object.position) ? ReadOnlyVector3.fromJSON(object.position) : void 0,
        cameraPosition: isSet3(object.cameraPosition) ? ReadOnlyVector3.fromJSON(object.cameraPosition) : void 0,
        playerHeight: isSet3(object.playerHeight) ? Number(object.playerHeight) : 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.position !== void 0 && (obj.position = message.position ? ReadOnlyVector3.toJSON(message.position) : void 0);
      message.cameraPosition !== void 0 && (obj.cameraPosition = message.cameraPosition ? ReadOnlyVector3.toJSON(message.cameraPosition) : void 0);
      message.playerHeight !== void 0 && (obj.playerHeight = message.playerHeight);
      return obj;
    },
    fromPartial(object) {
      const message = createBasePositionChangedPayload();
      message.position = object.position !== void 0 && object.position !== null ? ReadOnlyVector3.fromPartial(object.position) : void 0;
      message.cameraPosition = object.cameraPosition !== void 0 && object.cameraPosition !== null ? ReadOnlyVector3.fromPartial(object.cameraPosition) : void 0;
      message.playerHeight = object.playerHeight ?? 0;
      return message;
    }
  };
  function createBaseRotationChangedPayload() {
    return {rotation: void 0, quaternion: void 0};
  }
  var RotationChangedPayload = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.rotation !== void 0) {
        ReadOnlyVector3.encode(message.rotation, writer.uint32(10).fork()).ldelim();
      }
      if (message.quaternion !== void 0) {
        ReadOnlyQuaternion.encode(message.quaternion, writer.uint32(18).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseRotationChangedPayload();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.rotation = ReadOnlyVector3.decode(reader, reader.uint32());
            break;
          case 2:
            message.quaternion = ReadOnlyQuaternion.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        rotation: isSet3(object.rotation) ? ReadOnlyVector3.fromJSON(object.rotation) : void 0,
        quaternion: isSet3(object.quaternion) ? ReadOnlyQuaternion.fromJSON(object.quaternion) : void 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.rotation !== void 0 && (obj.rotation = message.rotation ? ReadOnlyVector3.toJSON(message.rotation) : void 0);
      message.quaternion !== void 0 && (obj.quaternion = message.quaternion ? ReadOnlyQuaternion.toJSON(message.quaternion) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseRotationChangedPayload();
      message.rotation = object.rotation !== void 0 && object.rotation !== null ? ReadOnlyVector3.fromPartial(object.rotation) : void 0;
      message.quaternion = object.quaternion !== void 0 && object.quaternion !== null ? ReadOnlyQuaternion.fromPartial(object.quaternion) : void 0;
      return message;
    }
  };
  function createBaseEventData() {
    return {type: 0, generic: void 0, positionChanged: void 0, rotationChanged: void 0};
  }
  var EventData = {
    encode(message, writer = import_minimal3.default.Writer.create()) {
      if (message.type !== 0) {
        writer.uint32(8).int32(message.type);
      }
      if (message.generic !== void 0) {
        GenericPayload.encode(message.generic, writer.uint32(18).fork()).ldelim();
      }
      if (message.positionChanged !== void 0) {
        PositionChangedPayload.encode(message.positionChanged, writer.uint32(26).fork()).ldelim();
      }
      if (message.rotationChanged !== void 0) {
        RotationChangedPayload.encode(message.rotationChanged, writer.uint32(34).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal3.default.Reader ? input : new import_minimal3.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseEventData();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.type = reader.int32();
            break;
          case 2:
            message.generic = GenericPayload.decode(reader, reader.uint32());
            break;
          case 3:
            message.positionChanged = PositionChangedPayload.decode(reader, reader.uint32());
            break;
          case 4:
            message.rotationChanged = RotationChangedPayload.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        type: isSet3(object.type) ? eventDataTypeFromJSON(object.type) : 0,
        generic: isSet3(object.generic) ? GenericPayload.fromJSON(object.generic) : void 0,
        positionChanged: isSet3(object.positionChanged) ? PositionChangedPayload.fromJSON(object.positionChanged) : void 0,
        rotationChanged: isSet3(object.rotationChanged) ? RotationChangedPayload.fromJSON(object.rotationChanged) : void 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.type !== void 0 && (obj.type = eventDataTypeToJSON(message.type));
      message.generic !== void 0 && (obj.generic = message.generic ? GenericPayload.toJSON(message.generic) : void 0);
      message.positionChanged !== void 0 && (obj.positionChanged = message.positionChanged ? PositionChangedPayload.toJSON(message.positionChanged) : void 0);
      message.rotationChanged !== void 0 && (obj.rotationChanged = message.rotationChanged ? RotationChangedPayload.toJSON(message.rotationChanged) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseEventData();
      message.type = object.type ?? 0;
      message.generic = object.generic !== void 0 && object.generic !== null ? GenericPayload.fromPartial(object.generic) : void 0;
      message.positionChanged = object.positionChanged !== void 0 && object.positionChanged !== null ? PositionChangedPayload.fromPartial(object.positionChanged) : void 0;
      message.rotationChanged = object.rotationChanged !== void 0 && object.rotationChanged !== null ? RotationChangedPayload.fromPartial(object.rotationChanged) : void 0;
      return message;
    }
  };
  var EngineApiServiceDefinition = {
    name: "EngineApiService",
    fullName: "decentraland.kernel.apis.EngineApiService",
    methods: {
      sendBatch: {
        name: "SendBatch",
        requestType: ManyEntityAction,
        requestStream: false,
        responseType: SendBatchResponse,
        responseStream: false,
        options: {}
      },
      subscribe: {
        name: "Subscribe",
        requestType: SubscribeRequest,
        requestStream: false,
        responseType: SubscribeResponse,
        responseStream: false,
        options: {}
      },
      unsubscribe: {
        name: "Unsubscribe",
        requestType: UnsubscribeRequest,
        requestStream: false,
        responseType: UnsubscribeResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isSet3(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/EngineApi.ts
  function createEngineApiServiceClient(clientPort) {
    const originalService = codegen3.loadService(clientPort, EngineApiServiceDefinition);
    return originalService;
  }

  // src/worker/client/EnvironmentApi.ts
  init_web_worker_inject();
  var codegen4 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen.ts
  init_web_worker_inject();
  var import_minimal5 = __toModule(require_minimal2());

  // node_modules/@dcl/protocol/out-ts/decentraland/common/content_mapping.gen.ts
  init_web_worker_inject();
  var import_minimal4 = __toModule(require_minimal2());
  function createBaseContentMapping() {
    return {file: "", hash: ""};
  }
  var ContentMapping = {
    encode(message, writer = import_minimal4.default.Writer.create()) {
      if (message.file !== "") {
        writer.uint32(10).string(message.file);
      }
      if (message.hash !== "") {
        writer.uint32(18).string(message.hash);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal4.default.Reader ? input : new import_minimal4.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseContentMapping();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.file = reader.string();
            break;
          case 2:
            message.hash = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {file: isSet4(object.file) ? String(object.file) : "", hash: isSet4(object.hash) ? String(object.hash) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.file !== void 0 && (obj.file = message.file);
      message.hash !== void 0 && (obj.hash = message.hash);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseContentMapping();
      message.file = object.file ?? "";
      message.hash = object.hash ?? "";
      return message;
    }
  };
  function isSet4(value) {
    return value !== null && value !== void 0;
  }

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/environment_api.gen.ts
  function createBaseMinimalRunnableEntity() {
    return {content: [], metadataJson: ""};
  }
  var MinimalRunnableEntity = {
    encode(message, writer = import_minimal5.default.Writer.create()) {
      for (const v of message.content) {
        ContentMapping.encode(v, writer.uint32(10).fork()).ldelim();
      }
      if (message.metadataJson !== "") {
        writer.uint32(18).string(message.metadataJson);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseMinimalRunnableEntity();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.content.push(ContentMapping.decode(reader, reader.uint32()));
            break;
          case 2:
            message.metadataJson = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        content: Array.isArray(object?.content) ? object.content.map((e) => ContentMapping.fromJSON(e)) : [],
        metadataJson: isSet5(object.metadataJson) ? String(object.metadataJson) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      if (message.content) {
        obj.content = message.content.map((e) => e ? ContentMapping.toJSON(e) : void 0);
      } else {
        obj.content = [];
      }
      message.metadataJson !== void 0 && (obj.metadataJson = message.metadataJson);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseMinimalRunnableEntity();
      message.content = object.content?.map((e) => ContentMapping.fromPartial(e)) || [];
      message.metadataJson = object.metadataJson ?? "";
      return message;
    }
  };
  function createBaseBootstrapDataResponse() {
    return {id: "", baseUrl: "", entity: void 0, useFPSThrottling: false};
  }
  var BootstrapDataResponse = {
    encode(message, writer = import_minimal5.default.Writer.create()) {
      if (message.id !== "") {
        writer.uint32(10).string(message.id);
      }
      if (message.baseUrl !== "") {
        writer.uint32(34).string(message.baseUrl);
      }
      if (message.entity !== void 0) {
        MinimalRunnableEntity.encode(message.entity, writer.uint32(18).fork()).ldelim();
      }
      if (message.useFPSThrottling === true) {
        writer.uint32(40).bool(message.useFPSThrottling);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseBootstrapDataResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.id = reader.string();
            break;
          case 4:
            message.baseUrl = reader.string();
            break;
          case 2:
            message.entity = MinimalRunnableEntity.decode(reader, reader.uint32());
            break;
          case 5:
            message.useFPSThrottling = reader.bool();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        id: isSet5(object.id) ? String(object.id) : "",
        baseUrl: isSet5(object.baseUrl) ? String(object.baseUrl) : "",
        entity: isSet5(object.entity) ? MinimalRunnableEntity.fromJSON(object.entity) : void 0,
        useFPSThrottling: isSet5(object.useFPSThrottling) ? Boolean(object.useFPSThrottling) : false
      };
    },
    toJSON(message) {
      const obj = {};
      message.id !== void 0 && (obj.id = message.id);
      message.baseUrl !== void 0 && (obj.baseUrl = message.baseUrl);
      message.entity !== void 0 && (obj.entity = message.entity ? MinimalRunnableEntity.toJSON(message.entity) : void 0);
      message.useFPSThrottling !== void 0 && (obj.useFPSThrottling = message.useFPSThrottling);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseBootstrapDataResponse();
      message.id = object.id ?? "";
      message.baseUrl = object.baseUrl ?? "";
      message.entity = object.entity !== void 0 && object.entity !== null ? MinimalRunnableEntity.fromPartial(object.entity) : void 0;
      message.useFPSThrottling = object.useFPSThrottling ?? false;
      return message;
    }
  };
  function createBasePreviewModeResponse() {
    return {isPreview: false};
  }
  var PreviewModeResponse = {
    encode(message, writer = import_minimal5.default.Writer.create()) {
      if (message.isPreview === true) {
        writer.uint32(8).bool(message.isPreview);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBasePreviewModeResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.isPreview = reader.bool();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {isPreview: isSet5(object.isPreview) ? Boolean(object.isPreview) : false};
    },
    toJSON(message) {
      const obj = {};
      message.isPreview !== void 0 && (obj.isPreview = message.isPreview);
      return obj;
    },
    fromPartial(object) {
      const message = createBasePreviewModeResponse();
      message.isPreview = object.isPreview ?? false;
      return message;
    }
  };
  function createBaseAreUnsafeRequestAllowedResponse() {
    return {status: false};
  }
  var AreUnsafeRequestAllowedResponse = {
    encode(message, writer = import_minimal5.default.Writer.create()) {
      if (message.status === true) {
        writer.uint32(8).bool(message.status);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseAreUnsafeRequestAllowedResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.status = reader.bool();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {status: isSet5(object.status) ? Boolean(object.status) : false};
    },
    toJSON(message) {
      const obj = {};
      message.status !== void 0 && (obj.status = message.status);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseAreUnsafeRequestAllowedResponse();
      message.status = object.status ?? false;
      return message;
    }
  };
  function createBaseGetPlatformResponse() {
    return {platform: ""};
  }
  var GetPlatformResponse = {
    encode(message, writer = import_minimal5.default.Writer.create()) {
      if (message.platform !== "") {
        writer.uint32(10).string(message.platform);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetPlatformResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.platform = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {platform: isSet5(object.platform) ? String(object.platform) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.platform !== void 0 && (obj.platform = message.platform);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetPlatformResponse();
      message.platform = object.platform ?? "";
      return message;
    }
  };
  function createBaseEnvironmentRealm() {
    return {domain: "", layer: "", room: "", serverName: "", displayName: "", protocol: ""};
  }
  var EnvironmentRealm = {
    encode(message, writer = import_minimal5.default.Writer.create()) {
      if (message.domain !== "") {
        writer.uint32(10).string(message.domain);
      }
      if (message.layer !== "") {
        writer.uint32(18).string(message.layer);
      }
      if (message.room !== "") {
        writer.uint32(26).string(message.room);
      }
      if (message.serverName !== "") {
        writer.uint32(34).string(message.serverName);
      }
      if (message.displayName !== "") {
        writer.uint32(42).string(message.displayName);
      }
      if (message.protocol !== "") {
        writer.uint32(50).string(message.protocol);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseEnvironmentRealm();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.domain = reader.string();
            break;
          case 2:
            message.layer = reader.string();
            break;
          case 3:
            message.room = reader.string();
            break;
          case 4:
            message.serverName = reader.string();
            break;
          case 5:
            message.displayName = reader.string();
            break;
          case 6:
            message.protocol = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        domain: isSet5(object.domain) ? String(object.domain) : "",
        layer: isSet5(object.layer) ? String(object.layer) : "",
        room: isSet5(object.room) ? String(object.room) : "",
        serverName: isSet5(object.serverName) ? String(object.serverName) : "",
        displayName: isSet5(object.displayName) ? String(object.displayName) : "",
        protocol: isSet5(object.protocol) ? String(object.protocol) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.domain !== void 0 && (obj.domain = message.domain);
      message.layer !== void 0 && (obj.layer = message.layer);
      message.room !== void 0 && (obj.room = message.room);
      message.serverName !== void 0 && (obj.serverName = message.serverName);
      message.displayName !== void 0 && (obj.displayName = message.displayName);
      message.protocol !== void 0 && (obj.protocol = message.protocol);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseEnvironmentRealm();
      message.domain = object.domain ?? "";
      message.layer = object.layer ?? "";
      message.room = object.room ?? "";
      message.serverName = object.serverName ?? "";
      message.displayName = object.displayName ?? "";
      message.protocol = object.protocol ?? "";
      return message;
    }
  };
  function createBaseGetCurrentRealmResponse() {
    return {currentRealm: void 0};
  }
  var GetCurrentRealmResponse = {
    encode(message, writer = import_minimal5.default.Writer.create()) {
      if (message.currentRealm !== void 0) {
        EnvironmentRealm.encode(message.currentRealm, writer.uint32(10).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetCurrentRealmResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.currentRealm = EnvironmentRealm.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {currentRealm: isSet5(object.currentRealm) ? EnvironmentRealm.fromJSON(object.currentRealm) : void 0};
    },
    toJSON(message) {
      const obj = {};
      message.currentRealm !== void 0 && (obj.currentRealm = message.currentRealm ? EnvironmentRealm.toJSON(message.currentRealm) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetCurrentRealmResponse();
      message.currentRealm = object.currentRealm !== void 0 && object.currentRealm !== null ? EnvironmentRealm.fromPartial(object.currentRealm) : void 0;
      return message;
    }
  };
  function createBaseGetExplorerConfigurationResponse() {
    return {clientUri: "", configurations: {}};
  }
  var GetExplorerConfigurationResponse = {
    encode(message, writer = import_minimal5.default.Writer.create()) {
      if (message.clientUri !== "") {
        writer.uint32(10).string(message.clientUri);
      }
      Object.entries(message.configurations).forEach(([key, value]) => {
        GetExplorerConfigurationResponse_ConfigurationsEntry.encode({key, value}, writer.uint32(18).fork()).ldelim();
      });
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetExplorerConfigurationResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.clientUri = reader.string();
            break;
          case 2:
            const entry2 = GetExplorerConfigurationResponse_ConfigurationsEntry.decode(reader, reader.uint32());
            if (entry2.value !== void 0) {
              message.configurations[entry2.key] = entry2.value;
            }
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        clientUri: isSet5(object.clientUri) ? String(object.clientUri) : "",
        configurations: isObject(object.configurations) ? Object.entries(object.configurations).reduce((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {}) : {}
      };
    },
    toJSON(message) {
      const obj = {};
      message.clientUri !== void 0 && (obj.clientUri = message.clientUri);
      obj.configurations = {};
      if (message.configurations) {
        Object.entries(message.configurations).forEach(([k, v]) => {
          obj.configurations[k] = v;
        });
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetExplorerConfigurationResponse();
      message.clientUri = object.clientUri ?? "";
      message.configurations = Object.entries(object.configurations ?? {}).reduce((acc, [key, value]) => {
        if (value !== void 0) {
          acc[key] = String(value);
        }
        return acc;
      }, {});
      return message;
    }
  };
  function createBaseGetExplorerConfigurationResponse_ConfigurationsEntry() {
    return {key: "", value: ""};
  }
  var GetExplorerConfigurationResponse_ConfigurationsEntry = {
    encode(message, writer = import_minimal5.default.Writer.create()) {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetExplorerConfigurationResponse_ConfigurationsEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.key = reader.string();
            break;
          case 2:
            message.value = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {key: isSet5(object.key) ? String(object.key) : "", value: isSet5(object.value) ? String(object.value) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.key !== void 0 && (obj.key = message.key);
      message.value !== void 0 && (obj.value = message.value);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetExplorerConfigurationResponse_ConfigurationsEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    }
  };
  function createBaseGetDecentralandTimeResponse() {
    return {seconds: 0};
  }
  var GetDecentralandTimeResponse = {
    encode(message, writer = import_minimal5.default.Writer.create()) {
      if (message.seconds !== 0) {
        writer.uint32(8).int32(message.seconds);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetDecentralandTimeResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.seconds = reader.int32();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {seconds: isSet5(object.seconds) ? Number(object.seconds) : 0};
    },
    toJSON(message) {
      const obj = {};
      message.seconds !== void 0 && (obj.seconds = Math.round(message.seconds));
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetDecentralandTimeResponse();
      message.seconds = object.seconds ?? 0;
      return message;
    }
  };
  function createBaseGetBootstrapDataRequest() {
    return {};
  }
  var GetBootstrapDataRequest = {
    encode(_, writer = import_minimal5.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetBootstrapDataRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetBootstrapDataRequest();
      return message;
    }
  };
  function createBaseIsPreviewModeRequest() {
    return {};
  }
  var IsPreviewModeRequest = {
    encode(_, writer = import_minimal5.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseIsPreviewModeRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseIsPreviewModeRequest();
      return message;
    }
  };
  function createBaseGetPlatformRequest() {
    return {};
  }
  var GetPlatformRequest = {
    encode(_, writer = import_minimal5.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetPlatformRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetPlatformRequest();
      return message;
    }
  };
  function createBaseAreUnsafeRequestAllowedRequest() {
    return {};
  }
  var AreUnsafeRequestAllowedRequest = {
    encode(_, writer = import_minimal5.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseAreUnsafeRequestAllowedRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseAreUnsafeRequestAllowedRequest();
      return message;
    }
  };
  function createBaseGetCurrentRealmRequest() {
    return {};
  }
  var GetCurrentRealmRequest = {
    encode(_, writer = import_minimal5.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetCurrentRealmRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetCurrentRealmRequest();
      return message;
    }
  };
  function createBaseGetExplorerConfigurationRequest() {
    return {};
  }
  var GetExplorerConfigurationRequest = {
    encode(_, writer = import_minimal5.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetExplorerConfigurationRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetExplorerConfigurationRequest();
      return message;
    }
  };
  function createBaseGetDecentralandTimeRequest() {
    return {};
  }
  var GetDecentralandTimeRequest = {
    encode(_, writer = import_minimal5.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal5.default.Reader ? input : new import_minimal5.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetDecentralandTimeRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetDecentralandTimeRequest();
      return message;
    }
  };
  var EnvironmentApiServiceDefinition = {
    name: "EnvironmentApiService",
    fullName: "decentraland.kernel.apis.EnvironmentApiService",
    methods: {
      getBootstrapData: {
        name: "GetBootstrapData",
        requestType: GetBootstrapDataRequest,
        requestStream: false,
        responseType: BootstrapDataResponse,
        responseStream: false,
        options: {}
      },
      isPreviewMode: {
        name: "IsPreviewMode",
        requestType: IsPreviewModeRequest,
        requestStream: false,
        responseType: PreviewModeResponse,
        responseStream: false,
        options: {}
      },
      getPlatform: {
        name: "GetPlatform",
        requestType: GetPlatformRequest,
        requestStream: false,
        responseType: GetPlatformResponse,
        responseStream: false,
        options: {}
      },
      areUnsafeRequestAllowed: {
        name: "AreUnsafeRequestAllowed",
        requestType: AreUnsafeRequestAllowedRequest,
        requestStream: false,
        responseType: AreUnsafeRequestAllowedResponse,
        responseStream: false,
        options: {}
      },
      getCurrentRealm: {
        name: "GetCurrentRealm",
        requestType: GetCurrentRealmRequest,
        requestStream: false,
        responseType: GetCurrentRealmResponse,
        responseStream: false,
        options: {}
      },
      getExplorerConfiguration: {
        name: "GetExplorerConfiguration",
        requestType: GetExplorerConfigurationRequest,
        requestStream: false,
        responseType: GetExplorerConfigurationResponse,
        responseStream: false,
        options: {}
      },
      getDecentralandTime: {
        name: "GetDecentralandTime",
        requestType: GetDecentralandTimeRequest,
        requestStream: false,
        responseType: GetDecentralandTimeResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isObject(value) {
    return typeof value === "object" && value !== null;
  }
  function isSet5(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/EnvironmentApi.ts
  var Platform;
  (function(Platform2) {
    Platform2["DESKTOP"] = "desktop";
    Platform2["BROWSER"] = "browser";
  })(Platform || (Platform = {}));
  var EnvironmentApiServiceClient;
  (function(EnvironmentApiServiceClient2) {
    function create(clientPort) {
      return codegen4.loadService(clientPort, EnvironmentApiServiceDefinition);
    }
    EnvironmentApiServiceClient2.create = create;
    function createLegacy(clientPort) {
      const originalService = codegen4.loadService(clientPort, EnvironmentApiServiceDefinition);
      return {
        ...originalService,
        async getBootstrapData() {
          const res = await originalService.getBootstrapData({});
          const sceneMetadata = JSON.parse(res.entity?.metadataJson || "{}");
          return {
            sceneId: res.id,
            name: sceneMetadata.display?.title || "Unnamed",
            main: sceneMetadata.main,
            baseUrl: res.baseUrl,
            mappings: res.entity?.content || [],
            useFPSThrottling: res.useFPSThrottling,
            data: sceneMetadata
          };
        },
        async areUnsafeRequestAllowed() {
          return (await originalService.areUnsafeRequestAllowed({})).status;
        },
        async getCurrentRealm() {
          const res = await originalService.getCurrentRealm({});
          return res.currentRealm;
        },
        async isPreviewMode() {
          const res = await originalService.isPreviewMode({});
          return res.isPreview;
        },
        async getExplorerConfiguration() {
          return await originalService.getExplorerConfiguration({});
        },
        async getPlatform() {
          return (await originalService.getPlatform({})).platform;
        },
        async getDecentralandTime() {
          return await originalService.getDecentralandTime({});
        }
      };
    }
    EnvironmentApiServiceClient2.createLegacy = createLegacy;
  })(EnvironmentApiServiceClient || (EnvironmentApiServiceClient = {}));

  // src/worker/client/EthereumController.ts
  init_web_worker_inject();
  var codegen5 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/ethereum_controller.gen.ts
  init_web_worker_inject();
  var import_minimal6 = __toModule(require_minimal2());
  function createBaseRequirePaymentRequest() {
    return {toAddress: "", amount: 0, currency: ""};
  }
  var RequirePaymentRequest = {
    encode(message, writer = import_minimal6.default.Writer.create()) {
      if (message.toAddress !== "") {
        writer.uint32(10).string(message.toAddress);
      }
      if (message.amount !== 0) {
        writer.uint32(21).float(message.amount);
      }
      if (message.currency !== "") {
        writer.uint32(26).string(message.currency);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseRequirePaymentRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.toAddress = reader.string();
            break;
          case 2:
            message.amount = reader.float();
            break;
          case 3:
            message.currency = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        toAddress: isSet6(object.toAddress) ? String(object.toAddress) : "",
        amount: isSet6(object.amount) ? Number(object.amount) : 0,
        currency: isSet6(object.currency) ? String(object.currency) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.toAddress !== void 0 && (obj.toAddress = message.toAddress);
      message.amount !== void 0 && (obj.amount = message.amount);
      message.currency !== void 0 && (obj.currency = message.currency);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseRequirePaymentRequest();
      message.toAddress = object.toAddress ?? "";
      message.amount = object.amount ?? 0;
      message.currency = object.currency ?? "";
      return message;
    }
  };
  function createBaseRequirePaymentResponse() {
    return {jsonAnyResponse: ""};
  }
  var RequirePaymentResponse = {
    encode(message, writer = import_minimal6.default.Writer.create()) {
      if (message.jsonAnyResponse !== "") {
        writer.uint32(10).string(message.jsonAnyResponse);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseRequirePaymentResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.jsonAnyResponse = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {jsonAnyResponse: isSet6(object.jsonAnyResponse) ? String(object.jsonAnyResponse) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.jsonAnyResponse !== void 0 && (obj.jsonAnyResponse = message.jsonAnyResponse);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseRequirePaymentResponse();
      message.jsonAnyResponse = object.jsonAnyResponse ?? "";
      return message;
    }
  };
  function createBaseSignMessageRequest() {
    return {message: {}};
  }
  var SignMessageRequest = {
    encode(message, writer = import_minimal6.default.Writer.create()) {
      Object.entries(message.message).forEach(([key, value]) => {
        SignMessageRequest_MessageEntry.encode({key, value}, writer.uint32(10).fork()).ldelim();
      });
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSignMessageRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            const entry1 = SignMessageRequest_MessageEntry.decode(reader, reader.uint32());
            if (entry1.value !== void 0) {
              message.message[entry1.key] = entry1.value;
            }
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        message: isObject2(object.message) ? Object.entries(object.message).reduce((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {}) : {}
      };
    },
    toJSON(message) {
      const obj = {};
      obj.message = {};
      if (message.message) {
        Object.entries(message.message).forEach(([k, v]) => {
          obj.message[k] = v;
        });
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSignMessageRequest();
      message.message = Object.entries(object.message ?? {}).reduce((acc, [key, value]) => {
        if (value !== void 0) {
          acc[key] = String(value);
        }
        return acc;
      }, {});
      return message;
    }
  };
  function createBaseSignMessageRequest_MessageEntry() {
    return {key: "", value: ""};
  }
  var SignMessageRequest_MessageEntry = {
    encode(message, writer = import_minimal6.default.Writer.create()) {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSignMessageRequest_MessageEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.key = reader.string();
            break;
          case 2:
            message.value = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {key: isSet6(object.key) ? String(object.key) : "", value: isSet6(object.value) ? String(object.value) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.key !== void 0 && (obj.key = message.key);
      message.value !== void 0 && (obj.value = message.value);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSignMessageRequest_MessageEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    }
  };
  function createBaseSignMessageResponse() {
    return {message: "", hexEncodedMessage: "", signature: ""};
  }
  var SignMessageResponse = {
    encode(message, writer = import_minimal6.default.Writer.create()) {
      if (message.message !== "") {
        writer.uint32(10).string(message.message);
      }
      if (message.hexEncodedMessage !== "") {
        writer.uint32(18).string(message.hexEncodedMessage);
      }
      if (message.signature !== "") {
        writer.uint32(26).string(message.signature);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSignMessageResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.message = reader.string();
            break;
          case 2:
            message.hexEncodedMessage = reader.string();
            break;
          case 3:
            message.signature = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        message: isSet6(object.message) ? String(object.message) : "",
        hexEncodedMessage: isSet6(object.hexEncodedMessage) ? String(object.hexEncodedMessage) : "",
        signature: isSet6(object.signature) ? String(object.signature) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.message !== void 0 && (obj.message = message.message);
      message.hexEncodedMessage !== void 0 && (obj.hexEncodedMessage = message.hexEncodedMessage);
      message.signature !== void 0 && (obj.signature = message.signature);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSignMessageResponse();
      message.message = object.message ?? "";
      message.hexEncodedMessage = object.hexEncodedMessage ?? "";
      message.signature = object.signature ?? "";
      return message;
    }
  };
  function createBaseConvertMessageToObjectRequest() {
    return {message: ""};
  }
  var ConvertMessageToObjectRequest = {
    encode(message, writer = import_minimal6.default.Writer.create()) {
      if (message.message !== "") {
        writer.uint32(10).string(message.message);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseConvertMessageToObjectRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.message = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {message: isSet6(object.message) ? String(object.message) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.message !== void 0 && (obj.message = message.message);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseConvertMessageToObjectRequest();
      message.message = object.message ?? "";
      return message;
    }
  };
  function createBaseConvertMessageToObjectResponse() {
    return {dict: {}};
  }
  var ConvertMessageToObjectResponse = {
    encode(message, writer = import_minimal6.default.Writer.create()) {
      Object.entries(message.dict).forEach(([key, value]) => {
        ConvertMessageToObjectResponse_DictEntry.encode({key, value}, writer.uint32(10).fork()).ldelim();
      });
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseConvertMessageToObjectResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            const entry1 = ConvertMessageToObjectResponse_DictEntry.decode(reader, reader.uint32());
            if (entry1.value !== void 0) {
              message.dict[entry1.key] = entry1.value;
            }
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        dict: isObject2(object.dict) ? Object.entries(object.dict).reduce((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {}) : {}
      };
    },
    toJSON(message) {
      const obj = {};
      obj.dict = {};
      if (message.dict) {
        Object.entries(message.dict).forEach(([k, v]) => {
          obj.dict[k] = v;
        });
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseConvertMessageToObjectResponse();
      message.dict = Object.entries(object.dict ?? {}).reduce((acc, [key, value]) => {
        if (value !== void 0) {
          acc[key] = String(value);
        }
        return acc;
      }, {});
      return message;
    }
  };
  function createBaseConvertMessageToObjectResponse_DictEntry() {
    return {key: "", value: ""};
  }
  var ConvertMessageToObjectResponse_DictEntry = {
    encode(message, writer = import_minimal6.default.Writer.create()) {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseConvertMessageToObjectResponse_DictEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.key = reader.string();
            break;
          case 2:
            message.value = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {key: isSet6(object.key) ? String(object.key) : "", value: isSet6(object.value) ? String(object.value) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.key !== void 0 && (obj.key = message.key);
      message.value !== void 0 && (obj.value = message.value);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseConvertMessageToObjectResponse_DictEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    }
  };
  function createBaseSendAsyncRequest() {
    return {id: 0, method: "", jsonParams: ""};
  }
  var SendAsyncRequest = {
    encode(message, writer = import_minimal6.default.Writer.create()) {
      if (message.id !== 0) {
        writer.uint32(8).int32(message.id);
      }
      if (message.method !== "") {
        writer.uint32(18).string(message.method);
      }
      if (message.jsonParams !== "") {
        writer.uint32(26).string(message.jsonParams);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSendAsyncRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.id = reader.int32();
            break;
          case 2:
            message.method = reader.string();
            break;
          case 3:
            message.jsonParams = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        id: isSet6(object.id) ? Number(object.id) : 0,
        method: isSet6(object.method) ? String(object.method) : "",
        jsonParams: isSet6(object.jsonParams) ? String(object.jsonParams) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.id !== void 0 && (obj.id = Math.round(message.id));
      message.method !== void 0 && (obj.method = message.method);
      message.jsonParams !== void 0 && (obj.jsonParams = message.jsonParams);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSendAsyncRequest();
      message.id = object.id ?? 0;
      message.method = object.method ?? "";
      message.jsonParams = object.jsonParams ?? "";
      return message;
    }
  };
  function createBaseSendAsyncResponse() {
    return {jsonAnyResponse: ""};
  }
  var SendAsyncResponse = {
    encode(message, writer = import_minimal6.default.Writer.create()) {
      if (message.jsonAnyResponse !== "") {
        writer.uint32(10).string(message.jsonAnyResponse);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSendAsyncResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.jsonAnyResponse = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {jsonAnyResponse: isSet6(object.jsonAnyResponse) ? String(object.jsonAnyResponse) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.jsonAnyResponse !== void 0 && (obj.jsonAnyResponse = message.jsonAnyResponse);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSendAsyncResponse();
      message.jsonAnyResponse = object.jsonAnyResponse ?? "";
      return message;
    }
  };
  function createBaseGetUserAccountRequest() {
    return {};
  }
  var GetUserAccountRequest = {
    encode(_, writer = import_minimal6.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetUserAccountRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetUserAccountRequest();
      return message;
    }
  };
  function createBaseGetUserAccountResponse() {
    return {address: void 0};
  }
  var GetUserAccountResponse = {
    encode(message, writer = import_minimal6.default.Writer.create()) {
      if (message.address !== void 0) {
        writer.uint32(10).string(message.address);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal6.default.Reader ? input : new import_minimal6.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetUserAccountResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.address = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {address: isSet6(object.address) ? String(object.address) : void 0};
    },
    toJSON(message) {
      const obj = {};
      message.address !== void 0 && (obj.address = message.address);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetUserAccountResponse();
      message.address = object.address ?? void 0;
      return message;
    }
  };
  var EthereumControllerServiceDefinition = {
    name: "EthereumControllerService",
    fullName: "decentraland.kernel.apis.EthereumControllerService",
    methods: {
      requirePayment: {
        name: "RequirePayment",
        requestType: RequirePaymentRequest,
        requestStream: false,
        responseType: RequirePaymentResponse,
        responseStream: false,
        options: {}
      },
      signMessage: {
        name: "SignMessage",
        requestType: SignMessageRequest,
        requestStream: false,
        responseType: SignMessageResponse,
        responseStream: false,
        options: {}
      },
      convertMessageToObject: {
        name: "ConvertMessageToObject",
        requestType: ConvertMessageToObjectRequest,
        requestStream: false,
        responseType: ConvertMessageToObjectResponse,
        responseStream: false,
        options: {}
      },
      sendAsync: {
        name: "SendAsync",
        requestType: SendAsyncRequest,
        requestStream: false,
        responseType: SendAsyncResponse,
        responseStream: false,
        options: {}
      },
      getUserAccount: {
        name: "GetUserAccount",
        requestType: GetUserAccountRequest,
        requestStream: false,
        responseType: GetUserAccountResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isObject2(value) {
    return typeof value === "object" && value !== null;
  }
  function isSet6(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/EthereumController.ts
  var EthereumControllerServiceClient;
  (function(EthereumControllerServiceClient2) {
    function create(clientPort) {
      return codegen5.loadService(clientPort, EthereumControllerServiceDefinition);
    }
    EthereumControllerServiceClient2.create = create;
    function createLegacy(clientPort) {
      const originalService = codegen5.loadService(clientPort, EthereumControllerServiceDefinition);
      return {
        ...originalService,
        async requirePayment(toAddress, amount, currency) {
          const response = await originalService.requirePayment({toAddress, amount, currency});
          return JSON.parse(response.jsonAnyResponse);
        },
        async signMessage(message) {
          return await originalService.signMessage({message});
        },
        async convertMessageToObject(message) {
          return (await originalService.convertMessageToObject({message})).dict;
        },
        async sendAsync(message) {
          return JSON.parse((await originalService.sendAsync({
            id: message.id,
            method: message.method,
            jsonParams: JSON.stringify(message.params)
          })).jsonAnyResponse);
        },
        async getUserAccount() {
          return (await originalService.getUserAccount({})).address;
        }
      };
    }
    EthereumControllerServiceClient2.createLegacy = createLegacy;
  })(EthereumControllerServiceClient || (EthereumControllerServiceClient = {}));

  // src/worker/client/ExperimentalApi.ts
  init_web_worker_inject();
  var codegen6 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/experimental_api.gen.ts
  init_web_worker_inject();
  var import_minimal7 = __toModule(require_minimal2());
  function createBaseSendToRendererRequest() {
    return {data: new Uint8Array()};
  }
  var SendToRendererRequest = {
    encode(message, writer = import_minimal7.default.Writer.create()) {
      if (message.data.length !== 0) {
        writer.uint32(10).bytes(message.data);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal7.default.Reader ? input : new import_minimal7.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSendToRendererRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.data = reader.bytes();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {data: isSet7(object.data) ? bytesFromBase64(object.data) : new Uint8Array()};
    },
    toJSON(message) {
      const obj = {};
      message.data !== void 0 && (obj.data = base64FromBytes(message.data !== void 0 ? message.data : new Uint8Array()));
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSendToRendererRequest();
      message.data = object.data ?? new Uint8Array();
      return message;
    }
  };
  function createBaseSendToResponse() {
    return {};
  }
  var SendToResponse = {
    encode(_, writer = import_minimal7.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal7.default.Reader ? input : new import_minimal7.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSendToResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseSendToResponse();
      return message;
    }
  };
  function createBaseMessageFromRendererRequest() {
    return {};
  }
  var MessageFromRendererRequest = {
    encode(_, writer = import_minimal7.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal7.default.Reader ? input : new import_minimal7.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseMessageFromRendererRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseMessageFromRendererRequest();
      return message;
    }
  };
  function createBaseMessageFromRendererResponse() {
    return {data: []};
  }
  var MessageFromRendererResponse = {
    encode(message, writer = import_minimal7.default.Writer.create()) {
      for (const v of message.data) {
        writer.uint32(10).bytes(v);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal7.default.Reader ? input : new import_minimal7.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseMessageFromRendererResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.data.push(reader.bytes());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {data: Array.isArray(object?.data) ? object.data.map((e) => bytesFromBase64(e)) : []};
    },
    toJSON(message) {
      const obj = {};
      if (message.data) {
        obj.data = message.data.map((e) => base64FromBytes(e !== void 0 ? e : new Uint8Array()));
      } else {
        obj.data = [];
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseMessageFromRendererResponse();
      message.data = object.data?.map((e) => e) || [];
      return message;
    }
  };
  var ExperimentalApiServiceDefinition = {
    name: "ExperimentalApiService",
    fullName: "decentraland.kernel.apis.ExperimentalApiService",
    methods: {
      sendToRenderer: {
        name: "SendToRenderer",
        requestType: SendToRendererRequest,
        requestStream: false,
        responseType: SendToResponse,
        responseStream: false,
        options: {}
      },
      messageFromRenderer: {
        name: "MessageFromRenderer",
        requestType: MessageFromRendererRequest,
        requestStream: false,
        responseType: MessageFromRendererResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  var globalThis2 = (() => {
    if (typeof globalThis2 !== "undefined") {
      return globalThis2;
    }
    if (typeof self !== "undefined") {
      return self;
    }
    if (typeof window !== "undefined") {
      return window;
    }
    if (typeof global !== "undefined") {
      return global;
    }
    throw "Unable to locate global object";
  })();
  function bytesFromBase64(b64) {
    if (globalThis2.Buffer) {
      return Uint8Array.from(globalThis2.Buffer.from(b64, "base64"));
    } else {
      const bin = globalThis2.atob(b64);
      const arr = new Uint8Array(bin.length);
      for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
      }
      return arr;
    }
  }
  function base64FromBytes(arr) {
    if (globalThis2.Buffer) {
      return globalThis2.Buffer.from(arr).toString("base64");
    } else {
      const bin = [];
      arr.forEach((byte) => {
        bin.push(String.fromCharCode(byte));
      });
      return globalThis2.btoa(bin.join(""));
    }
  }
  function isSet7(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/ExperimentalApi.ts
  function createExperimentalApiServiceClient(clientPort) {
    return codegen6.loadService(clientPort, ExperimentalApiServiceDefinition);
  }

  // src/worker/client/ParcelIdentity.ts
  init_web_worker_inject();
  var codegen7 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/parcel_identity.gen.ts
  init_web_worker_inject();
  var import_minimal8 = __toModule(require_minimal2());
  function createBaseMappingsResponse() {
    return {parcelId: "", rootCid: "", contents: []};
  }
  var MappingsResponse = {
    encode(message, writer = import_minimal8.default.Writer.create()) {
      if (message.parcelId !== "") {
        writer.uint32(10).string(message.parcelId);
      }
      if (message.rootCid !== "") {
        writer.uint32(18).string(message.rootCid);
      }
      for (const v of message.contents) {
        ContentMapping.encode(v, writer.uint32(26).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal8.default.Reader ? input : new import_minimal8.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseMappingsResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.parcelId = reader.string();
            break;
          case 2:
            message.rootCid = reader.string();
            break;
          case 3:
            message.contents.push(ContentMapping.decode(reader, reader.uint32()));
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        parcelId: isSet8(object.parcelId) ? String(object.parcelId) : "",
        rootCid: isSet8(object.rootCid) ? String(object.rootCid) : "",
        contents: Array.isArray(object?.contents) ? object.contents.map((e) => ContentMapping.fromJSON(e)) : []
      };
    },
    toJSON(message) {
      const obj = {};
      message.parcelId !== void 0 && (obj.parcelId = message.parcelId);
      message.rootCid !== void 0 && (obj.rootCid = message.rootCid);
      if (message.contents) {
        obj.contents = message.contents.map((e) => e ? ContentMapping.toJSON(e) : void 0);
      } else {
        obj.contents = [];
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseMappingsResponse();
      message.parcelId = object.parcelId ?? "";
      message.rootCid = object.rootCid ?? "";
      message.contents = object.contents?.map((e) => ContentMapping.fromPartial(e)) || [];
      return message;
    }
  };
  function createBaseLand() {
    return {sceneId: "", sceneJsonData: "", baseUrl: "", baseUrlBundles: "", mappingsResponse: void 0};
  }
  var Land = {
    encode(message, writer = import_minimal8.default.Writer.create()) {
      if (message.sceneId !== "") {
        writer.uint32(10).string(message.sceneId);
      }
      if (message.sceneJsonData !== "") {
        writer.uint32(18).string(message.sceneJsonData);
      }
      if (message.baseUrl !== "") {
        writer.uint32(26).string(message.baseUrl);
      }
      if (message.baseUrlBundles !== "") {
        writer.uint32(34).string(message.baseUrlBundles);
      }
      if (message.mappingsResponse !== void 0) {
        MappingsResponse.encode(message.mappingsResponse, writer.uint32(42).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal8.default.Reader ? input : new import_minimal8.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseLand();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.sceneId = reader.string();
            break;
          case 2:
            message.sceneJsonData = reader.string();
            break;
          case 3:
            message.baseUrl = reader.string();
            break;
          case 4:
            message.baseUrlBundles = reader.string();
            break;
          case 5:
            message.mappingsResponse = MappingsResponse.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        sceneId: isSet8(object.sceneId) ? String(object.sceneId) : "",
        sceneJsonData: isSet8(object.sceneJsonData) ? String(object.sceneJsonData) : "",
        baseUrl: isSet8(object.baseUrl) ? String(object.baseUrl) : "",
        baseUrlBundles: isSet8(object.baseUrlBundles) ? String(object.baseUrlBundles) : "",
        mappingsResponse: isSet8(object.mappingsResponse) ? MappingsResponse.fromJSON(object.mappingsResponse) : void 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.sceneId !== void 0 && (obj.sceneId = message.sceneId);
      message.sceneJsonData !== void 0 && (obj.sceneJsonData = message.sceneJsonData);
      message.baseUrl !== void 0 && (obj.baseUrl = message.baseUrl);
      message.baseUrlBundles !== void 0 && (obj.baseUrlBundles = message.baseUrlBundles);
      message.mappingsResponse !== void 0 && (obj.mappingsResponse = message.mappingsResponse ? MappingsResponse.toJSON(message.mappingsResponse) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseLand();
      message.sceneId = object.sceneId ?? "";
      message.sceneJsonData = object.sceneJsonData ?? "";
      message.baseUrl = object.baseUrl ?? "";
      message.baseUrlBundles = object.baseUrlBundles ?? "";
      message.mappingsResponse = object.mappingsResponse !== void 0 && object.mappingsResponse !== null ? MappingsResponse.fromPartial(object.mappingsResponse) : void 0;
      return message;
    }
  };
  function createBaseGetParcelRequest() {
    return {};
  }
  var GetParcelRequest = {
    encode(_, writer = import_minimal8.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal8.default.Reader ? input : new import_minimal8.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetParcelRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetParcelRequest();
      return message;
    }
  };
  function createBaseGetParcelResponse() {
    return {land: void 0, cid: ""};
  }
  var GetParcelResponse = {
    encode(message, writer = import_minimal8.default.Writer.create()) {
      if (message.land !== void 0) {
        Land.encode(message.land, writer.uint32(10).fork()).ldelim();
      }
      if (message.cid !== "") {
        writer.uint32(18).string(message.cid);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal8.default.Reader ? input : new import_minimal8.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetParcelResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.land = Land.decode(reader, reader.uint32());
            break;
          case 2:
            message.cid = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        land: isSet8(object.land) ? Land.fromJSON(object.land) : void 0,
        cid: isSet8(object.cid) ? String(object.cid) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.land !== void 0 && (obj.land = message.land ? Land.toJSON(message.land) : void 0);
      message.cid !== void 0 && (obj.cid = message.cid);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetParcelResponse();
      message.land = object.land !== void 0 && object.land !== null ? Land.fromPartial(object.land) : void 0;
      message.cid = object.cid ?? "";
      return message;
    }
  };
  function createBaseGetSceneIdRequest() {
    return {};
  }
  var GetSceneIdRequest = {
    encode(_, writer = import_minimal8.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal8.default.Reader ? input : new import_minimal8.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetSceneIdRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetSceneIdRequest();
      return message;
    }
  };
  function createBaseGetSceneIdResponse() {
    return {sceneId: ""};
  }
  var GetSceneIdResponse = {
    encode(message, writer = import_minimal8.default.Writer.create()) {
      if (message.sceneId !== "") {
        writer.uint32(10).string(message.sceneId);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal8.default.Reader ? input : new import_minimal8.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetSceneIdResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.sceneId = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {sceneId: isSet8(object.sceneId) ? String(object.sceneId) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.sceneId !== void 0 && (obj.sceneId = message.sceneId);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetSceneIdResponse();
      message.sceneId = object.sceneId ?? "";
      return message;
    }
  };
  function createBaseGetIsEmptyRequest() {
    return {};
  }
  var GetIsEmptyRequest = {
    encode(_, writer = import_minimal8.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal8.default.Reader ? input : new import_minimal8.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetIsEmptyRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetIsEmptyRequest();
      return message;
    }
  };
  function createBaseGetIsEmptyResponse() {
    return {isEmpty: false};
  }
  var GetIsEmptyResponse = {
    encode(message, writer = import_minimal8.default.Writer.create()) {
      if (message.isEmpty === true) {
        writer.uint32(8).bool(message.isEmpty);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal8.default.Reader ? input : new import_minimal8.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetIsEmptyResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.isEmpty = reader.bool();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {isEmpty: isSet8(object.isEmpty) ? Boolean(object.isEmpty) : false};
    },
    toJSON(message) {
      const obj = {};
      message.isEmpty !== void 0 && (obj.isEmpty = message.isEmpty);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetIsEmptyResponse();
      message.isEmpty = object.isEmpty ?? false;
      return message;
    }
  };
  var ParcelIdentityServiceDefinition = {
    name: "ParcelIdentityService",
    fullName: "decentraland.kernel.apis.ParcelIdentityService",
    methods: {
      getParcel: {
        name: "GetParcel",
        requestType: GetParcelRequest,
        requestStream: false,
        responseType: GetParcelResponse,
        responseStream: false,
        options: {}
      },
      getSceneId: {
        name: "GetSceneId",
        requestType: GetSceneIdRequest,
        requestStream: false,
        responseType: GetSceneIdResponse,
        responseStream: false,
        options: {}
      },
      getIsEmpty: {
        name: "GetIsEmpty",
        requestType: GetIsEmptyRequest,
        requestStream: false,
        responseType: GetIsEmptyResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isSet8(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/ParcelIdentity.ts
  var ParcelIdentityServiceClient;
  (function(ParcelIdentityServiceClient2) {
    function create(clientPort) {
      return codegen7.loadService(clientPort, ParcelIdentityServiceDefinition);
    }
    ParcelIdentityServiceClient2.create = create;
    function createLegacy(clientPort) {
      const originalService = codegen7.loadService(clientPort, ParcelIdentityServiceDefinition);
      return {
        ...originalService,
        async getParcel() {
          const data = await originalService.getParcel({});
          return {
            land: {
              sceneId: data.land?.sceneId || "",
              sceneJsonData: JSON.parse(data.land?.sceneJsonData || "{}"),
              baseUrl: data.land?.baseUrl || "",
              baseUrlBundles: data.land?.baseUrlBundles || "",
              mappingsResponse: {
                root_cid: data.land?.mappingsResponse?.rootCid || "",
                parcel_id: data.land?.mappingsResponse?.parcelId || "",
                contents: data.land?.mappingsResponse?.contents || []
              }
            },
            cid: data.cid
          };
        },
        async getSceneId() {
          const data = await originalService.getSceneId({});
          return data.sceneId;
        }
      };
    }
    ParcelIdentityServiceClient2.createLegacy = createLegacy;
  })(ParcelIdentityServiceClient || (ParcelIdentityServiceClient = {}));

  // src/worker/client/Permissions.ts
  init_web_worker_inject();
  var codegen8 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/permissions.gen.ts
  init_web_worker_inject();
  var import_minimal9 = __toModule(require_minimal2());
  var PermissionItem;
  (function(PermissionItem2) {
    PermissionItem2[PermissionItem2["PI_ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE"] = 0] = "PI_ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE";
    PermissionItem2[PermissionItem2["PI_ALLOW_TO_TRIGGER_AVATAR_EMOTE"] = 1] = "PI_ALLOW_TO_TRIGGER_AVATAR_EMOTE";
    PermissionItem2[PermissionItem2["PI_USE_WEB3_API"] = 2] = "PI_USE_WEB3_API";
    PermissionItem2[PermissionItem2["PI_USE_WEBSOCKET"] = 3] = "PI_USE_WEBSOCKET";
    PermissionItem2[PermissionItem2["PI_USE_FETCH"] = 4] = "PI_USE_FETCH";
    PermissionItem2[PermissionItem2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  })(PermissionItem || (PermissionItem = {}));
  function permissionItemFromJSON(object) {
    switch (object) {
      case 0:
      case "PI_ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE":
        return 0;
      case 1:
      case "PI_ALLOW_TO_TRIGGER_AVATAR_EMOTE":
        return 1;
      case 2:
      case "PI_USE_WEB3_API":
        return 2;
      case 3:
      case "PI_USE_WEBSOCKET":
        return 3;
      case 4:
      case "PI_USE_FETCH":
        return 4;
      case -1:
      case "UNRECOGNIZED":
      default:
        return -1;
    }
  }
  function permissionItemToJSON(object) {
    switch (object) {
      case 0:
        return "PI_ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE";
      case 1:
        return "PI_ALLOW_TO_TRIGGER_AVATAR_EMOTE";
      case 2:
        return "PI_USE_WEB3_API";
      case 3:
        return "PI_USE_WEBSOCKET";
      case 4:
        return "PI_USE_FETCH";
      case -1:
      default:
        return "UNRECOGNIZED";
    }
  }
  function createBasePermissionResponse() {
    return {hasPermission: false};
  }
  var PermissionResponse = {
    encode(message, writer = import_minimal9.default.Writer.create()) {
      if (message.hasPermission === true) {
        writer.uint32(8).bool(message.hasPermission);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal9.default.Reader ? input : new import_minimal9.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBasePermissionResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.hasPermission = reader.bool();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {hasPermission: isSet9(object.hasPermission) ? Boolean(object.hasPermission) : false};
    },
    toJSON(message) {
      const obj = {};
      message.hasPermission !== void 0 && (obj.hasPermission = message.hasPermission);
      return obj;
    },
    fromPartial(object) {
      const message = createBasePermissionResponse();
      message.hasPermission = object.hasPermission ?? false;
      return message;
    }
  };
  function createBaseHasPermissionRequest() {
    return {permission: 0};
  }
  var HasPermissionRequest = {
    encode(message, writer = import_minimal9.default.Writer.create()) {
      if (message.permission !== 0) {
        writer.uint32(8).int32(message.permission);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal9.default.Reader ? input : new import_minimal9.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseHasPermissionRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.permission = reader.int32();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {permission: isSet9(object.permission) ? permissionItemFromJSON(object.permission) : 0};
    },
    toJSON(message) {
      const obj = {};
      message.permission !== void 0 && (obj.permission = permissionItemToJSON(message.permission));
      return obj;
    },
    fromPartial(object) {
      const message = createBaseHasPermissionRequest();
      message.permission = object.permission ?? 0;
      return message;
    }
  };
  function createBaseHasManyPermissionRequest() {
    return {permissions: []};
  }
  var HasManyPermissionRequest = {
    encode(message, writer = import_minimal9.default.Writer.create()) {
      writer.uint32(10).fork();
      for (const v of message.permissions) {
        writer.int32(v);
      }
      writer.ldelim();
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal9.default.Reader ? input : new import_minimal9.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseHasManyPermissionRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if ((tag & 7) === 2) {
              const end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) {
                message.permissions.push(reader.int32());
              }
            } else {
              message.permissions.push(reader.int32());
            }
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        permissions: Array.isArray(object?.permissions) ? object.permissions.map((e) => permissionItemFromJSON(e)) : []
      };
    },
    toJSON(message) {
      const obj = {};
      if (message.permissions) {
        obj.permissions = message.permissions.map((e) => permissionItemToJSON(e));
      } else {
        obj.permissions = [];
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseHasManyPermissionRequest();
      message.permissions = object.permissions?.map((e) => e) || [];
      return message;
    }
  };
  function createBaseHasManyPermissionResponse() {
    return {hasManyPermission: []};
  }
  var HasManyPermissionResponse = {
    encode(message, writer = import_minimal9.default.Writer.create()) {
      writer.uint32(10).fork();
      for (const v of message.hasManyPermission) {
        writer.bool(v);
      }
      writer.ldelim();
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal9.default.Reader ? input : new import_minimal9.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseHasManyPermissionResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if ((tag & 7) === 2) {
              const end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) {
                message.hasManyPermission.push(reader.bool());
              }
            } else {
              message.hasManyPermission.push(reader.bool());
            }
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        hasManyPermission: Array.isArray(object?.hasManyPermission) ? object.hasManyPermission.map((e) => Boolean(e)) : []
      };
    },
    toJSON(message) {
      const obj = {};
      if (message.hasManyPermission) {
        obj.hasManyPermission = message.hasManyPermission.map((e) => e);
      } else {
        obj.hasManyPermission = [];
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseHasManyPermissionResponse();
      message.hasManyPermission = object.hasManyPermission?.map((e) => e) || [];
      return message;
    }
  };
  var PermissionsServiceDefinition = {
    name: "PermissionsService",
    fullName: "decentraland.kernel.apis.PermissionsService",
    methods: {
      hasPermission: {
        name: "HasPermission",
        requestType: HasPermissionRequest,
        requestStream: false,
        responseType: PermissionResponse,
        responseStream: false,
        options: {}
      },
      hasManyPermissions: {
        name: "HasManyPermissions",
        requestType: HasManyPermissionRequest,
        requestStream: false,
        responseType: HasManyPermissionResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isSet9(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/Permissions.ts
  function createPermissionsServiceClient(clientPort) {
    return codegen8.loadService(clientPort, PermissionsServiceDefinition);
  }

  // src/worker/client/Players.ts
  init_web_worker_inject();
  var codegen9 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen.ts
  init_web_worker_inject();
  var import_minimal11 = __toModule(require_minimal2());

  // node_modules/@dcl/protocol/out-ts/decentraland/common/sdk/user_data.gen.ts
  init_web_worker_inject();
  var import_minimal10 = __toModule(require_minimal2());
  function createBaseSnapshots() {
    return {face256: "", body: ""};
  }
  var Snapshots = {
    encode(message, writer = import_minimal10.default.Writer.create()) {
      if (message.face256 !== "") {
        writer.uint32(10).string(message.face256);
      }
      if (message.body !== "") {
        writer.uint32(18).string(message.body);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal10.default.Reader ? input : new import_minimal10.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSnapshots();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.face256 = reader.string();
            break;
          case 2:
            message.body = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        face256: isSet10(object.face256) ? String(object.face256) : "",
        body: isSet10(object.body) ? String(object.body) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.face256 !== void 0 && (obj.face256 = message.face256);
      message.body !== void 0 && (obj.body = message.body);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSnapshots();
      message.face256 = object.face256 ?? "";
      message.body = object.body ?? "";
      return message;
    }
  };
  function createBaseAvatarForUserData() {
    return {bodyShape: "", skinColor: "", hairColor: "", eyeColor: "", wearables: [], snapshots: void 0};
  }
  var AvatarForUserData = {
    encode(message, writer = import_minimal10.default.Writer.create()) {
      if (message.bodyShape !== "") {
        writer.uint32(10).string(message.bodyShape);
      }
      if (message.skinColor !== "") {
        writer.uint32(18).string(message.skinColor);
      }
      if (message.hairColor !== "") {
        writer.uint32(26).string(message.hairColor);
      }
      if (message.eyeColor !== "") {
        writer.uint32(34).string(message.eyeColor);
      }
      for (const v of message.wearables) {
        writer.uint32(42).string(v);
      }
      if (message.snapshots !== void 0) {
        Snapshots.encode(message.snapshots, writer.uint32(50).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal10.default.Reader ? input : new import_minimal10.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseAvatarForUserData();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.bodyShape = reader.string();
            break;
          case 2:
            message.skinColor = reader.string();
            break;
          case 3:
            message.hairColor = reader.string();
            break;
          case 4:
            message.eyeColor = reader.string();
            break;
          case 5:
            message.wearables.push(reader.string());
            break;
          case 6:
            message.snapshots = Snapshots.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        bodyShape: isSet10(object.bodyShape) ? String(object.bodyShape) : "",
        skinColor: isSet10(object.skinColor) ? String(object.skinColor) : "",
        hairColor: isSet10(object.hairColor) ? String(object.hairColor) : "",
        eyeColor: isSet10(object.eyeColor) ? String(object.eyeColor) : "",
        wearables: Array.isArray(object?.wearables) ? object.wearables.map((e) => String(e)) : [],
        snapshots: isSet10(object.snapshots) ? Snapshots.fromJSON(object.snapshots) : void 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.bodyShape !== void 0 && (obj.bodyShape = message.bodyShape);
      message.skinColor !== void 0 && (obj.skinColor = message.skinColor);
      message.hairColor !== void 0 && (obj.hairColor = message.hairColor);
      message.eyeColor !== void 0 && (obj.eyeColor = message.eyeColor);
      if (message.wearables) {
        obj.wearables = message.wearables.map((e) => e);
      } else {
        obj.wearables = [];
      }
      message.snapshots !== void 0 && (obj.snapshots = message.snapshots ? Snapshots.toJSON(message.snapshots) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseAvatarForUserData();
      message.bodyShape = object.bodyShape ?? "";
      message.skinColor = object.skinColor ?? "";
      message.hairColor = object.hairColor ?? "";
      message.eyeColor = object.eyeColor ?? "";
      message.wearables = object.wearables?.map((e) => e) || [];
      message.snapshots = object.snapshots !== void 0 && object.snapshots !== null ? Snapshots.fromPartial(object.snapshots) : void 0;
      return message;
    }
  };
  function createBaseUserData() {
    return {displayName: "", publicKey: void 0, hasConnectedWeb3: false, userId: "", version: 0, avatar: void 0};
  }
  var UserData = {
    encode(message, writer = import_minimal10.default.Writer.create()) {
      if (message.displayName !== "") {
        writer.uint32(10).string(message.displayName);
      }
      if (message.publicKey !== void 0) {
        writer.uint32(18).string(message.publicKey);
      }
      if (message.hasConnectedWeb3 === true) {
        writer.uint32(24).bool(message.hasConnectedWeb3);
      }
      if (message.userId !== "") {
        writer.uint32(34).string(message.userId);
      }
      if (message.version !== 0) {
        writer.uint32(40).int32(message.version);
      }
      if (message.avatar !== void 0) {
        AvatarForUserData.encode(message.avatar, writer.uint32(50).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal10.default.Reader ? input : new import_minimal10.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseUserData();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.displayName = reader.string();
            break;
          case 2:
            message.publicKey = reader.string();
            break;
          case 3:
            message.hasConnectedWeb3 = reader.bool();
            break;
          case 4:
            message.userId = reader.string();
            break;
          case 5:
            message.version = reader.int32();
            break;
          case 6:
            message.avatar = AvatarForUserData.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        displayName: isSet10(object.displayName) ? String(object.displayName) : "",
        publicKey: isSet10(object.publicKey) ? String(object.publicKey) : void 0,
        hasConnectedWeb3: isSet10(object.hasConnectedWeb3) ? Boolean(object.hasConnectedWeb3) : false,
        userId: isSet10(object.userId) ? String(object.userId) : "",
        version: isSet10(object.version) ? Number(object.version) : 0,
        avatar: isSet10(object.avatar) ? AvatarForUserData.fromJSON(object.avatar) : void 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.displayName !== void 0 && (obj.displayName = message.displayName);
      message.publicKey !== void 0 && (obj.publicKey = message.publicKey);
      message.hasConnectedWeb3 !== void 0 && (obj.hasConnectedWeb3 = message.hasConnectedWeb3);
      message.userId !== void 0 && (obj.userId = message.userId);
      message.version !== void 0 && (obj.version = Math.round(message.version));
      message.avatar !== void 0 && (obj.avatar = message.avatar ? AvatarForUserData.toJSON(message.avatar) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseUserData();
      message.displayName = object.displayName ?? "";
      message.publicKey = object.publicKey ?? void 0;
      message.hasConnectedWeb3 = object.hasConnectedWeb3 ?? false;
      message.userId = object.userId ?? "";
      message.version = object.version ?? 0;
      message.avatar = object.avatar !== void 0 && object.avatar !== null ? AvatarForUserData.fromPartial(object.avatar) : void 0;
      return message;
    }
  };
  function isSet10(value) {
    return value !== null && value !== void 0;
  }

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/players.gen.ts
  function createBasePlayer() {
    return {userId: ""};
  }
  var Player = {
    encode(message, writer = import_minimal11.default.Writer.create()) {
      if (message.userId !== "") {
        writer.uint32(10).string(message.userId);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal11.default.Reader ? input : new import_minimal11.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBasePlayer();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.userId = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {userId: isSet11(object.userId) ? String(object.userId) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.userId !== void 0 && (obj.userId = message.userId);
      return obj;
    },
    fromPartial(object) {
      const message = createBasePlayer();
      message.userId = object.userId ?? "";
      return message;
    }
  };
  function createBasePlayersGetUserDataResponse() {
    return {data: void 0};
  }
  var PlayersGetUserDataResponse = {
    encode(message, writer = import_minimal11.default.Writer.create()) {
      if (message.data !== void 0) {
        UserData.encode(message.data, writer.uint32(10).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal11.default.Reader ? input : new import_minimal11.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBasePlayersGetUserDataResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.data = UserData.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {data: isSet11(object.data) ? UserData.fromJSON(object.data) : void 0};
    },
    toJSON(message) {
      const obj = {};
      message.data !== void 0 && (obj.data = message.data ? UserData.toJSON(message.data) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBasePlayersGetUserDataResponse();
      message.data = object.data !== void 0 && object.data !== null ? UserData.fromPartial(object.data) : void 0;
      return message;
    }
  };
  function createBasePlayerListResponse() {
    return {players: []};
  }
  var PlayerListResponse = {
    encode(message, writer = import_minimal11.default.Writer.create()) {
      for (const v of message.players) {
        Player.encode(v, writer.uint32(10).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal11.default.Reader ? input : new import_minimal11.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBasePlayerListResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.players.push(Player.decode(reader, reader.uint32()));
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {players: Array.isArray(object?.players) ? object.players.map((e) => Player.fromJSON(e)) : []};
    },
    toJSON(message) {
      const obj = {};
      if (message.players) {
        obj.players = message.players.map((e) => e ? Player.toJSON(e) : void 0);
      } else {
        obj.players = [];
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBasePlayerListResponse();
      message.players = object.players?.map((e) => Player.fromPartial(e)) || [];
      return message;
    }
  };
  function createBaseGetPlayerDataRequest() {
    return {userId: ""};
  }
  var GetPlayerDataRequest = {
    encode(message, writer = import_minimal11.default.Writer.create()) {
      if (message.userId !== "") {
        writer.uint32(10).string(message.userId);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal11.default.Reader ? input : new import_minimal11.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetPlayerDataRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.userId = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {userId: isSet11(object.userId) ? String(object.userId) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.userId !== void 0 && (obj.userId = message.userId);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetPlayerDataRequest();
      message.userId = object.userId ?? "";
      return message;
    }
  };
  function createBaseGetPlayersInSceneRequest() {
    return {};
  }
  var GetPlayersInSceneRequest = {
    encode(_, writer = import_minimal11.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal11.default.Reader ? input : new import_minimal11.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetPlayersInSceneRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetPlayersInSceneRequest();
      return message;
    }
  };
  function createBaseGetConnectedPlayersRequest() {
    return {};
  }
  var GetConnectedPlayersRequest = {
    encode(_, writer = import_minimal11.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal11.default.Reader ? input : new import_minimal11.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetConnectedPlayersRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetConnectedPlayersRequest();
      return message;
    }
  };
  var PlayersServiceDefinition = {
    name: "PlayersService",
    fullName: "decentraland.kernel.apis.PlayersService",
    methods: {
      getPlayerData: {
        name: "GetPlayerData",
        requestType: GetPlayerDataRequest,
        requestStream: false,
        responseType: PlayersGetUserDataResponse,
        responseStream: false,
        options: {}
      },
      getPlayersInScene: {
        name: "GetPlayersInScene",
        requestType: GetPlayersInSceneRequest,
        requestStream: false,
        responseType: PlayerListResponse,
        responseStream: false,
        options: {}
      },
      getConnectedPlayers: {
        name: "GetConnectedPlayers",
        requestType: GetConnectedPlayersRequest,
        requestStream: false,
        responseType: PlayerListResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isSet11(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/Players.ts
  var PlayersServiceClient;
  (function(PlayersServiceClient2) {
    function create(clientPort) {
      return codegen9.loadService(clientPort, PlayersServiceDefinition);
    }
    PlayersServiceClient2.create = create;
    function createLegacy(clientPort) {
      const originalService = codegen9.loadService(clientPort, PlayersServiceDefinition);
      return {
        ...originalService,
        async getPlayerData(opt) {
          const originalResponse = await originalService.getPlayerData({userId: opt.userId});
          if (!originalResponse.data) {
            return null;
          }
          return {
            ...originalResponse.data,
            avatar: {
              ...originalResponse.data.avatar,
              snapshots: originalResponse.data.avatar.snapshots
            },
            publicKey: originalResponse.data.publicKey || null
          };
        },
        async getConnectedPlayers() {
          return (await originalService.getConnectedPlayers({})).players;
        },
        async getPlayersInScene() {
          return (await originalService.getPlayersInScene({})).players;
        }
      };
    }
    PlayersServiceClient2.createLegacy = createLegacy;
  })(PlayersServiceClient || (PlayersServiceClient = {}));

  // src/worker/client/PortableExperiences.ts
  init_web_worker_inject();
  var codegen10 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/portable_experiences.gen.ts
  init_web_worker_inject();
  var import_minimal12 = __toModule(require_minimal2());
  function createBaseKillRequest() {
    return {pid: ""};
  }
  var KillRequest = {
    encode(message, writer = import_minimal12.default.Writer.create()) {
      if (message.pid !== "") {
        writer.uint32(10).string(message.pid);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal12.default.Reader ? input : new import_minimal12.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseKillRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.pid = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {pid: isSet12(object.pid) ? String(object.pid) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.pid !== void 0 && (obj.pid = message.pid);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseKillRequest();
      message.pid = object.pid ?? "";
      return message;
    }
  };
  function createBaseKillResponse() {
    return {status: false};
  }
  var KillResponse = {
    encode(message, writer = import_minimal12.default.Writer.create()) {
      if (message.status === true) {
        writer.uint32(8).bool(message.status);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal12.default.Reader ? input : new import_minimal12.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseKillResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.status = reader.bool();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {status: isSet12(object.status) ? Boolean(object.status) : false};
    },
    toJSON(message) {
      const obj = {};
      message.status !== void 0 && (obj.status = message.status);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseKillResponse();
      message.status = object.status ?? false;
      return message;
    }
  };
  function createBaseSpawnRequest() {
    return {pid: ""};
  }
  var SpawnRequest = {
    encode(message, writer = import_minimal12.default.Writer.create()) {
      if (message.pid !== "") {
        writer.uint32(10).string(message.pid);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal12.default.Reader ? input : new import_minimal12.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSpawnRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.pid = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {pid: isSet12(object.pid) ? String(object.pid) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.pid !== void 0 && (obj.pid = message.pid);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSpawnRequest();
      message.pid = object.pid ?? "";
      return message;
    }
  };
  function createBaseSpawnResponse() {
    return {pid: "", parentCid: ""};
  }
  var SpawnResponse = {
    encode(message, writer = import_minimal12.default.Writer.create()) {
      if (message.pid !== "") {
        writer.uint32(10).string(message.pid);
      }
      if (message.parentCid !== "") {
        writer.uint32(18).string(message.parentCid);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal12.default.Reader ? input : new import_minimal12.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSpawnResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.pid = reader.string();
            break;
          case 2:
            message.parentCid = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        pid: isSet12(object.pid) ? String(object.pid) : "",
        parentCid: isSet12(object.parentCid) ? String(object.parentCid) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.pid !== void 0 && (obj.pid = message.pid);
      message.parentCid !== void 0 && (obj.parentCid = message.parentCid);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSpawnResponse();
      message.pid = object.pid ?? "";
      message.parentCid = object.parentCid ?? "";
      return message;
    }
  };
  function createBaseGetPortableExperiencesLoadedRequest() {
    return {};
  }
  var GetPortableExperiencesLoadedRequest = {
    encode(_, writer = import_minimal12.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal12.default.Reader ? input : new import_minimal12.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetPortableExperiencesLoadedRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetPortableExperiencesLoadedRequest();
      return message;
    }
  };
  function createBaseGetPortableExperiencesLoadedResponse() {
    return {loaded: []};
  }
  var GetPortableExperiencesLoadedResponse = {
    encode(message, writer = import_minimal12.default.Writer.create()) {
      for (const v of message.loaded) {
        SpawnResponse.encode(v, writer.uint32(10).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal12.default.Reader ? input : new import_minimal12.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetPortableExperiencesLoadedResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.loaded.push(SpawnResponse.decode(reader, reader.uint32()));
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {loaded: Array.isArray(object?.loaded) ? object.loaded.map((e) => SpawnResponse.fromJSON(e)) : []};
    },
    toJSON(message) {
      const obj = {};
      if (message.loaded) {
        obj.loaded = message.loaded.map((e) => e ? SpawnResponse.toJSON(e) : void 0);
      } else {
        obj.loaded = [];
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetPortableExperiencesLoadedResponse();
      message.loaded = object.loaded?.map((e) => SpawnResponse.fromPartial(e)) || [];
      return message;
    }
  };
  function createBaseExitRequest() {
    return {};
  }
  var ExitRequest = {
    encode(_, writer = import_minimal12.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal12.default.Reader ? input : new import_minimal12.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseExitRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseExitRequest();
      return message;
    }
  };
  function createBaseExitResponse() {
    return {status: false};
  }
  var ExitResponse = {
    encode(message, writer = import_minimal12.default.Writer.create()) {
      if (message.status === true) {
        writer.uint32(8).bool(message.status);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal12.default.Reader ? input : new import_minimal12.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseExitResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.status = reader.bool();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {status: isSet12(object.status) ? Boolean(object.status) : false};
    },
    toJSON(message) {
      const obj = {};
      message.status !== void 0 && (obj.status = message.status);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseExitResponse();
      message.status = object.status ?? false;
      return message;
    }
  };
  var PortableExperiencesServiceDefinition = {
    name: "PortableExperiencesService",
    fullName: "decentraland.kernel.apis.PortableExperiencesService",
    methods: {
      spawn: {
        name: "Spawn",
        requestType: SpawnRequest,
        requestStream: false,
        responseType: SpawnResponse,
        responseStream: false,
        options: {}
      },
      kill: {
        name: "Kill",
        requestType: KillRequest,
        requestStream: false,
        responseType: KillResponse,
        responseStream: false,
        options: {}
      },
      exit: {
        name: "Exit",
        requestType: ExitRequest,
        requestStream: false,
        responseType: ExitResponse,
        responseStream: false,
        options: {}
      },
      getPortableExperiencesLoaded: {
        name: "GetPortableExperiencesLoaded",
        requestType: GetPortableExperiencesLoadedRequest,
        requestStream: false,
        responseType: GetPortableExperiencesLoadedResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isSet12(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/PortableExperiences.ts
  var PortableExperienceServiceClient;
  (function(PortableExperienceServiceClient2) {
    function create(clientPort) {
      return codegen10.loadService(clientPort, PortableExperiencesServiceDefinition);
    }
    PortableExperienceServiceClient2.create = create;
    function createLegacy(clientPort) {
      const originalService = codegen10.loadService(clientPort, PortableExperiencesServiceDefinition);
      return {
        ...originalService,
        async spawn(pid) {
          return await originalService.spawn({pid});
        },
        async kill(pid) {
          return (await originalService.kill({pid})).status;
        },
        async exit() {
          return (await originalService.exit({})).status;
        },
        async getPortableExperiencesLoaded() {
          return {
            portableExperiences: (await originalService.getPortableExperiencesLoaded({})).loaded
          };
        }
      };
    }
    PortableExperienceServiceClient2.createLegacy = createLegacy;
  })(PortableExperienceServiceClient || (PortableExperienceServiceClient = {}));

  // src/worker/client/RestrictedActions.ts
  init_web_worker_inject();
  var codegen11 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/restricted_actions.gen.ts
  init_web_worker_inject();
  var import_minimal13 = __toModule(require_minimal2());
  function createBaseVector3() {
    return {x: 0, y: 0, z: 0};
  }
  var Vector3 = {
    encode(message, writer = import_minimal13.default.Writer.create()) {
      if (message.x !== 0) {
        writer.uint32(13).float(message.x);
      }
      if (message.y !== 0) {
        writer.uint32(21).float(message.y);
      }
      if (message.z !== 0) {
        writer.uint32(29).float(message.z);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal13.default.Reader ? input : new import_minimal13.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseVector3();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.x = reader.float();
            break;
          case 2:
            message.y = reader.float();
            break;
          case 3:
            message.z = reader.float();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        x: isSet13(object.x) ? Number(object.x) : 0,
        y: isSet13(object.y) ? Number(object.y) : 0,
        z: isSet13(object.z) ? Number(object.z) : 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.x !== void 0 && (obj.x = message.x);
      message.y !== void 0 && (obj.y = message.y);
      message.z !== void 0 && (obj.z = message.z);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseVector3();
      message.x = object.x ?? 0;
      message.y = object.y ?? 0;
      message.z = object.z ?? 0;
      return message;
    }
  };
  function createBaseMovePlayerToResponse() {
    return {};
  }
  var MovePlayerToResponse = {
    encode(_, writer = import_minimal13.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal13.default.Reader ? input : new import_minimal13.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseMovePlayerToResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseMovePlayerToResponse();
      return message;
    }
  };
  function createBaseMovePlayerToRequest() {
    return {newRelativePosition: void 0, cameraTarget: void 0};
  }
  var MovePlayerToRequest = {
    encode(message, writer = import_minimal13.default.Writer.create()) {
      if (message.newRelativePosition !== void 0) {
        Vector3.encode(message.newRelativePosition, writer.uint32(10).fork()).ldelim();
      }
      if (message.cameraTarget !== void 0) {
        Vector3.encode(message.cameraTarget, writer.uint32(18).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal13.default.Reader ? input : new import_minimal13.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseMovePlayerToRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.newRelativePosition = Vector3.decode(reader, reader.uint32());
            break;
          case 2:
            message.cameraTarget = Vector3.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        newRelativePosition: isSet13(object.newRelativePosition) ? Vector3.fromJSON(object.newRelativePosition) : void 0,
        cameraTarget: isSet13(object.cameraTarget) ? Vector3.fromJSON(object.cameraTarget) : void 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.newRelativePosition !== void 0 && (obj.newRelativePosition = message.newRelativePosition ? Vector3.toJSON(message.newRelativePosition) : void 0);
      message.cameraTarget !== void 0 && (obj.cameraTarget = message.cameraTarget ? Vector3.toJSON(message.cameraTarget) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseMovePlayerToRequest();
      message.newRelativePosition = object.newRelativePosition !== void 0 && object.newRelativePosition !== null ? Vector3.fromPartial(object.newRelativePosition) : void 0;
      message.cameraTarget = object.cameraTarget !== void 0 && object.cameraTarget !== null ? Vector3.fromPartial(object.cameraTarget) : void 0;
      return message;
    }
  };
  function createBaseTriggerEmoteResponse() {
    return {};
  }
  var TriggerEmoteResponse = {
    encode(_, writer = import_minimal13.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal13.default.Reader ? input : new import_minimal13.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseTriggerEmoteResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseTriggerEmoteResponse();
      return message;
    }
  };
  function createBaseTriggerEmoteRequest() {
    return {predefinedEmote: ""};
  }
  var TriggerEmoteRequest = {
    encode(message, writer = import_minimal13.default.Writer.create()) {
      if (message.predefinedEmote !== "") {
        writer.uint32(10).string(message.predefinedEmote);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal13.default.Reader ? input : new import_minimal13.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseTriggerEmoteRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.predefinedEmote = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {predefinedEmote: isSet13(object.predefinedEmote) ? String(object.predefinedEmote) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.predefinedEmote !== void 0 && (obj.predefinedEmote = message.predefinedEmote);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseTriggerEmoteRequest();
      message.predefinedEmote = object.predefinedEmote ?? "";
      return message;
    }
  };
  var RestrictedActionsServiceDefinition = {
    name: "RestrictedActionsService",
    fullName: "decentraland.kernel.apis.RestrictedActionsService",
    methods: {
      movePlayerTo: {
        name: "MovePlayerTo",
        requestType: MovePlayerToRequest,
        requestStream: false,
        responseType: MovePlayerToResponse,
        responseStream: false,
        options: {}
      },
      triggerEmote: {
        name: "TriggerEmote",
        requestType: TriggerEmoteRequest,
        requestStream: false,
        responseType: TriggerEmoteResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isSet13(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/RestrictedActions.ts
  var RestrictedActionsServiceClient;
  (function(RestrictedActionsServiceClient2) {
    function create(clientPort) {
      return codegen11.loadService(clientPort, RestrictedActionsServiceDefinition);
    }
    RestrictedActionsServiceClient2.create = create;
    function createLegacy(clientPort) {
      const originalService = codegen11.loadService(clientPort, RestrictedActionsServiceDefinition);
      return {
        ...originalService,
        async movePlayerTo(newPosition, cameraTarget) {
          await originalService.movePlayerTo({
            newRelativePosition: newPosition,
            cameraTarget: cameraTarget || void 0
          });
        },
        async triggerEmote(emote) {
          await originalService.triggerEmote({predefinedEmote: emote.predefined});
        }
      };
    }
    RestrictedActionsServiceClient2.createLegacy = createLegacy;
  })(RestrictedActionsServiceClient || (RestrictedActionsServiceClient = {}));

  // src/worker/client/SignedFetch.ts
  init_web_worker_inject();
  var codegen12 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/signed_fetch.gen.ts
  init_web_worker_inject();
  var import_minimal14 = __toModule(require_minimal2());
  function createBaseFlatFetchInit() {
    return {method: void 0, body: void 0, headers: {}};
  }
  var FlatFetchInit = {
    encode(message, writer = import_minimal14.default.Writer.create()) {
      if (message.method !== void 0) {
        writer.uint32(10).string(message.method);
      }
      if (message.body !== void 0) {
        writer.uint32(18).string(message.body);
      }
      Object.entries(message.headers).forEach(([key, value]) => {
        FlatFetchInit_HeadersEntry.encode({key, value}, writer.uint32(26).fork()).ldelim();
      });
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal14.default.Reader ? input : new import_minimal14.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseFlatFetchInit();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.method = reader.string();
            break;
          case 2:
            message.body = reader.string();
            break;
          case 3:
            const entry3 = FlatFetchInit_HeadersEntry.decode(reader, reader.uint32());
            if (entry3.value !== void 0) {
              message.headers[entry3.key] = entry3.value;
            }
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        method: isSet14(object.method) ? String(object.method) : void 0,
        body: isSet14(object.body) ? String(object.body) : void 0,
        headers: isObject3(object.headers) ? Object.entries(object.headers).reduce((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {}) : {}
      };
    },
    toJSON(message) {
      const obj = {};
      message.method !== void 0 && (obj.method = message.method);
      message.body !== void 0 && (obj.body = message.body);
      obj.headers = {};
      if (message.headers) {
        Object.entries(message.headers).forEach(([k, v]) => {
          obj.headers[k] = v;
        });
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseFlatFetchInit();
      message.method = object.method ?? void 0;
      message.body = object.body ?? void 0;
      message.headers = Object.entries(object.headers ?? {}).reduce((acc, [key, value]) => {
        if (value !== void 0) {
          acc[key] = String(value);
        }
        return acc;
      }, {});
      return message;
    }
  };
  function createBaseFlatFetchInit_HeadersEntry() {
    return {key: "", value: ""};
  }
  var FlatFetchInit_HeadersEntry = {
    encode(message, writer = import_minimal14.default.Writer.create()) {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal14.default.Reader ? input : new import_minimal14.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseFlatFetchInit_HeadersEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.key = reader.string();
            break;
          case 2:
            message.value = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {key: isSet14(object.key) ? String(object.key) : "", value: isSet14(object.value) ? String(object.value) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.key !== void 0 && (obj.key = message.key);
      message.value !== void 0 && (obj.value = message.value);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseFlatFetchInit_HeadersEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    }
  };
  function createBaseFlatFetchResponse() {
    return {ok: false, status: 0, statusText: "", headers: {}, body: ""};
  }
  var FlatFetchResponse = {
    encode(message, writer = import_minimal14.default.Writer.create()) {
      if (message.ok === true) {
        writer.uint32(8).bool(message.ok);
      }
      if (message.status !== 0) {
        writer.uint32(16).int32(message.status);
      }
      if (message.statusText !== "") {
        writer.uint32(26).string(message.statusText);
      }
      Object.entries(message.headers).forEach(([key, value]) => {
        FlatFetchResponse_HeadersEntry.encode({key, value}, writer.uint32(34).fork()).ldelim();
      });
      if (message.body !== "") {
        writer.uint32(42).string(message.body);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal14.default.Reader ? input : new import_minimal14.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseFlatFetchResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.ok = reader.bool();
            break;
          case 2:
            message.status = reader.int32();
            break;
          case 3:
            message.statusText = reader.string();
            break;
          case 4:
            const entry4 = FlatFetchResponse_HeadersEntry.decode(reader, reader.uint32());
            if (entry4.value !== void 0) {
              message.headers[entry4.key] = entry4.value;
            }
            break;
          case 5:
            message.body = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        ok: isSet14(object.ok) ? Boolean(object.ok) : false,
        status: isSet14(object.status) ? Number(object.status) : 0,
        statusText: isSet14(object.statusText) ? String(object.statusText) : "",
        headers: isObject3(object.headers) ? Object.entries(object.headers).reduce((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {}) : {},
        body: isSet14(object.body) ? String(object.body) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.ok !== void 0 && (obj.ok = message.ok);
      message.status !== void 0 && (obj.status = Math.round(message.status));
      message.statusText !== void 0 && (obj.statusText = message.statusText);
      obj.headers = {};
      if (message.headers) {
        Object.entries(message.headers).forEach(([k, v]) => {
          obj.headers[k] = v;
        });
      }
      message.body !== void 0 && (obj.body = message.body);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseFlatFetchResponse();
      message.ok = object.ok ?? false;
      message.status = object.status ?? 0;
      message.statusText = object.statusText ?? "";
      message.headers = Object.entries(object.headers ?? {}).reduce((acc, [key, value]) => {
        if (value !== void 0) {
          acc[key] = String(value);
        }
        return acc;
      }, {});
      message.body = object.body ?? "";
      return message;
    }
  };
  function createBaseFlatFetchResponse_HeadersEntry() {
    return {key: "", value: ""};
  }
  var FlatFetchResponse_HeadersEntry = {
    encode(message, writer = import_minimal14.default.Writer.create()) {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal14.default.Reader ? input : new import_minimal14.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseFlatFetchResponse_HeadersEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.key = reader.string();
            break;
          case 2:
            message.value = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {key: isSet14(object.key) ? String(object.key) : "", value: isSet14(object.value) ? String(object.value) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.key !== void 0 && (obj.key = message.key);
      message.value !== void 0 && (obj.value = message.value);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseFlatFetchResponse_HeadersEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    }
  };
  function createBaseSignedFetchRequest() {
    return {url: "", init: void 0};
  }
  var SignedFetchRequest = {
    encode(message, writer = import_minimal14.default.Writer.create()) {
      if (message.url !== "") {
        writer.uint32(10).string(message.url);
      }
      if (message.init !== void 0) {
        FlatFetchInit.encode(message.init, writer.uint32(18).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal14.default.Reader ? input : new import_minimal14.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSignedFetchRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.url = reader.string();
            break;
          case 2:
            message.init = FlatFetchInit.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        url: isSet14(object.url) ? String(object.url) : "",
        init: isSet14(object.init) ? FlatFetchInit.fromJSON(object.init) : void 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.url !== void 0 && (obj.url = message.url);
      message.init !== void 0 && (obj.init = message.init ? FlatFetchInit.toJSON(message.init) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSignedFetchRequest();
      message.url = object.url ?? "";
      message.init = object.init !== void 0 && object.init !== null ? FlatFetchInit.fromPartial(object.init) : void 0;
      return message;
    }
  };
  var SignedFetchServiceDefinition = {
    name: "SignedFetchService",
    fullName: "decentraland.kernel.apis.SignedFetchService",
    methods: {
      signedFetch: {
        name: "SignedFetch",
        requestType: SignedFetchRequest,
        requestStream: false,
        responseType: FlatFetchResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isObject3(value) {
    return typeof value === "object" && value !== null;
  }
  function isSet14(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/SignedFetch.ts
  var SignedFetchServiceClient;
  (function(SignedFetchServiceClient2) {
    function create(clientPort) {
      return codegen12.loadService(clientPort, SignedFetchServiceDefinition);
    }
    SignedFetchServiceClient2.create = create;
    function createLegacy(clientPort) {
      const originalService = codegen12.loadService(clientPort, SignedFetchServiceDefinition);
      return {
        ...originalService,
        async signedFetch(url, originalInit) {
          let init = void 0;
          if (originalInit) {
            init = {headers: {}};
            if (originalInit.headers && typeof originalInit.headers === "object") {
              init.headers = originalInit.headers;
            }
            if (originalInit.body && typeof originalInit.body === "string") {
              init.body = originalInit.body;
            }
            if (originalInit.method && typeof originalInit.method === "string") {
              init.method = originalInit.method;
            }
          }
          const responseBodyType = originalInit?.responseBodyType || "text";
          const result = await originalService.signedFetch({url, init});
          return {
            ok: result.ok,
            status: result.status,
            statusText: result.statusText,
            headers: result.headers,
            json: responseBodyType === "json" ? JSON.parse(result.body) : void 0,
            text: responseBodyType === "text" ? result.body : void 0
          };
        }
      };
    }
    SignedFetchServiceClient2.createLegacy = createLegacy;
  })(SignedFetchServiceClient || (SignedFetchServiceClient = {}));

  // src/worker/client/SocialController.ts
  init_web_worker_inject();
  var codegen13 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/social_controller.gen.ts
  init_web_worker_inject();
  var import_minimal15 = __toModule(require_minimal2());
  function createBaseInitRequest() {
    return {};
  }
  var InitRequest = {
    encode(_, writer = import_minimal15.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal15.default.Reader ? input : new import_minimal15.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseInitRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseInitRequest();
      return message;
    }
  };
  function createBaseSocialEvent() {
    return {event: "", payload: ""};
  }
  var SocialEvent = {
    encode(message, writer = import_minimal15.default.Writer.create()) {
      if (message.event !== "") {
        writer.uint32(10).string(message.event);
      }
      if (message.payload !== "") {
        writer.uint32(18).string(message.payload);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal15.default.Reader ? input : new import_minimal15.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseSocialEvent();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.event = reader.string();
            break;
          case 2:
            message.payload = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        event: isSet15(object.event) ? String(object.event) : "",
        payload: isSet15(object.payload) ? String(object.payload) : ""
      };
    },
    toJSON(message) {
      const obj = {};
      message.event !== void 0 && (obj.event = message.event);
      message.payload !== void 0 && (obj.payload = message.payload);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseSocialEvent();
      message.event = object.event ?? "";
      message.payload = object.payload ?? "";
      return message;
    }
  };
  function createBaseGetAvatarEventsResponse() {
    return {events: []};
  }
  var GetAvatarEventsResponse = {
    encode(message, writer = import_minimal15.default.Writer.create()) {
      for (const v of message.events) {
        SocialEvent.encode(v, writer.uint32(10).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal15.default.Reader ? input : new import_minimal15.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetAvatarEventsResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.events.push(SocialEvent.decode(reader, reader.uint32()));
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {events: Array.isArray(object?.events) ? object.events.map((e) => SocialEvent.fromJSON(e)) : []};
    },
    toJSON(message) {
      const obj = {};
      if (message.events) {
        obj.events = message.events.map((e) => e ? SocialEvent.toJSON(e) : void 0);
      } else {
        obj.events = [];
      }
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetAvatarEventsResponse();
      message.events = object.events?.map((e) => SocialEvent.fromPartial(e)) || [];
      return message;
    }
  };
  var SocialControllerServiceDefinition = {
    name: "SocialControllerService",
    fullName: "decentraland.kernel.apis.SocialControllerService",
    methods: {
      pullAvatarEvents: {
        name: "PullAvatarEvents",
        requestType: InitRequest,
        requestStream: false,
        responseType: GetAvatarEventsResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isSet15(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/SocialController.ts
  function createSocialControllerServiceClient(clientPort) {
    const originalService = codegen13.loadService(clientPort, SocialControllerServiceDefinition);
    return originalService;
  }

  // src/worker/client/UserActionModule.ts
  init_web_worker_inject();
  var codegen14 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/user_action_module.gen.ts
  init_web_worker_inject();
  var import_minimal16 = __toModule(require_minimal2());
  function createBaseRequestTeleportRequest() {
    return {destination: ""};
  }
  var RequestTeleportRequest = {
    encode(message, writer = import_minimal16.default.Writer.create()) {
      if (message.destination !== "") {
        writer.uint32(10).string(message.destination);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal16.default.Reader ? input : new import_minimal16.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseRequestTeleportRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.destination = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {destination: isSet16(object.destination) ? String(object.destination) : ""};
    },
    toJSON(message) {
      const obj = {};
      message.destination !== void 0 && (obj.destination = message.destination);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseRequestTeleportRequest();
      message.destination = object.destination ?? "";
      return message;
    }
  };
  function createBaseRequestTeleportResponse() {
    return {};
  }
  var RequestTeleportResponse = {
    encode(_, writer = import_minimal16.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal16.default.Reader ? input : new import_minimal16.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseRequestTeleportResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseRequestTeleportResponse();
      return message;
    }
  };
  var UserActionModuleServiceDefinition = {
    name: "UserActionModuleService",
    fullName: "decentraland.kernel.apis.UserActionModuleService",
    methods: {
      requestTeleport: {
        name: "RequestTeleport",
        requestType: RequestTeleportRequest,
        requestStream: false,
        responseType: RequestTeleportResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isSet16(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/UserActionModule.ts
  var UserActionModuleServiceClient;
  (function(UserActionModuleServiceClient2) {
    function create(clientPort) {
      return codegen14.loadService(clientPort, UserActionModuleServiceDefinition);
    }
    UserActionModuleServiceClient2.create = create;
    function createLegacy(clientPort) {
      const originalService = codegen14.loadService(clientPort, UserActionModuleServiceDefinition);
      return {
        ...originalService,
        async requestTeleport(destination) {
          await originalService.requestTeleport({destination});
        }
      };
    }
    UserActionModuleServiceClient2.createLegacy = createLegacy;
  })(UserActionModuleServiceClient || (UserActionModuleServiceClient = {}));

  // src/worker/client/UserIdentity.ts
  init_web_worker_inject();
  var codegen15 = __toModule(require_codegen());

  // node_modules/@dcl/protocol/out-ts/decentraland/kernel/apis/user_identity.gen.ts
  init_web_worker_inject();
  var import_minimal17 = __toModule(require_minimal2());
  function createBaseGetUserDataRequest() {
    return {};
  }
  var GetUserDataRequest = {
    encode(_, writer = import_minimal17.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal17.default.Reader ? input : new import_minimal17.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetUserDataRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetUserDataRequest();
      return message;
    }
  };
  function createBaseGetUserDataResponse() {
    return {data: void 0};
  }
  var GetUserDataResponse = {
    encode(message, writer = import_minimal17.default.Writer.create()) {
      if (message.data !== void 0) {
        UserData.encode(message.data, writer.uint32(10).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal17.default.Reader ? input : new import_minimal17.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetUserDataResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.data = UserData.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {data: isSet17(object.data) ? UserData.fromJSON(object.data) : void 0};
    },
    toJSON(message) {
      const obj = {};
      message.data !== void 0 && (obj.data = message.data ? UserData.toJSON(message.data) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetUserDataResponse();
      message.data = object.data !== void 0 && object.data !== null ? UserData.fromPartial(object.data) : void 0;
      return message;
    }
  };
  function createBaseGetUserPublicKeyRequest() {
    return {};
  }
  var GetUserPublicKeyRequest = {
    encode(_, writer = import_minimal17.default.Writer.create()) {
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal17.default.Reader ? input : new import_minimal17.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetUserPublicKeyRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(_) {
      return {};
    },
    toJSON(_) {
      const obj = {};
      return obj;
    },
    fromPartial(_) {
      const message = createBaseGetUserPublicKeyRequest();
      return message;
    }
  };
  function createBaseGetUserPublicKeyResponse() {
    return {address: void 0};
  }
  var GetUserPublicKeyResponse = {
    encode(message, writer = import_minimal17.default.Writer.create()) {
      if (message.address !== void 0) {
        writer.uint32(10).string(message.address);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal17.default.Reader ? input : new import_minimal17.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBaseGetUserPublicKeyResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.address = reader.string();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {address: isSet17(object.address) ? String(object.address) : void 0};
    },
    toJSON(message) {
      const obj = {};
      message.address !== void 0 && (obj.address = message.address);
      return obj;
    },
    fromPartial(object) {
      const message = createBaseGetUserPublicKeyResponse();
      message.address = object.address ?? void 0;
      return message;
    }
  };
  var UserIdentityServiceDefinition = {
    name: "UserIdentityService",
    fullName: "decentraland.kernel.apis.UserIdentityService",
    methods: {
      getUserPublicKey: {
        name: "GetUserPublicKey",
        requestType: GetUserPublicKeyRequest,
        requestStream: false,
        responseType: GetUserPublicKeyResponse,
        responseStream: false,
        options: {}
      },
      getUserData: {
        name: "GetUserData",
        requestType: GetUserDataRequest,
        requestStream: false,
        responseType: GetUserDataResponse,
        responseStream: false,
        options: {}
      }
    }
  };
  function isSet17(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/client/UserIdentity.ts
  var UserIdentityServiceClient;
  (function(UserIdentityServiceClient2) {
    function create(clientPort) {
      return codegen15.loadService(clientPort, UserIdentityServiceDefinition);
    }
    UserIdentityServiceClient2.create = create;
    function createLegacy(clientPort) {
      const originalService = codegen15.loadService(clientPort, UserIdentityServiceDefinition);
      return {
        ...originalService,
        async getUserPublicKey() {
          const realResponse = await originalService.getUserPublicKey({});
          return realResponse.address || null;
        },
        async getUserData() {
          const realResponse = await originalService.getUserData({});
          if (!realResponse.data) {
            return null;
          }
          return {
            ...realResponse.data,
            avatar: {
              ...realResponse.data.avatar,
              snapshots: realResponse.data.avatar.snapshots
            },
            publicKey: realResponse.data.publicKey || null
          };
        }
      };
    }
    UserIdentityServiceClient2.createLegacy = createLegacy;
  })(UserIdentityServiceClient || (UserIdentityServiceClient = {}));

  // src/worker/client/Web3Provider.ts
  init_web_worker_inject();
  var codegen16 = __toModule(require_codegen());
  function createLegacyWeb3Provider(clientPort) {
    const originalService = codegen16.loadService(clientPort, EthereumControllerServiceDefinition);
    async function request(message) {
      const response = await originalService.sendAsync({
        id: message.id,
        method: message.method,
        jsonParams: JSON.stringify(message.params)
      });
      return JSON.parse(response.jsonAnyResponse);
    }
    return {
      async getProvider() {
        return {
          send(message, callback) {
            if (message && callback && callback instanceof Function) {
              request(message).then((x) => callback(null, x)).catch(callback);
            } else {
              throw new Error("Decentraland provider only allows async calls");
            }
          },
          sendAsync(message, callback) {
            request(message).then((x) => callback(null, x)).catch(callback);
          }
        };
      }
    };
  }

  // src/worker/client/index.ts
  var LoadableApis = {
    DevTools: createDevToolsServiceClient,
    EngineApi: createEngineApiServiceClient,
    ExperimentalApi: createExperimentalApiServiceClient,
    Permissions: createPermissionsServiceClient,
    SignedFetch: SignedFetchServiceClient.create,
    CommunicationsController: CommunicationsControllerServiceClient.create,
    EnvironmentApi: EnvironmentApiServiceClient.create,
    EthereumController: EthereumControllerServiceClient.create,
    ParcelIdentity: ParcelIdentityServiceClient.create,
    Players: PlayersServiceClient.create,
    PortableExperience: PortableExperienceServiceClient.create,
    RestrictedActions: RestrictedActionsServiceClient.create,
    UserActionModule: UserActionModuleServiceClient.create,
    UserIdentity: UserIdentityServiceClient.create,
    LegacySignedFetch: SignedFetchServiceClient.createLegacy,
    LegacyCommunicationsController: CommunicationsControllerServiceClient.createLegacy,
    LegacyEnvironmentAPI: EnvironmentApiServiceClient.createLegacy,
    LegacyEthereumController: EthereumControllerServiceClient.createLegacy,
    LegacyParcelIdentity: ParcelIdentityServiceClient.createLegacy,
    LegacyPlayers: PlayersServiceClient.createLegacy,
    LegacyPortableExperience: PortableExperienceServiceClient.createLegacy,
    LegacyRestrictedActions: RestrictedActionsServiceClient.createLegacy,
    LegacyRestrictedActionModule: RestrictedActionsServiceClient.createLegacy,
    LegacyUserActionModule: UserActionModuleServiceClient.createLegacy,
    LegacyIdentity: UserIdentityServiceClient.createLegacy,
    ["Legacyweb3-provider"]: createLegacyWeb3Provider,
    LegacySocialController: createSocialControllerServiceClient
  };

  // src/worker/Utils.ts
  init_web_worker_inject();
  var import_ecs_math = __toModule(require_dist2());

  // node_modules/@dcl/protocol/out-ts/decentraland/renderer/engine_interface.gen.ts
  init_web_worker_inject();
  var import_long = __toModule(require_long());
  var import_minimal19 = __toModule(require_minimal2());

  // node_modules/@dcl/protocol/out-ts/google/protobuf/empty.gen.ts
  init_web_worker_inject();
  var import_minimal18 = __toModule(require_minimal2());

  // node_modules/@dcl/protocol/out-ts/decentraland/renderer/engine_interface.gen.ts
  var PBUIStackOrientation;
  (function(PBUIStackOrientation2) {
    PBUIStackOrientation2[PBUIStackOrientation2["VERTICAL"] = 0] = "VERTICAL";
    PBUIStackOrientation2[PBUIStackOrientation2["HORIZONTAL"] = 1] = "HORIZONTAL";
    PBUIStackOrientation2[PBUIStackOrientation2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
  })(PBUIStackOrientation || (PBUIStackOrientation = {}));
  function createBasePBVector3() {
    return {x: 0, y: 0, z: 0};
  }
  var PBVector3 = {
    encode(message, writer = import_minimal19.default.Writer.create()) {
      if (message.x !== 0) {
        writer.uint32(13).float(message.x);
      }
      if (message.y !== 0) {
        writer.uint32(21).float(message.y);
      }
      if (message.z !== 0) {
        writer.uint32(29).float(message.z);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal19.default.Reader ? input : new import_minimal19.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBasePBVector3();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.x = reader.float();
            break;
          case 2:
            message.y = reader.float();
            break;
          case 3:
            message.z = reader.float();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        x: isSet18(object.x) ? Number(object.x) : 0,
        y: isSet18(object.y) ? Number(object.y) : 0,
        z: isSet18(object.z) ? Number(object.z) : 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.x !== void 0 && (obj.x = message.x);
      message.y !== void 0 && (obj.y = message.y);
      message.z !== void 0 && (obj.z = message.z);
      return obj;
    },
    fromPartial(object) {
      const message = createBasePBVector3();
      message.x = object.x ?? 0;
      message.y = object.y ?? 0;
      message.z = object.z ?? 0;
      return message;
    }
  };
  function createBasePBQuaternion() {
    return {x: 0, y: 0, z: 0, w: 0};
  }
  var PBQuaternion = {
    encode(message, writer = import_minimal19.default.Writer.create()) {
      if (message.x !== 0) {
        writer.uint32(9).double(message.x);
      }
      if (message.y !== 0) {
        writer.uint32(17).double(message.y);
      }
      if (message.z !== 0) {
        writer.uint32(25).double(message.z);
      }
      if (message.w !== 0) {
        writer.uint32(33).double(message.w);
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal19.default.Reader ? input : new import_minimal19.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBasePBQuaternion();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.x = reader.double();
            break;
          case 2:
            message.y = reader.double();
            break;
          case 3:
            message.z = reader.double();
            break;
          case 4:
            message.w = reader.double();
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        x: isSet18(object.x) ? Number(object.x) : 0,
        y: isSet18(object.y) ? Number(object.y) : 0,
        z: isSet18(object.z) ? Number(object.z) : 0,
        w: isSet18(object.w) ? Number(object.w) : 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.x !== void 0 && (obj.x = message.x);
      message.y !== void 0 && (obj.y = message.y);
      message.z !== void 0 && (obj.z = message.z);
      message.w !== void 0 && (obj.w = message.w);
      return obj;
    },
    fromPartial(object) {
      const message = createBasePBQuaternion();
      message.x = object.x ?? 0;
      message.y = object.y ?? 0;
      message.z = object.z ?? 0;
      message.w = object.w ?? 0;
      return message;
    }
  };
  function createBasePBTransform() {
    return {position: void 0, rotation: void 0, scale: void 0};
  }
  var PBTransform = {
    encode(message, writer = import_minimal19.default.Writer.create()) {
      if (message.position !== void 0) {
        PBVector3.encode(message.position, writer.uint32(10).fork()).ldelim();
      }
      if (message.rotation !== void 0) {
        PBQuaternion.encode(message.rotation, writer.uint32(18).fork()).ldelim();
      }
      if (message.scale !== void 0) {
        PBVector3.encode(message.scale, writer.uint32(26).fork()).ldelim();
      }
      return writer;
    },
    decode(input, length) {
      const reader = input instanceof import_minimal19.default.Reader ? input : new import_minimal19.default.Reader(input);
      let end = length === void 0 ? reader.len : reader.pos + length;
      const message = createBasePBTransform();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.position = PBVector3.decode(reader, reader.uint32());
            break;
          case 2:
            message.rotation = PBQuaternion.decode(reader, reader.uint32());
            break;
          case 3:
            message.scale = PBVector3.decode(reader, reader.uint32());
            break;
          default:
            reader.skipType(tag & 7);
            break;
        }
      }
      return message;
    },
    fromJSON(object) {
      return {
        position: isSet18(object.position) ? PBVector3.fromJSON(object.position) : void 0,
        rotation: isSet18(object.rotation) ? PBQuaternion.fromJSON(object.rotation) : void 0,
        scale: isSet18(object.scale) ? PBVector3.fromJSON(object.scale) : void 0
      };
    },
    toJSON(message) {
      const obj = {};
      message.position !== void 0 && (obj.position = message.position ? PBVector3.toJSON(message.position) : void 0);
      message.rotation !== void 0 && (obj.rotation = message.rotation ? PBQuaternion.toJSON(message.rotation) : void 0);
      message.scale !== void 0 && (obj.scale = message.scale ? PBVector3.toJSON(message.scale) : void 0);
      return obj;
    },
    fromPartial(object) {
      const message = createBasePBTransform();
      message.position = object.position !== void 0 && object.position !== null ? PBVector3.fromPartial(object.position) : void 0;
      message.rotation = object.rotation !== void 0 && object.rotation !== null ? PBQuaternion.fromPartial(object.rotation) : void 0;
      message.scale = object.scale !== void 0 && object.scale !== null ? PBVector3.fromPartial(object.scale) : void 0;
      return message;
    }
  };
  var globalThis3 = (() => {
    if (typeof globalThis3 !== "undefined") {
      return globalThis3;
    }
    if (typeof self !== "undefined") {
      return self;
    }
    if (typeof window !== "undefined") {
      return window;
    }
    if (typeof global !== "undefined") {
      return global;
    }
    throw "Unable to locate global object";
  })();
  if (import_minimal19.default.util.Long !== import_long.default) {
    import_minimal19.default.util.Long = import_long.default;
    import_minimal19.default.configure();
  }
  function isSet18(value) {
    return value !== null && value !== void 0;
  }

  // src/worker/Utils.ts
  var VECTOR3_MEMBER_CAP = 1e6;
  var pbTransform = {
    position: import_ecs_math.Vector3.Zero(),
    rotation: import_ecs_math.Quaternion.Identity,
    scale: import_ecs_math.Vector3.One()
  };
  var TRANSFORM_CLASS_ID = 1;
  var transformData = new ArrayBuffer(40);
  var transformView = new DataView(transformData);
  var componentSerializeOpt = {
    useBinaryTransform: true
  };
  function generatePBObject(classId, json) {
    if (classId === TRANSFORM_CLASS_ID) {
      const transform = JSON.parse(json);
      if (!componentSerializeOpt.useBinaryTransform)
        return serializeTransform(transform);
      else
        return serializeTransformNoProtobuff(transform);
    }
    return json;
  }
  function serializeTransform(transform) {
    pbTransform.position.set(Math.fround(transform.position.x), Math.fround(transform.position.y), Math.fround(transform.position.z));
    capVector(pbTransform.position, VECTOR3_MEMBER_CAP);
    pbTransform.rotation.copyFrom(transform.rotation);
    pbTransform.scale.set(Math.fround(transform.scale.x), Math.fround(transform.scale.y), Math.fround(transform.scale.z));
    capVector(pbTransform.scale, VECTOR3_MEMBER_CAP);
    const arrayBuffer = PBTransform.encode(pbTransform).finish();
    return btoa(String.fromCharCode(...arrayBuffer));
  }
  function serializeTransformNoProtobuff(transform) {
    const cappedVector = new import_ecs_math.Vector3(Math.fround(transform.position.x), Math.fround(transform.position.y), Math.fround(transform.position.z));
    capVector(cappedVector, VECTOR3_MEMBER_CAP);
    let offset = 0;
    transformView.setFloat32(offset, cappedVector.x, true);
    transformView.setFloat32(offset += 4, cappedVector.y, true);
    transformView.setFloat32(offset += 4, cappedVector.z, true);
    transformView.setFloat32(offset += 4, transform.rotation.x, true);
    transformView.setFloat32(offset += 4, transform.rotation.y, true);
    transformView.setFloat32(offset += 4, transform.rotation.z, true);
    transformView.setFloat32(offset += 4, transform.rotation.w, true);
    cappedVector.set(Math.fround(transform.scale.x), Math.fround(transform.scale.y), Math.fround(transform.scale.z));
    capVector(cappedVector, VECTOR3_MEMBER_CAP);
    transformView.setFloat32(offset += 4, cappedVector.x, true);
    transformView.setFloat32(offset += 4, cappedVector.y, true);
    transformView.setFloat32(offset += 4, cappedVector.z, true);
    const arrayBuffer = new Uint8Array(transformData);
    const base64Value = btoa(String.fromCharCode(...arrayBuffer));
    return base64Value;
  }
  function capVector(targetVector, cap) {
    if (Math.abs(targetVector.x) > cap) {
      targetVector.x = cap * Math.sign(targetVector.x);
    }
    if (Math.abs(targetVector.y) > cap) {
      targetVector.y = cap * Math.sign(targetVector.y);
    }
    if (Math.abs(targetVector.z) > cap) {
      targetVector.z = cap * Math.sign(targetVector.z);
    }
  }
  var dataUrlRE = /^data:[^/]+\/[^;]+;base64,/;
  var blobRE = /^blob:http/;
  var componentNameRE = /^(engine\.)/;
  function resolveMapping(mapping, mappingName, baseUrl) {
    let url = mappingName;
    if (mapping) {
      url = mapping;
    }
    if (dataUrlRE.test(url)) {
      return url;
    }
    if (blobRE.test(url)) {
      return url;
    }
    return (baseUrl.endsWith("/") ? baseUrl : baseUrl + "/") + url;
  }
  var idToNumberStore = {};
  var numberToIdStore = {};
  var idToNumberStoreCounter = 10;
  function addIdToStorage(id, idAsNumber) {
    idToNumberStore[id] = idAsNumber;
    numberToIdStore[idAsNumber] = id;
  }
  function getIdAsNumber(id) {
    if (!idToNumberStore.hasOwnProperty(id)) {
      idToNumberStoreCounter++;
      addIdToStorage(id, idToNumberStoreCounter);
      return idToNumberStoreCounter;
    } else {
      return idToNumberStore[id];
    }
  }
  function initMessagesFinished() {
    return {
      type: EAType.EAT_INIT_MESSAGES_FINISHED,
      tag: "scene",
      payload: {initMessagesFinished: {}}
    };
  }

  // src/worker/sandbox.ts
  init_web_worker_inject();

  // src/worker/Fetch.ts
  init_web_worker_inject();
  var import_p_queue = __toModule(require_dist3());
  var TIMEOUT_LIMIT = 29e3;
  function createFetch({canUseFetch, previewMode, log, originalFetch}) {
    const fifoFetch = new import_p_queue.default({concurrency: 1});
    return async (resource, init) => {
      const url = resource instanceof Request ? resource.url : resource;
      if (url.toLowerCase().substr(0, 8) !== "https://") {
        if (previewMode) {
          log("\u26A0\uFE0F Warning: Can't make an unsafe http request in deployed scenes, please consider upgrading to https. url=" + url);
        } else {
          return Promise.reject(new Error("Can't make an unsafe http request, please upgrade to https. url=" + url));
        }
      }
      if (!canUseFetch) {
        return Promise.reject(new Error("This scene is not allowed to use fetch."));
      }
      async function fetchRequest() {
        const abortController = new AbortController();
        const timeout = setTimeout(() => {
          ;
          abortController.abort();
        }, Math.max(init?.timeout || TIMEOUT_LIMIT, 1));
        try {
          return await originalFetch(resource, {signal: abortController.signal, ...init});
        } finally {
          clearTimeout(timeout);
        }
      }
      return fifoFetch.add(fetchRequest);
    };
  }

  // src/worker/WebSocket.ts
  init_web_worker_inject();
  function createWebSocket({canUseWebsocket, previewMode, log}) {
    return class RestrictedWebSocket extends WebSocket {
      constructor(url, protocols) {
        if (url.toString().toLowerCase().substr(0, 4) !== "wss:") {
          if (previewMode) {
            log("\u26A0\uFE0F Warning: can't connect to unsafe WebSocket (ws) server in deployed scenes, consider upgrading to wss.");
          } else {
            throw new Error("Can't connect to unsafe WebSocket server");
          }
        }
        if (!canUseWebsocket) {
          throw new Error("This scene doesn't have allowed to use WebSocket");
        }
        super(url.toString(), protocols);
      }
    };
  }

  // src/worker/sandbox.ts
  var allowListES5 = [
    "eval",
    "parseInt",
    "parseFloat",
    "isNaN",
    "isFinite",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape",
    "Object",
    "Function",
    "String",
    "Boolean",
    "Number",
    "Math",
    "Date",
    "RegExp",
    "Error",
    "EvalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError",
    "JSON",
    "Array",
    "Promise",
    "NaN",
    "Infinity"
  ];
  var defer = Promise.resolve().then.bind(Promise.resolve());
  async function customEval(code, context) {
    const sandbox = {};
    const resultKey = "SAFE_EVAL_" + Math.floor(Math.random() * 1e6);
    sandbox[resultKey] = {};
    Object.keys(context).forEach(function(key) {
      sandbox[key] = context[key];
    });
    sandbox.window = sandbox;
    sandbox.self = sandbox;
    return defer(() => new Function("code", `with (this) { ${code} }`).call(sandbox, code));
  }
  function getES5Context(base) {
    allowListES5.forEach(($) => base[$] = globalThis[$]);
    return base;
  }
  function prepareSandboxContext(options) {
    const originalFetch = globalThis.fetch;
    const restrictedWebSocket = createWebSocket(options);
    const restrictedFetch = createFetch({...options, originalFetch});
    globalThis.fetch = restrictedFetch;
    globalThis.WebSocket = restrictedWebSocket;
    const env = {dcl: options.dcl, WebSocket: restrictedWebSocket, fetch: restrictedFetch};
    return getES5Context(env);
  }

  // src/worker/runtime/DecentralandInterface.ts
  init_web_worker_inject();
  function createDecentralandInterface(options) {
    const {batchEvents, onError, onLog, sceneId, onEventFunctions, clientPort, eventState} = options;
    const sceneLoadedModules = {};
    const dcl = {
      DEBUG: true,
      log(...args) {
        onLog(...args);
      },
      openExternalUrl(url) {
        try {
          const u = new URL(url);
          if (u.protocol !== "https:")
            throw new Error("Only https: external links are allowed");
        } catch (err) {
          onError(err);
          return;
        }
        if (JSON.stringify(url).length > 49e3) {
          onError(new Error("URL payload cannot exceed 49.000 bytes"));
          return;
        }
        if (eventState.allowOpenExternalUrl) {
          batchEvents.events.push({
            type: EAType.EAT_OPEN_EXTERNAL_URL,
            tag: "",
            payload: {openExternalUrl: {url}}
          });
        } else {
          this.error("openExternalUrl can only be used inside a pointerEvent");
        }
      },
      openNFTDialog(assetContractAddress, tokenId, comment) {
        if (eventState.allowOpenExternalUrl) {
          const payloadLength = assetContractAddress.length + tokenId.length + (comment?.length || 0);
          if (payloadLength > 49e3) {
            onError(new Error("OpenNFT payload cannot exceed 49.000 bytes"));
            return;
          }
          batchEvents.events.push({
            type: EAType.EAT_OPEN_NFT_DIALOG,
            tag: "",
            payload: {openNftDialog: {assetContractAddress, tokenId, comment: comment || ""}}
          });
        } else {
          this.error("openNFTDialog can only be used inside a pointerEvent");
        }
      },
      addEntity(entityId) {
        if (entityId === "0") {
          return;
        }
        batchEvents.events.push({
          type: EAType.EAT_CREATE_ENTITY,
          payload: {createEntity: {id: entityId}}
        });
      },
      removeEntity(entityId) {
        batchEvents.events.push({
          type: EAType.EAT_REMOVE_ENTITY,
          payload: {removeEntity: {id: entityId}}
        });
      },
      onUpdate(cb) {
        if (typeof cb !== "function") {
          onError(new Error("onUpdate must be called with only a function argument"));
        } else {
          options.onUpdateFunctions.push(cb);
        }
      },
      onEvent(cb) {
        if (typeof cb !== "function") {
          onError(new Error("onEvent must be called with only a function argument"));
        } else {
          onEventFunctions.push(cb);
        }
      },
      updateEntityComponent(entityId, componentName, classId, json) {
        if (json.length > 49e3) {
          onError(new Error("Component payload cannot exceed 49.000 bytes"));
          return;
        }
        if (componentNameRE.test(componentName)) {
          batchEvents.events.push({
            type: EAType.EAT_UPDATE_ENTITY_COMPONENT,
            tag: sceneId + "_" + entityId + "_" + classId,
            payload: {
              updateEntityComponent: {
                entityId,
                classId,
                name: componentName.replace(componentNameRE, ""),
                json: generatePBObject(classId, json)
              }
            }
          });
        }
      },
      attachEntityComponent(entityId, componentName, id) {
        if (componentNameRE.test(componentName)) {
          batchEvents.events.push({
            type: EAType.EAT_ATTACH_ENTITY_COMPONENT,
            tag: entityId,
            payload: {
              attachEntityComponent: {
                entityId,
                name: componentName.replace(componentNameRE, ""),
                id
              }
            }
          });
        }
      },
      removeEntityComponent(entityId, componentName) {
        if (componentNameRE.test(componentName)) {
          batchEvents.events.push({
            type: EAType.EAT_COMPONENT_REMOVED,
            tag: entityId,
            payload: {
              componentRemoved: {
                entityId,
                name: componentName.replace(componentNameRE, "")
              }
            }
          });
        }
      },
      setParent(entityId, parentId) {
        batchEvents.events.push({
          type: EAType.EAT_SET_ENTITY_PARENT,
          tag: entityId,
          payload: {
            setEntityParent: {
              entityId,
              parentId
            }
          }
        });
      },
      query(queryType, payload) {
        payload.queryId = getIdAsNumber(payload.queryId).toString();
        batchEvents.events.push({
          type: EAType.EAT_QUERY,
          tag: sceneId + "_" + payload.queryId,
          payload: {
            query: {
              queryId: queryTypeFromJSON(queryType),
              payload: JSON.stringify(payload)
            }
          }
        });
      },
      subscribe(eventName) {
        options.EngineApi.subscribe({eventId: eventName}).catch((err) => onError(err));
      },
      unsubscribe(eventName) {
        options.EngineApi.unsubscribe({eventId: eventName}).catch((err) => onError(err));
      },
      componentCreated(id, componentName, classId) {
        if (componentNameRE.test(componentName)) {
          batchEvents.events.push({
            type: EAType.EAT_COMPONENT_CREATED,
            tag: id,
            payload: {
              componentCreated: {
                id,
                classId,
                name: componentName.replace(componentNameRE, "")
              }
            }
          });
        }
      },
      componentDisposed(id) {
        batchEvents.events.push({
          type: EAType.EAT_COMPONENT_DISPOSED,
          tag: id,
          payload: {
            componentDisposed: {id}
          }
        });
      },
      componentUpdated(id, json) {
        batchEvents.events.push({
          type: EAType.EAT_COMPONENT_UPDATED,
          tag: id,
          payload: {
            componentUpdated: {
              id,
              json
            }
          }
        });
      },
      loadModule: async (_moduleName) => {
        if (!(_moduleName in sceneLoadedModules)) {
          const loadedModule = loadSceneModule(clientPort, _moduleName);
          sceneLoadedModules[_moduleName] = {
            rpcHandle: _moduleName,
            __INTERNAL_UNSAFE_loadedModule: loadedModule,
            methods: Object.keys(loadedModule).map((name) => ({name}))
          };
        }
        return sceneLoadedModules[_moduleName];
      },
      callRpc: async (rpcHandle, methodName, args) => {
        const module2 = sceneLoadedModules[rpcHandle];
        if (!module2) {
          throw new Error(`RPCHandle: ${rpcHandle} is not loaded`);
        }
        return module2.__INTERNAL_UNSAFE_loadedModule[methodName].apply(module2, args);
      },
      onStart(cb) {
        options.onStartFunctions.push(cb);
      },
      error(message, data) {
        onError(Object.assign(new Error(message), {data}));
      }
    };
    return dcl;
  }
  function loadSceneModule(clientPort, moduleName) {
    const moduleToLoad = moduleName.replace(/^@decentraland\//, "Legacy").replace(/^~system\//, "");
    try {
      if (moduleToLoad in LoadableApis) {
        return LoadableApis[moduleToLoad](clientPort);
      } else {
        throw new Error("The module is not available in the list!");
      }
    } catch (e) {
      throw Object.assign(new Error(`Error getting the methods of ${moduleToLoad}: ` + e.message), {
        original: e
      });
    }
  }

  // src/worker/runtime/SetupFpsThrottling.ts
  init_web_worker_inject();
  var import_ecs_math2 = __toModule(require_dist2());
  function setupFpsThrottling(dcl, parcels, onChangeUpdateInterval) {
    dcl.subscribe("positionChanged");
    dcl.onEvent((event) => {
      if (event.type !== "positionChanged") {
        return;
      }
      const e = event.data;
      const PARCEL_SIZE = 16;
      const playerPosition = new import_ecs_math2.Vector2(Math.floor(e.cameraPosition.x / PARCEL_SIZE), Math.floor(e.cameraPosition.z / PARCEL_SIZE));
      if (playerPosition === void 0) {
        return;
      }
      const playerPos = playerPosition;
      let sqrDistanceToPlayerInParcels = 10 * 10;
      let isInsideScene = false;
      for (const parcel of parcels) {
        sqrDistanceToPlayerInParcels = Math.min(sqrDistanceToPlayerInParcels, import_ecs_math2.Vector2.DistanceSquared(playerPos, parcel));
        if (parcel.x === playerPos.x && parcel.y === playerPos.y) {
          isInsideScene = true;
        }
      }
      let fps = 1;
      if (isInsideScene) {
        fps = 30;
      } else if (sqrDistanceToPlayerInParcels <= 2 * 2) {
        fps = 20;
      } else if (sqrDistanceToPlayerInParcels <= 3 * 3) {
        fps = 10;
      } else if (sqrDistanceToPlayerInParcels <= 4 * 4) {
        fps = 5;
      }
      onChangeUpdateInterval(1e3 / fps);
    });
  }

  // src/worker/runtime/DevToolsAdapter.ts
  init_web_worker_inject();
  var DevToolsAdapter = class {
    constructor(devTools) {
      this.devTools = devTools;
      this.exceptions = [];
      this.catchHandler = (...args) => console.log(...args);
    }
    log(...args) {
      const params = {
        type: "log",
        timestamp: performance.now(),
        executionContextId: 0,
        args: args.map(($) => {
          let value = void 0;
          let unserializableValue = void 0;
          const type = typeof $;
          if (type === "object" && $ !== null) {
            try {
              JSON.stringify($);
              value = $;
            } catch (error) {
              unserializableValue = Object.prototype.toString.apply($);
            }
          } else if (type === "number" && (isNaN($) || !isFinite($))) {
            unserializableValue = Object.prototype.toString.apply($);
          } else {
            value = $;
          }
          const remoteObject = {
            type: typeof $,
            value,
            unserializableValue
          };
          return remoteObject;
        })
      };
      this.devTools.event({
        type: "Runtime.consoleAPICalled",
        jsonPayload: JSON.stringify([params])
      }).catch(this.catchHandler);
    }
    error(e) {
      const exceptionId = this.exceptions.push(e) - 1;
      let value = void 0;
      let unserializableValue = void 0;
      try {
        value = JSON.stringify(e);
        if (value === "{}" && e instanceof Error) {
          value = JSON.stringify({
            message: e.message,
            name: e.name,
            stack: e.stack
          });
        }
      } catch (error) {
        unserializableValue = e.toString();
      }
      const exception = {
        type: typeof e,
        value,
        unserializableValue
      };
      const param = {
        timestamp: performance.now(),
        exceptionDetails: {
          text: e.toString() + "\n" + e.stack,
          exceptionId,
          columnNumber: 0,
          lineNumber: 0,
          exception
        }
      };
      this.devTools.event({
        type: "Runtime.exceptionThrown",
        jsonPayload: JSON.stringify([param])
      }).catch(this.catchHandler);
    }
  };

  // src/worker/runtime/Events.ts
  init_web_worker_inject();
  function EventDataToRuntimeEvent(e) {
    switch (e.type) {
      case EventDataType.EDT_GENERIC:
        return {type: e.generic?.eventId || "", data: JSON.parse(e.generic.eventData || "{}")};
      case EventDataType.EDT_POSITION_CHANGED:
        return {type: "positionChanged", data: e.positionChanged};
      case EventDataType.EDT_ROTATION_CHANGED:
        return {type: "rotationChanged", data: e.rotationChanged};
    }
    return {type: "", data: "{}"};
  }

  // src/worker/SceneRuntime.ts
  function parseParcelPosition(position) {
    const [x, y] = position.trim().split(/\s*,\s*/).map(($) => parseInt($, 10));
    return {x, y};
  }
  async function startSceneRuntime(client) {
    const workerName = self.name;
    const clientPort = await client.createPort(`scene-${workerName}`);
    const [EngineApi, EnvironmentApi, Permissions, DevTools] = await Promise.all([
      LoadableApis.EngineApi(clientPort),
      LoadableApis.EnvironmentApi(clientPort),
      LoadableApis.Permissions(clientPort),
      LoadableApis.DevTools(clientPort)
    ]);
    const [canUseWebsocket, canUseFetch] = (await Permissions.hasManyPermissions({
      permissions: [PermissionItem.PI_USE_WEBSOCKET, PermissionItem.PI_USE_FETCH]
    })).hasManyPermission;
    const devToolsAdapter = new DevToolsAdapter(DevTools);
    const eventState = {allowOpenExternalUrl: false};
    const onEventFunctions = [];
    const onUpdateFunctions = [];
    const onStartFunctions = [];
    const batchEvents = {
      events: []
    };
    const bootstrapData = await EnvironmentApi.getBootstrapData({});
    const fullData = JSON.parse(bootstrapData.entity?.metadataJson || "{}");
    const isPreview = await EnvironmentApi.isPreviewMode({});
    const unsafeAllowed = await EnvironmentApi.areUnsafeRequestAllowed({});
    const explorerConfiguration = await EnvironmentApi.getExplorerConfiguration({});
    if (!fullData || !fullData.main) {
      throw new Error(`No boostrap data`);
    }
    const mappingName = fullData.main;
    const mapping = bootstrapData.entity?.content.find(($) => $.file === mappingName);
    if (!mapping) {
      await EngineApi.sendBatch({actions: [initMessagesFinished()]});
      throw new Error(`SDK: Error while loading scene. Main file missing.`);
    }
    const url = resolveMapping(mapping.hash, mappingName, bootstrapData.baseUrl);
    const codeRequest = await fetch(url);
    if (!codeRequest.ok) {
      await EngineApi.sendBatch({actions: [initMessagesFinished()]});
      throw new Error(`SDK: Error while loading ${url} (${mappingName} -> ${mapping?.file}:${mapping?.hash}) the mapping was not found`);
    }
    componentSerializeOpt.useBinaryTransform = explorerConfiguration.configurations["enableBinaryTransform"] === "true";
    let didStart = false;
    let updateIntervalMs = 1e3 / 30;
    async function sendBatchAndProcessEvents() {
      const actions = batchEvents.events;
      if (actions.length) {
        batchEvents.events = [];
      }
      const res = await EngineApi.sendBatch({actions});
      for (const e of res.events) {
        eventReceiver(EventDataToRuntimeEvent(e));
      }
    }
    function eventReceiver(event) {
      if (event.type === "raycastResponse") {
        const idAsNumber = parseInt(event.data.queryId, 10);
        if (numberToIdStore[idAsNumber]) {
          event.data.queryId = numberToIdStore[idAsNumber].toString();
        }
      }
      if (!didStart && event.type === "sceneStart") {
        didStart = true;
        for (const startFunctionCb of onStartFunctions) {
          try {
            startFunctionCb();
          } catch (e) {
            devToolsAdapter.error(e);
          }
        }
      }
      if (isPointerEvent(event)) {
        eventState.allowOpenExternalUrl = true;
      }
      for (const cb of onEventFunctions) {
        try {
          cb(event);
        } catch (err) {
          devToolsAdapter.error(err);
        }
      }
      eventState.allowOpenExternalUrl = false;
    }
    let start = performance.now();
    function reschedule() {
      const ms = Math.max(updateIntervalMs - (performance.now() - start) | 0, 0);
      setTimeout(mainLoop, ms);
    }
    function mainLoop() {
      const now = performance.now();
      const dtMillis = now - start;
      start = now;
      const dtSecs = dtMillis / 1e3;
      for (const trigger of onUpdateFunctions) {
        try {
          trigger(dtSecs);
        } catch (e) {
          devToolsAdapter.error(e);
        }
      }
      sendBatchAndProcessEvents().catch(devToolsAdapter.error).finally(reschedule);
    }
    try {
      const sourceCode = await codeRequest.text();
      const dcl = createDecentralandInterface({
        clientPort,
        onError: (err) => devToolsAdapter.error(err),
        onLog: (...args) => devToolsAdapter.log(...args),
        sceneId: bootstrapData.id,
        eventState,
        batchEvents,
        EngineApi,
        onEventFunctions,
        onStartFunctions,
        onUpdateFunctions
      });
      const runtimeExecutionContext = prepareSandboxContext({
        dcl,
        canUseFetch,
        canUseWebsocket,
        log: dcl.log,
        previewMode: isPreview.isPreview || unsafeAllowed.status
      });
      if (bootstrapData.useFPSThrottling === true) {
        setupFpsThrottling(dcl, fullData.scene.parcels.map(parseParcelPosition), (newValue) => {
          updateIntervalMs = newValue;
        });
      }
      await customEval(sourceCode, runtimeExecutionContext);
    } catch (err) {
      await EngineApi.sendBatch({actions: [initMessagesFinished()]});
      devToolsAdapter.error(new Error(`SceneRuntime: Error while evaluating the scene ${workerName}`));
      await sleep(100);
      throw err;
    }
    batchEvents.events.push(initMessagesFinished());
    do {
      await sendBatchAndProcessEvents();
    } while (!didStart && await sleep(100));
    mainLoop();
  }
  function isPointerEvent(event) {
    switch (event.type) {
      case "uuidEvent":
        return event.data?.payload?.buttonId !== void 0;
    }
    return false;
  }
  async function sleep(ms) {
    await new Promise((resolve) => setTimeout(resolve, Math.max(ms | 0, 0)));
    return true;
  }

  // src/worker/index-webworker.ts
  (0, import_rpc.createRpcClient)((0, import_WebWorker.WebWorkerTransport)(self)).then(startSceneRuntime).catch((err) => console.error(err));
})();
//# sourceMappingURL=data:application/json;base64,
