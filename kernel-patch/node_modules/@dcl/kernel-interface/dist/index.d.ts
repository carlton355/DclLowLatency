import { AuthIdentity } from "./dcl-crypto";
import { PersistentAsyncStorage } from "./storage";
export { AuthIdentity, PersistentAsyncStorage };
/**
 * @public
 */
export declare type IEthereumProvider = {
    sendAsync: any;
} | {
    request: any;
};
/**
 * @public
 */
export interface KernelTrackingEvent {
    eventName: string;
    eventData: Record<string, any>;
}
/**
 * @public
 */
export interface KernelError {
    error: Error;
    code?: string;
    level?: "critical" | "fatal";
    extra?: Record<string, any>;
}
/**
 * @public
 */
export interface KernelLoadingProgress {
    progress: number;
    status?: number;
}
/**
 * @public
 */
export declare enum LoginState {
    /**
     * Program not ready.
     */
    LOADING = "LOADING",
    /**
     * Ready to authenticate
     */
    WAITING_PROVIDER = "WAITING_PROVIDER",
    WAITING_RENDERER = "WAITING_RENDERER",
    /**
     * Authenticating
     */
    AUTHENTICATING = "AUTHENTICATING",
    SIGNATURE_PENDING = "SIGNATURE_PENDING",
    SIGNATURE_FAILED = "SIGNATURE_FAILED",
    /**
     * Creating avatar. Before signing ToS
     */
    SIGN_UP = "SIGN_UP",
    WAITING_PROFILE = "WAITING_PROFILE",
    COMPLETED = "COMPLETED"
}
/**
 * @public
 */
export declare type DecentralandIdentity = AuthIdentity & {
    address: string;
    rawAddress: string;
    provider?: any;
    hasConnectedWeb3: boolean;
};
/**
 * @public
 */
export interface KernelAccountState {
    loginStatus: LoginState;
    network?: string;
    identity?: DecentralandIdentity;
    hasProvider: boolean;
    isGuest?: boolean;
}
/**
 * @public
 */
export interface KernelSignUpEvent {
    email: string;
}
/**
 * @public
 */
export interface KernelOpenUrlEvent {
    url: string;
}
/**
 * @public
 */
export interface KernelLoadRealtimeVideoEvent {
    url: string;
    provider: string;
    streamId: string;
    videoId: string;
}
/**
 * @public
 */
export interface KernelUnloadRealtimeVideoEvent {
    videoId: string;
}
/**
 * @public
 */
export interface KernelRendererVisibleEvent {
    visible: boolean;
}
/**
 * @public
 */
export declare type KernelOptions = {
    kernelOptions: {
        baseUrl?: string;
        previewMode?: boolean;
        configurations?: Record<string, string>;
        persistentStorage?: PersistentAsyncStorage;
    };
    rendererOptions: {
        container: any;
        baseUrl?: string;
    };
};
/**
 * @public
 */
export declare type KernelLogoutEvent = {};
/**
 * @public
 *
 * This event is triggered after the kernel shuts down for any reason
 */
export declare type KernelShutdownEvent = {};
/**
 * @public
 */
export declare type NamedEvents = {
    signUp: KernelSignUpEvent;
    accountState: KernelAccountState;
    loadingProgress: KernelLoadingProgress;
    error: KernelError;
    trackingEvent: KernelTrackingEvent;
    rendererVisible: KernelRendererVisibleEvent;
    openUrl: KernelOpenUrlEvent;
    logout: KernelLogoutEvent;
    shutdown: KernelShutdownEvent;
    loadRealtimeVideo: KernelLoadRealtimeVideoEvent;
    unloadRealtimeVideo: KernelUnloadRealtimeVideoEvent;
};
/**
 * @public
 */
export declare type KernelResult = {
    on<K extends keyof NamedEvents>(eventName: K, cb: (event: NamedEvents[K]) => void): void;
    on(eventName: string, cb: (event: Record<string, any>) => void): void;
    authenticate(provider: IEthereumProvider, isGuest: boolean): void;
    version: string;
    /**
     * This method is used to know if the kernel has a stored session for
     * a specific address it is mainly used to perform autologin.
     */
    hasStoredSession(address: string, networkId: number): Promise<{
        result: boolean;
        profile?: any;
    }>;
};
/**
 * @public
 */
export interface IDecentralandKernel {
    initKernel(options: KernelOptions): Promise<KernelResult>;
}
//# sourceMappingURL=index.d.ts.map